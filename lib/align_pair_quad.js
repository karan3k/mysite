function alignNode(){this.value,this.tracebackI,this.tracebackJ}function initializeMatrix(sequenceOne,sequenceTwo,scoreSet){this.scoreSet=scoreSet,this.M=sequenceOne,this.N=sequenceTwo,this.score=0,this.nodes=new Array(this.M.length+1);for(var i=0;i<this.nodes.length;i++){this.nodes[i]=new Array(this.N.length+1);for(var j=0;j<this.nodes[i].length;j++)this.nodes[i][j]=new alignNode}this.nodes[0][0].value=0;for(var i=1;i<this.nodes.length;i++)this.scoreSet.useBeginGapLeft?this.nodes[i][0].value=this.nodes[i-1][0].value-this.scoreSet.beginGap:this.nodes[i][0].value=this.nodes[i-1][0].value-this.scoreSet.gap,this.nodes[i][0].tracebackI=i-1,this.nodes[i][0].tracebackJ=0;for(var j=1;j<this.nodes[0].length;j++)this.scoreSet.useBeginGapTop?this.nodes[0][j].value=this.nodes[0][j-1].value-this.scoreSet.beginGap:this.nodes[0][j].value=this.nodes[0][j-1].value-this.scoreSet.gap,this.nodes[0][j].tracebackI=0,this.nodes[0][j].tracebackJ=j-1}function dumpMatrix(){outputWindow.document.write("Dynamic programming matrix i="+this.nodes.length+" and j="+this.nodes[0].length),outputWindow.document.write("\n");for(var i=0;i<this.nodes.length;i++){for(var j=0;j<this.nodes[i].length;j++){var traceI=this.nodes[i][j].tracebackI,traceJ=this.nodes[i][j].tracebackJ;null==traceI&&(traceI="u"),null==traceJ&&(traceJ="u");var output="("+i+","+j+")["+traceI+","+traceJ+"]="+this.nodes[i][j].value;outputWindow.document.write(rightNum(output,"",20," "))}outputWindow.document.write("\n")}outputWindow.document.write("\n")}function fillMatrix(){for(var i=1;i<this.nodes.length;i++)for(var j=1;j<this.nodes[0].length;j++){var a,b,c;i==this.nodes.length-1&&j==this.nodes[0].length-1?(a=this.scoreSet.useEndGapRight?this.nodes[i-1][j].value-this.scoreSet.endGap:this.nodes[i-1][j].value-this.scoreSet.gap,b=this.scoreSet.useEndGapBottom?this.nodes[i][j-1].value-this.scoreSet.endGap:this.nodes[i][j-1].value-this.scoreSet.gap):i==this.nodes.length-1?(a=this.nodes[i-1][j].value-this.scoreSet.gap,b=this.scoreSet.useEndGapBottom?this.nodes[i][j-1].value-this.scoreSet.endGap:this.nodes[i][j-1].value-this.scoreSet.gap):j==this.nodes[0].length-1?(a=this.scoreSet.useEndGapRight?this.nodes[i-1][j].value-this.scoreSet.endGap:this.nodes[i-1][j].value-this.scoreSet.gap,b=this.nodes[i][j-1].value-this.scoreSet.gap):(a=this.nodes[i-1][j].value-this.scoreSet.gap,b=this.nodes[i][j-1].value-this.scoreSet.gap),c=this.nodes[i-1][j-1].value+this.scoreSet.getScore(this.M[i-1],this.N[j-1]),a>=b&&a>=c?(this.nodes[i][j].value=a,this.nodes[i][j].tracebackI=i-1,this.nodes[i][j].tracebackJ=j):b>=c&&b>=a?(this.nodes[i][j].value=b,this.nodes[i][j].tracebackI=i,this.nodes[i][j].tracebackJ=j-1):(this.nodes[i][j].value=c,this.nodes[i][j].tracebackI=i-1,this.nodes[i][j].tracebackJ=j-1)}this.score=this.nodes[this.nodes.length-1][this.nodes[0].length-1].value}function align(){this.alignedM=new Array,this.alignedN=new Array;for(var currentI=this.nodes.length-1,currentJ=this.nodes[0].length-1,currentNode=this.nodes[this.nodes.length-1][this.nodes[0].length-1];null!=currentNode.tracebackI&&null!=currentNode.tracebackJ;)currentNode.tracebackI==currentI-1&&currentNode.tracebackJ==currentJ-1?(this.alignedM.push(this.M.pop()),this.alignedN.push(this.N.pop())):currentNode.tracebackJ==currentJ-1?(this.alignedM.push("-"),this.alignedN.push(this.N.pop())):(this.alignedM.push(this.M.pop()),this.alignedN.push("-")),currentI=currentNode.tracebackI,currentJ=currentNode.tracebackJ,currentNode=this.nodes[currentNode.tracebackI][currentNode.tracebackJ];this.alignedM=this.alignedM.reverse(),this.alignedN=this.alignedN.reverse()}function getAlignedM(){return this.alignedM.join("")}function getAlignedN(){return this.alignedN.join("")}function AlignPairQuad(){this.M,this.N,this.scoreSet,this.nodes,this.alignedM,this.alignedN,this.score}new AlignPairQuad,AlignPairQuad.prototype.initializeMatrix=initializeMatrix,AlignPairQuad.prototype.fillMatrix=fillMatrix,AlignPairQuad.prototype.align=align,AlignPairQuad.prototype.getAlignedM=getAlignedM,AlignPairQuad.prototype.getAlignedN=getAlignedN,AlignPairQuad.prototype.dumpMatrix=dumpMatrix;