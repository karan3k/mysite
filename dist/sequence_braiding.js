window.SequenceBraiding=class{constructor(t,e,i={}){this.opt=this.fill_opt(i),this.data=t.slice(0,i.numSequences),this.data.forEach(t=>t.forEach(e=>null==e.seq_index?e.seq_index=this.data.indexOf(t):e.seq_index=e.seq_index)),this.path=i.path?i.path:this.find_path(this.data,i),i.pairwise_align_levels?this.levels=i.levels?i.levels:this.dna_levels(this.data):this.levels=i.levels?i.levels:this.find_levels(this.data),this.nodes=[],this.links=[],this.max_rank=3*this.path.length,this.svgname=e,this.svg_index=Array.prototype.slice.call(document.getElementsByTagName("svg")).indexOf(document.getElementById(e)),this.svg=d3.select("#"+this.svgname),this.svg.attr("width",this.opt.svg_width).attr("height",this.opt.height);var s=document.getElementById(this.svgname).clientWidth,n=document.getElementById(this.svgname).clientHeight;this.build(),this.cleanup(this.opt.minEventPerColThreshold),null==this.opt.horizontal_spacing?this.horizontal_spacing="100%"==this.opt.width?.9*s/(this.path.length-2):.9*this.opt.width/(this.path.length-2):this.horizontal_spacing=this.opt.horizontal_spacing,null==this.opt.vertical_spacing?this.vertical_spacing=Math.min(Math.max(n/(2*this.data.length),1),12):this.vertical_spacing=i.vertical_spacing,this.node_width=this.opt.node_width_factor*this.horizontal_spacing,this.grid=this.sort_nodes_vertically(this.opt.animate),this.last_cleanup(),this.add_virtual_nodes(this.grid),this.set_nodes_y(this.grid),this.opt.guidelines&&this.draw_guidelines(),this.opt.animate?(this.position_links(250*this.opt.max_iterations),this.position_nodes(250*this.opt.max_iterations)):this.draw(),this.add_path_text(),this.opt.show_seq_names&&this.show_seq_names()}fill_opt(t){const e={guidelines:!0,animate:!1,colorbysequence:!1,forceLevelName:!1,verbose_stats:!1,verbose_ord:!0,formulate_ilp:!1,retrieve_ilp:!1,minEventPerColThreshold:1,numSequences:100,max_iterations:20,height:400,width:"100%",svg_width:"100%",link_opacity:1,node_width_factor:.2,link_stroke_width:4,padding:{top:40,left:40},colorscheme:["#E32551","#F07C19","#029DAF","#FFC219","#cd5b43"],fontSize:"0.9em",catmullromvalue:1,path_text_y:10,path:void 0,levels:void 0,pairwise_align_levels:!1,pairwise_alignment_vars:{MATCH_SCORE:100,MISMATCH_SCORE:-10,BEGIN_GAP_PENALTY:2,GAP_PENALTY:1,END_GAP_PENALTY:2}};for(var i in e)null==t[i]&&(t[i]=e[i]);return t}show_seq_names(){let t=[];for(var e in this.grid)if(null!=this.grid[e])for(var i of this.grid[e])if(null!=i.seq_index){let s=this.data[i.seq_index][0].seq_name;-1==t.indexOf(s)&&(t.push(s),this.svg.append("text").text(s).attr("y",i.y*this.vertical_spacing+this.opt.padding.top+this.opt.link_stroke_width).attr("x",e*this.horizontal_spacing-this.node_width).attr("font-size","x-small").attr("text-anchor","end").attr("stroke","white").attr("stroke-width",5),this.svg.append("text").text(s).attr("y",i.y*this.vertical_spacing+this.opt.padding.top+this.opt.link_stroke_width).attr("x",e*this.horizontal_spacing-this.node_width).attr("font-size","x-small").attr("text-anchor","end"))}}last_cleanup(){var t=this.grid[this.grid.length-2],e=this.grid[this.grid.length-3];t.sort((t,i)=>{if(!t.isanchor&&!i.isanchor&&t.level==i.level)return e.indexOf(t.prev_node)<e.indexOf(i.prev_node)?-1:1});var i=this.grid[1],s=this.grid[2];i.sort((t,e)=>{if(!t.isanchor&&!e.isanchor&&t.level==e.level)return s.indexOf(t.next_node)<s.indexOf(e.next_node)?-1:1})}dna_levels(t){var e={},i={},s=0;for(var n in t)for(var r of t[n])null==e[r.level]&&(e[r.level]=String.fromCharCode(parseInt(s)+65),s++);for(var r in e)i[e[r]]=r;var o=[];for(var a of t){a=a.filter(t=>t.level.length>1);var l="";for(var h of a)l+=e[h.level];o.push(l)}var d=pairwiseAlignDna(o,this.opt.pairwise_alignment_vars),_=[];for(var n in d)_.push(i[d[n]]);return _=[...new Set(_)]}find_path(t,e){var i={},s={},n=0;for(var r in t)for(var o of t[r])null==i[o.type]&&(i[o.type]=String.fromCharCode(parseInt(n)+65),n++);for(var o in i)s[i[o]]=o;var a=[];for(var l of t){l=l.filter(t=>t.type.length>1);var h="";for(var d of l)h+=i[d.type];a.push(h)}var _=pairwiseAlignDna(a,e),f=[];for(var r in _)f.push(s[_[r]]);return f.unshift("source"),f.push("sink"),f}find_levels(t){let e=[];return t.forEach(t=>t.forEach(t=>e.includes(t.level)?"":e.push(t.level))),e}get_color(t){return this.opt.colorbysequence?this.opt.colorscheme[t.seq_index%this.opt.colorscheme.length]:this.opt.colorscheme[this.levels.indexOf(t.level)%this.opt.colorscheme.length]}draw_guidelines(){var t=d3.line().x(t=>t.x).y(t=>t.y);for(var e of this.levels)if(this.svg.append("path").attr("class","level-guideline").attr("stroke","#33333322").attr("stroke-width",2).attr("stroke-dasharray",5,5).attr("d",t([{x:0,y:this.start_heights[e]*this.vertical_spacing+this.opt.padding.top},{x:document.getElementById(this.svgname).clientWidth,y:this.start_heights[e]*this.vertical_spacing+this.opt.padding.top}])),this.nodes.filter(t=>t.level==e).length>0&&(this.data.length<30||this.opt.forceLevelName)){let t=(this.start_heights[e]+.5*this.level_heights[e])*this.vertical_spacing+this.opt.padding.top+.5*this.vertical_spacing,i=this.svg.append("g").attr("transform","translate(5, "+t+")").attr("class","lvlname");i.append("circle").attr("cx",0).attr("cy",-5).attr("r",4).attr("fill",this.opt.colorscheme[this.levels.indexOf(e)%this.opt.colorscheme.length]),i.append("text").attr("x",7).attr("font-size",this.opt.fontSize).attr("fill","#555").attr("font-family","Arial").text(e)}}cleanup(t){do{var e=!1;for(var i in this.path){if("source"!=this.path[i]&&"sink"!=this.path[i])if(this.nodes.filter(t=>t.depth==i&&!t.isanchor).length<t){this.path.splice(i,1),this.nodes=[],this.links=[],e=!0;break}}e&&this.build()}while(e)}get_grid_order(t){var e=[],i={},s=[];let n=[];var r=0;for(var o in t)for(var a in n[o]=[],t[o])n[o].push(t[o][a].level),null==i[t[o][a].seq_index]&&(i[t[o][a].seq_index]=r,s[r]=t[o][a].seq_index,r++);for(var o in t){var l=[];for(var a in t[o])l.push(i[t[o][a].seq_index]);e.push(l)}return[e,s,i,n]}count_crossings_from_ord(t){for(var e=0,i=0;i<t.length-1;i++)for(var s=0;s<t[i].length;s++)for(var n=s+1;n<t[i].length;n++)t[i+1].indexOf(t[i][s])>t[i+1].indexOf(t[i][n])&&(e+=1);return e}apply_ord(t,e,i,s){for(var n in e)null!=t[n]&&(e[n]=e[n].sort((e,i)=>t[n].indexOf(s[e.seq_index])>t[n].indexOf(s[i.seq_index])?1:-1))}apply_ord_for_ilp(t,e,i,s){for(var n in e)null!=t[n-1]&&(e[n]=e[n].sort((e,i)=>t[n-1].indexOf(s[e.seq_index])>t[n-1].indexOf(s[i.seq_index])?1:-1))}move(t,e,i){for(;e<0;)e+=t.length;for(;i<0;)i+=t.length;if(i>=t.length)for(var s=i-t.length;1+s--;)t.push(void 0);return t.splice(i,0,t.splice(e,1)[0]),t}gen_cluster(t,e,i,s){if(null==s[e])return[];for(var n=[],r=0;r<t[e].length;r++){var o=s[e].find(s=>s.seq_index==i[t[e][r]]&&!(s.fake_in||s.fake_out));null!=o&&(o.isanchor||"unknown"==o.level?n.push(o):null==n.find(t=>t.g==o.level)?n.push({g:o.level,nodes:[o]}):n.find(t=>t.g==o.level).nodes.push(o))}return n}structured_to_normal_ord(t,e){var i=[];for(var s in t){var n=[];for(var r in t[s])if(null==t[s][r].g)n.push(e[t[s][r].seq_index]);else for(var o in t[s][r].nodes)n.push(e[t[s][r].nodes[o].seq_index]);i.push(n)}return i}wmedian_nodes_left(t,e,i,s){for(var n=[],r=0;r<t.length;r++){var o=this.gen_cluster(t,r,i,s);for(var a in o)if(null==o[a].g)o[a].wmean=t[r-1].indexOf(t[r-1].find(t=>i[t]==o[a].seq_index));else{for(var l of(o[a].wmean=0,o[a].nodes))l.wvalue=t[r-1].indexOf(t[r-1].find(t=>i[t]==l.seq_index)),o[a].wmean+=l.wvalue;o[a].nodes.sort((i,s)=>this.within_cluster_sort(i,s,"left",t,e,r)),o[a].wmean=o[a].wmean/o[a].nodes.length}o=o.sort((t,e)=>this.general_cluster_sort(t,e)),n.push(o)}return this.structured_to_normal_ord(n,e)}wmedian_nodes_right(t,e,i,s){for(var n=[],r=t.length-1;r>-1;r--){var o=this.gen_cluster(t,r,i,s);for(var a in o)if(null!=t[r+1])if(null==o[a].g)o[a].wmean=t[r+1].indexOf(t[r+1].find(t=>i[t]==o[a].seq_index));else{for(var l of(o[a].wmean=0,o[a].nodes))l.wvalue=t[r+1].indexOf(t[r+1].find(t=>i[t]==l.seq_index)),o[a].wmean+=l.wvalue;o[a].nodes.sort((i,s)=>this.within_cluster_sort(i,s,"right",t,e,r)),o[a].wmean=o[a].wmean/o[a].nodes.length}o=o.sort((t,e)=>this.general_cluster_sort(t,e)),n.push(o)}return n=n.reverse(),this.structured_to_normal_ord(n,e)}wmedian_n(t,e,i,s,n="right"){var r=[];let o=0,a=void 0,l=0;"right"==n?(o=t.length-1,a=t=>t>-1,l=1):(o=0,a=e=>e<t.length,l=-1);for(var h=o;a(h);"right"==n?h--:h++){var d=this.gen_cluster(t,h,i,s);for(var _ in d)if(null!=t[h+l])if(null==d[_].g)d[_].wmean=t[h+l].indexOf(t[h+l].find(t=>i[t]==d[_].seq_index));else{for(var f of(d[_].wmean=0,d[_].nodes))f.wvalue=t[h+l].indexOf(t[h+l].find(t=>i[t]==f.seq_index)),d[_].wmean+=f.wvalue;d[_].nodes.sort((i,s)=>this.within_cluster_sort(i,s,n,t,e,h)),d[_].wmean=d[_].wmean/d[_].nodes.length}d=d.sort((t,e)=>this.general_cluster_sort(t,e)),r.push(d)}return r=r.reverse(),this.structured_to_normal_ord(r,e)}within_cluster_sort(t,e,i,s,n,r){return t.next_node.fake_out||e.next_node.fake_out?s[r-1].indexOf(n[t.prev_node.seq_index])>s[r-1].indexOf(n[e.prev_node.seq_index])?1:-1:t.prev_node.fake_in||e.prev_node.fake_in?s[r+1].indexOf(n[t.next_node.seq_index])>s[r+1].indexOf(n[e.next_node.seq_index])?1:-1:t.wvalue>e.wvalue?1:-1}general_cluster_sort(t,e){return e.isanchor&&null!=t.g&&this.levels.indexOf(e.incoming_links[0].source.level)==this.levels.indexOf(e.outgoing_links[0].target.level)?this.levels.indexOf(e.outgoing_links[0].target.level)>this.levels.indexOf(t.g)?-1:1:t.isanchor&&null!=e.g&&this.levels.indexOf(t.incoming_links[0].source.level)==this.levels.indexOf(t.outgoing_links[0].target.level)?this.levels.indexOf(t.outgoing_links[0].target.level)>this.levels.indexOf(e.g)?1:-1:null!=t.g&&null!=e.g&&t.g!=e.g?this.levels.indexOf(t.g)>this.levels.indexOf(e.g)?1:-1:t.wmean>e.wmean?1:-1}transpose(t,e,i,s){console.log(e),console.log(i);let n=!0;for(;n;){n=!1;for(let e=0;e<t.length;e++)for(let i=0;i<t[e].length-1;i++){let s=t[e][i],r=t[e][i+1],o=this.count_crossings_from_ord(t.slice(e-1,e+1));t[e][i]=r,t[e][i+1]=s,this.count_crossings_from_ord(t.slice(e-1,e+1))<o?n=!0:(t[e][i]=s,t[e][i+1]=r)}}return t}sort_nodes_vertically(t=!1){for(var e=new Date,i=[],s=this.max_rank,n=0;n<s;n++)if(this.nodes.some(t=>t.depth==n))for(var r of(i[n]=[],this.nodes.filter(t=>t.depth==n)))i[n].push(r);var o=this.get_grid_order(i)[0],a=this.get_grid_order(i)[1],l=this.get_grid_order(i)[2],h=this.get_grid_order(i)[3],d=(this.count_crossings_from_ord(o),1/0),_=o;this.apply_ord(_,i,a,l),this.grid=i,this.opt.animate&&(this.set_nodes_y(i),this.init_paths(),this.init_nodes(),this.position_links(0),this.position_nodes(0)),this.opt.formulate_ilp&&this.formulate_ilp(o,h);let f={};for(var p=0;p<this.opt.max_iterations;p++){if(p%2==0)var c=this.wmedian_nodes_left(deepClone(_),l,a,i,"left");else c=this.wmedian_nodes_right(deepClone(_),l,a,i,"right");let s=this.count_crossings_from_ord(c);if(null==f[s]&&(f[s]=0),f[s]+=1,3==f[s]){this.opt.verbose_stats&&console.log("num iterations: ",p,"\t final crossings: ",d,"\t time: ",((new Date).getTime()-e.getTime())/1e3+" s");break}s<d&&(_=c,d=this.count_crossings_from_ord(_),t&&(this.apply_ord(_,i,a,l),this.set_nodes_y(i),this.position_links(1e3*(p+1)),this.position_nodes(1e3*(p+1)))),this.opt.verbose_stats&&console.log("i: ",p,"\t best crossings: ",d,"\t cur crossings: ",s,"\t time: ",((new Date).getTime()-e.getTime())/1e3+" s")}return this.opt.retrieve_ilp?(_=getoordfromilp(this.opt.ilpdata,o),console.log("ilp order: ",_,this.count_crossings_from_ord(_)),this.apply_ord_for_ilp(_,i,a,l)):this.opt.initial_layout?this.apply_ord(o,i,a,l):this.apply_ord(_,i,a,l),this.opt.verbose_ord&&(console.log("final ord:",_),console.log("final grid:",i)),i}formulate_ilp=(t,e)=>{e=e.slice(1);let i=(t,e,i)=>"x_k"+t+"_"+ +e+"_"+i,s=(t,e,i,s,n)=>"c_k"+t+"_"+e+"_"+i+"_"+s+"_"+n,n="",r=t,o="Minimize\n";for(let t=0;t<r.length-1;t++)for(let e of r[t]){let i=r[t+1].find(t=>t==e);for(let n of r[t]){if(e==n)continue;let a=r[t+1].find(t=>t==n);o+=" + "+s(t,e,i,n,a)+" "}}o+="\n",n+=o;let a=0,l="Subject To\n";for(let t in r)for(let e of r[t])for(let s of r[t]){let n=r[t][e],o=r[t][s];n!=o&&(l+="C"+a+": "+i(t,n,o)+" + "+i(t,o,n)+" = 1\n",a+=1)}for(let t in r)for(let e in r[t]){let s=r[t][e];for(let e in r[t]){let n=r[t][e];if(s!=n)for(let e in r[t]){let o=r[t][e];s!=o&&(n!=o&&(l+="C"+a+": "+i(t,o,n)+" + "+i(t,n,s)+" - "+i(t,o,s)+" <= 1\n",a+=1))}}}for(let t=0;t<r.length-1;t++)for(let e in r[t]){let n=r[t][e],o=r[t+1].find(t=>t==n);for(let e in r[t]){let h=r[t][e],d=r[t+1].find(t=>t==h);n!=h&&(l+="C"+a+": "+s(t,n,o,h,d)+" + "+i(t,h,n)+" + "+i(t+1,o,d)+" >= 1\n",a+=1,l+="C"+a+": "+s(t,n,o,h,d)+" + "+i(t,n,h)+" + "+i(t+1,d,o)+" >= 1\n",a+=1)}}n+=l;let h="Bounds\n";for(let t=0;t<r.length;t++)for(let s in r[t]){let n=r[t][s],o=this.levels.indexOf(e[t][s]);for(let a in r[t]){let l=r[t][a];if(n==l)continue;let d=this.levels.indexOf(e[t][a]);1==t&&0==s&&console.log("k:",t,"u1",n,"lvlu1",o,"u2",l,"lvlu2",d),o<d&&(h+=i(t,n,l)+" = 1\n")}}n+=h;let d="Binaries\n";for(let t in r)for(let e of r[t])for(let i of r[t]){let s=r[t][e],n=r[t][i];s!=n&&(d+="x_k"+t+"_"+ +s+"_"+n+" ")}for(let t=0;t<r.length-1;t++)for(let e of r[t]){let i=r[t+1].find(t=>t==e);for(let s of r[t]){if(e==s)continue;let n=r[t+1].find(t=>t==s);d+="c_k"+t+"_"+ +e+"_"+i+"_"+s+"_"+n+" "}}var _,f;n+=d,n+="\nEnd",_=new Blob([n],{type:"text/plain"}),(f=document.createElement("a")).download="sb.lp",f.innerHTML="Download File",null!=window.webkitURL?f.href=window.webkitURL.createObjectURL(_):(f.href=window.URL.createObjectURL(_),f.onclick=destroyClickedElement,f.style.display="none",document.body.appendChild(f)),f.click()};init_paths(){var t=d3.select("#"+this.svgname),e=d3.line().x((function(t){return t.x})).y((function(t){return t.y})).curve(d3.curveCatmullRom.alpha(this.opt.catmullromvalue));for(var i of this.data){var s=this.links.filter(t=>t.seq_index==i[0].seq_index);if(0==s.length)continue;var n=s.filter(t=>!t.source.fake_in&&!t.target.fake_out&&!(t.source==this.source||t.target==this.target)),r=n.length,o=[];for(var a of s)a.source.fake_in&&a.target.fake_in||a.source.fake_out&&a.target.fake_out||(a.source!=this.source&&!a.source.fake_in||a.target.fake_in?(o.push({x:s.indexOf(a)*this.horizontal_spacing-this.node_width,y:this.data.indexOf(i)*this.vertical_spacing+.001*Math.random()}),o.push({x:s.indexOf(a)*this.horizontal_spacing,y:this.data.indexOf(i)*this.vertical_spacing+.001*Math.random()}),o.push({x:s.indexOf(a)*this.horizontal_spacing+this.node_width,y:this.data.indexOf(i)*this.vertical_spacing+.001*Math.random()})):o.push({x:s.indexOf(a)*this.horizontal_spacing,y:this.data.indexOf(i)*this.vertical_spacing+.001*Math.random()}));o.push({x:s.indexOf(a)*this.horizontal_spacing,y:this.data.indexOf(i)*this.vertical_spacing+.001*Math.random()}),this.gen_gradient(t,a,r,n);const l=this.svg_index;t.append("path").datum({seq_index:i[0].seq_index}).attr("id","day_"+i[0].seq_index).attr("class","seqpath").attr("d",e(o)).style("stroke","url(#linear-gradient"+l+"_"+a.seq_index+")").style("stroke-width",this.opt.link_stroke_width).style("opacity",this.opt.link_opacity).attr("fill","#ffffff00").on("mouseover",(function(t){d3.select(this).style("stroke","black")})).on("mouseout",(function(t){d3.select(this).style("stroke","url(#linear-gradient"+l+"_"+this.id.split("_")[1]+")")}))}}position_links(t=0,e=1e3){var i=d3.select("#"+this.svgname),s=d3.line().x((function(t){return t.x})).y((function(t){return t.y})).curve(d3.curveCatmullRom.alpha(this.opt.catmullromvalue));for(var n of this.data){var r=this.links.filter(t=>t.seq_index==n[0].seq_index);if(0!=r.length){r.filter(t=>!t.source.fake_in&&!t.target.fake_out&&!(t.source==this.source||t.target==this.target)).length;var o=[];for(var a of r)a.source.fake_in&&a.target.fake_in||a.source.fake_out&&a.target.fake_out||(a.source!=this.source&&!a.source.fake_in||a.target.fake_in?(o.push({x:this.get_node_x(a.source,this.horizontal_spacing),y:this.opt.padding.top+a.source.y*this.vertical_spacing+.001*Math.random()}),o.push({x:this.node_width/2+this.get_node_x(a.source,this.horizontal_spacing),y:this.opt.padding.top+a.source.y*this.vertical_spacing+.001*Math.random()}),o.push({x:this.node_width+this.get_node_x(a.source,this.horizontal_spacing),y:this.opt.padding.top+a.source.y*this.vertical_spacing+.001*Math.random()})):o.push({x:this.get_node_x(a.source,this.horizontal_spacing)+(this.horizontal_spacing-this.opt.padding.left),y:this.opt.padding.top+a.target.y*this.vertical_spacing+1*Math.random()}));o.push({x:o[o.length-1].x+this.opt.padding.left,y:o[o.length-1].y+.001*Math.random()}),i.select("#day_"+n[0].seq_index).transition().attr("d",()=>s(o)).duration(e).delay(t)}}}init_nodes(){var t=d3.select("#"+this.svgname);for(var e of this.nodes)t.append("rect").datum(e).attr("id","node_"+e.seq_index+"_"+e.depth).attr("class","seqnode").attr("x",this.get_node_x(e,this.horizontal_spacing)).attr("y",this.vertical_spacing).attr("width",this.node_width).attr("height",this.vertical_spacing).attr("rx","5px").attr("fill",e.isanchor?"#ffffff00":e.color).attr("opacity",0).on("click",t=>console.log(t))}position_nodes(t=0,e=1e3){var i=d3.select("#"+this.svgname);for(var s of this.nodes)i.select("#node_"+s.seq_index+"_"+s.depth).transition().attr("x",this.get_node_x(s,this.horizontal_spacing)).attr("y",this.opt.padding.top+s.y*this.vertical_spacing-this.vertical_spacing/2).attr("opacity",.5).duration(e).delay(t)}add_virtual_nodes(t){var e={},i={};for(var s of this.levels){for(var n=0,r=0;r<=this.max_rank;r++)null!=t[r]&&(t[r]=t[r].filter(t=>!t.fake_in&&!t.fake_out),t[r].filter(t=>t.level==s&&!t.fake_in&&!t.fake_out).length>n&&(n=t[r].filter(t=>t.level==s||"unknown"==t.level).length));e[s]=n+1}var o=0;for(var s of this.levels)i[s]=o,o+=e[s];this.start_heights=i,this.level_heights=e;for(r=0;r<=this.max_rank;r++)if(null!=t[r])for(var s of this.levels){var a=t[r].filter(t=>t.level==s),l=e[s]-a.length;0==a.length&&(l=e[s]);for(var h=0;h<l;h++)0!=a.length?t[r].splice(t[r].indexOf(a[a.length-1])+1,0,{}):t[r].splice(i[s],0,{})}}set_nodes_y(t){for(var e of this.nodes)null!=t[e.depth]&&(e.y=t[e.depth].indexOf(e))}add_node(t,e,i,s,n=!1,r=!1){var o={level:e.level,type:e.type,color:s?averageRGB(this.get_color(e),t.color):this.get_color(e),incoming_links:[],outgoing_links:[],next_node:null,prev_node:t,isanchor:s,depth:i,fake_out:n,fake_in:r,seq_index:e.seq_index,label:e.label},a={source:t,target:o,seq_index:e.seq_index,day:e.Date};return t.outgoing_links.push(a),t.next_node=o,o.incoming_links.push(a),this.nodes.push(o),this.links.push(a),o}build(){this.source={depth:0,incoming_links:[],outgoing_links:[],color:"#fff",fake_in:!0},this.sink={depth:path.length+1,incoming_links:[],outgoing_links:[],color:"gray",fake_out:!0};for(var t of this.data){var e=this.source;for(var i of t){var s=t.indexOf(i);if(-1!=this.path.slice(1).slice(e.depth,this.path.length).indexOf(this.path.find(t=>i.type==t))){if((o=e.depth+this.path.slice(1).slice(e.depth,this.path.length).indexOf(this.path.find(t=>i.type==t)))-e.depth>=0)for(var n=o-e.depth,r=0;r<n;r+=1)e=0==s?this.add_node(e,i,o-n+r+1,!0,!1,!0):this.add_node(e,i,o-n+r+1,!0,!1,!1);e=this.add_node(e,i,o+1,!1)}}if(e.depth!=this.path.length-1){var o;for(n=(o=this.path.length-1)-e.depth,r=0;r<n;r+=1)e=this.add_node(e,i,e.depth+1,!0,!0)}}}count_crossings(t){for(var e=0,i=0;i<this.path.length;i++){var s=t[i],n=t[i+1];if(null==n)break;for(var r in s){var o=n.indexOf(s[r].next_node);for(var a in s)if(r!=a){var l=n.indexOf(s[a].next_node);r>a?o<l&&e++:r<a&&o>l&&e++}}}return e/2}get_node_x(t){return t.depth*this.horizontal_spacing}gen_gradient(t,e,i,s){var n=t.append("defs").append("linearGradient").attr("id","linear-gradient"+this.svg_index+"_"+e.seq_index);for(e of(n.append("stop").attr("offset",0).attr("stop-color","#ffffff00"),0==s.length&&n.append("stop").attr("offset",.5).attr("stop-color",e.target.color),s))if(e.source!=this.source){var r=e.source.color,o=e.target.color;n.append("stop").attr("offset",5/i*.05+1*s.indexOf(e)/i).attr("stop-color",r),n.append("stop").attr("offset",5/i*.05+1*(s.indexOf(e)+.5)/i).attr("stop-color",o)}n.append("stop").attr("offset",1).attr("stop-color","#ffffff00")}add_path_text(){var t=d3.select("#"+this.svgname);for(var e in this.path)if("source"!=this.path[e]&&"sink"!=this.path[e])t.append("text").attr("y",this.opt.path_text_y).attr("x",(t,i)=>e*this.horizontal_spacing+this.node_width/2).attr("text-anchor","middle").attr("font-family","Arial").attr("class","path_top_text").attr("font-size","0.8em").attr("fill","black").text(this.path[e])}draw(){var t=d3.select("#"+this.svgname);this.init_nodes(),this.position_nodes(0,0),this.init_paths(t),this.position_links(0,0)}};
var isValidDate=function(t){return t instanceof Date&&!isNaN(t)},isSameDay=function(t,e){return t.getFullYear()==e.getFullYear()&&t.getMonth()==e.getMonth()&&t.getDate()==e.getDate()},getParams=function(t){var e={},r=document.createElement("a");r.href=t;for(var n=r.search.substring(1).split("&"),a=0;a<n.length;a++){var o=n[a].split("=");e[o[0]]=decodeURIComponent(o[1])}return e},days_iterator=function*(t){for(ev of(cur_date=null,day_arr=[],t))date=new Date(ev.Date),isValidDate(date)&&(null==cur_date?cur_date=date:t.indexOf(ev)==t.length-1?(day_arr.push(ev),yield day_arr):isSameDay(cur_date,date)?day_arr.push(ev):(yield day_arr,cur_date=date,day_arr=[]))},deepClone=function(t,e=new WeakMap){if(Object(t)!==t)return t;if(t instanceof Set)return new Set(t);if(e.has(t))return e.get(t);const r=t instanceof Date?new Date(t):t instanceof RegExp?new RegExp(t.source,t.flags):t.constructor?new t.constructor:Object.create(null);return e.set(t,r),t instanceof Map&&Array.from(t,([t,n])=>r.set(t,this.deepClone(n,e))),Object.assign(r,...Object.keys(t).map(r=>({[r]:this.deepClone(t[r],e)})))},get_glucose_level=function(t){return""==t||null==t||isNaN(t)?"unknown":t<54?"very_low":t<70?"low":t<180?"normal":t<250?"high":"very_high"},calc_day_diff=function(t,e){var r=Math.floor(Math.abs(new Date(e).getTime()-new Date(t).getTime()));return Math.floor(r/864e5)},invert_order_of_data=function(t){for(var e=[],r=t.length-1;r>=0;r--)e.push(t[r]);return e},select_days=function(t,e){for(i in result=[],t=t.filter(t=>""!=t.Date&&null!=t.Date),start_date=t[0].Date.split(" ")[0],t)if(cur_date=t[i].Date.split(" ")[0],!(calc_day_diff(start_date,cur_date)<startDayNum)){if(calc_day_diff(start_date,cur_date)>=startDayNum+numDays)break;result.push(t[i])}return result},averageRGB=function(){var t=/[\da-z]{2}/gi;function e(t){return parseInt(t,16)}return function(r,n){if(null==r)return n;if(null==n)return r;for(var a,o=r.match(t),s=n.match(t),i=[],c=o.length;c;)a=(e(o[--c])+e(s[c])>>1).toString(16),i[c]=2==a.length?""+a:"0"+a;return"#"+i.join("")}}(),get_color=function(t){switch(t){case"unknown":return opt.colorscheme[0];case"very_high":return opt.colorscheme[1];case"high":return opt.colorscheme[2];case"normal":return opt.colorscheme[3];case"low":return opt.colorscheme[4];case"very_low":return opt.colorscheme[5];default:return opt.colorscheme[6]}},groupBy=function(t,e){return t.reduce((function(t,r){return(t[r[e]]=t[r[e]]||[]).push(r),t}),{})},find_unique_targets=function(t){for(link of(res=[],t))-1==res.indexOf(link.target)&&res.push(link.target);return res},find_unique_sources=function(t){for(link of(res=[],t))-1==res.indexOf(link.source)&&res.push(link.source);return res},create_gradient=function(t,e){defs=svg.select("defs");const r="gradient"+e,n=t.source.color,a=t.target.color;var o="10%",s="90%";(t.target==window.graph.sink||t.source==window.graph.source)&&(o="0%",s="100%");return defs.append("linearGradient").attr("id",r).selectAll("stop").data([{offset:o,color:n},{offset:s,color:a}]).enter().append("stop").attr("offset",t=>t.offset).attr("stop-color",t=>t.color),`url(#${r})`},create_transparent_black_gradients=function(){defs=svg.select("defs"),defs.append("linearGradient").attr("id","transparent_to_black_gradient").selectAll("stop").data([{offset:0,color:"#ffffff00"},{offset:1,color:"#000"}]).enter().append("stop").attr("offset",t=>t.offset).attr("stop-color",t=>t.color),defs.append("linearGradient").attr("id","black_to_transparent_gradient").selectAll("stop").data([{offset:0,color:"#000"},{offset:1,color:"#ffffff00"}]).enter().append("stop").attr("offset",t=>t.offset).attr("stop-color",t=>t.color)},draw_grid=function(t){for(var e=d3.line().x((function(t){return t.x})).y((function(t){return t.y})),r=200-(a=(width-200)/(4*(t.length+1)))/2,n=0;n<4*t.length;n++)svg.append("path").attr("stroke",()=>n%4==0||(n-1)%4==0?"#777":"#ccc").attr("stroke-width","1").style("stroke-dasharray","3, 3").attr("d",e([{x:r+n*a,y:0},{x:r+n*a,y:height}]));var a,o=200-(a=(height-200)/(2*(glucose_levels.length+1)))/2;for(n=0;n<2*glucose_levels.length;n++)svg.append("path").attr("stroke","#ccc").attr("stroke-width","1").style("stroke-dasharray","3, 3").attr("d",e([{x:0,y:a*n+o},{x:width,y:a*n+o}]))},onSegment=function(t,e,r){return e.x<=Math.max(t.x,r.x)&&e.x>=Math.min(t.x,r.x)&&e.y<=Math.max(t.y,r.y)&&e.y>=Math.min(t.y,r.y)},check_orientation=function(t,e,r){var n=(e.y-t.y)*(r.x-e.x)-(e.x-t.x)*(r.y-e.y);return 0==n?0:n>0?1:2},check_intersection=function(t,e,r,n){var a=check_orientation(t,e,r),o=check_orientation(t,e,n),s=check_orientation(r,n,t),i=check_orientation(r,n,e);return a!=o&&s!=i||(!(0!=a||!onSegment(t,r,e))||(!(0!=o||!onSegment(t,n,e))||(!(0!=s||!onSegment(r,t,n))||!(0!=i||!onSegment(r,e,n)))))},count_intersections=function(t=!1,e){div=document.getElementById("intersection_div"),num_intersections=0,tmp_links=window.graph.links.filter(t=>t.source!=window.graph.source&&t.target!=window.graph.sink);for(var r=0;r<tmp_links.length;r++)for(var n=tmp_links[r],a=0;a<n.anchors.length-1;a++)for(var o=n.anchors[a],s=n.anchors[a+1],i=r+1;i<tmp_links.length;i++)for(var c=tmp_links[i],l=0;l<c.anchors.length-1;l++){var u=c.anchors[l],f=c.anchors[l+1];1==check_intersection(o,s,u,f)&&(num_intersections++,t&&hightlight_intersection(o,s,u,f))}return div.innerHTML=num_intersections,num_intersections},hightlight_intersection=function(t,e,r,n){var a=d3.line().x((function(t){return t.x})).y((function(t){return t.y}));svg.append("path").attr("stroke","red").attr("stroke-width","3").attr("d",a([{x:t.x,y:t.y},{x:e.x,y:e.y}])),svg.append("path").attr("stroke","red").attr("stroke-width","3").attr("d",a([{x:r.x,y:r.y},{x:n.x,y:n.y}]))},show_anchors=function(){if(0==showing_anchors){for(link of window.graph.links)for(anchor of link.anchors)svg.append("circle").attr("class","anchor-circle").attr("cx",anchor.x).attr("cy",anchor.y).attr("r",3).attr("fill","black");showing_anchors=!0}else svg.selectAll(".anchor-circle").remove(),showing_anchors=!1},count_bundled_edges=function(){div=document.getElementById("bundles_div"),num_bundles=0,div.innerHTML=num_bundles},swapArrayElements=function(t,e,r){var n=t[e];t[e]=t[r],t[r]=n};
function alignNode(){this.value,this.tracebackI,this.tracebackJ}function initializeMatrix(e,t,s){this.scoreSet=s,this.M=e,this.N=t,this.score=0,this.nodes=new Array(this.M.length+1);for(var i=0;i<this.nodes.length;i++){this.nodes[i]=new Array(this.N.length+1);for(var n=0;n<this.nodes[i].length;n++)this.nodes[i][n]=new alignNode}this.nodes[0][0].value=0;for(i=1;i<this.nodes.length;i++)this.scoreSet.useBeginGapLeft?this.nodes[i][0].value=this.nodes[i-1][0].value-this.scoreSet.beginGap:this.nodes[i][0].value=this.nodes[i-1][0].value-this.scoreSet.gap,this.nodes[i][0].tracebackI=i-1,this.nodes[i][0].tracebackJ=0;for(n=1;n<this.nodes[0].length;n++)this.scoreSet.useBeginGapTop?this.nodes[0][n].value=this.nodes[0][n-1].value-this.scoreSet.beginGap:this.nodes[0][n].value=this.nodes[0][n-1].value-this.scoreSet.gap,this.nodes[0][n].tracebackI=0,this.nodes[0][n].tracebackJ=n-1}function dumpMatrix(){outputWindow.document.write("Dynamic programming matrix i="+this.nodes.length+" and j="+this.nodes[0].length),outputWindow.document.write("\n");for(var e=0;e<this.nodes.length;e++){for(var t=0;t<this.nodes[e].length;t++){var s=this.nodes[e][t].tracebackI,i=this.nodes[e][t].tracebackJ;null==s&&(s="u"),null==i&&(i="u");var n="("+e+","+t+")["+s+","+i+"]="+this.nodes[e][t].value;outputWindow.document.write(rightNum(n,"",20," "))}outputWindow.document.write("\n")}outputWindow.document.write("\n")}function fillMatrix(){for(var e=1;e<this.nodes.length;e++)for(var t=1;t<this.nodes[0].length;t++){var s,i,n;e==this.nodes.length-1&&t==this.nodes[0].length-1?(s=this.scoreSet.useEndGapRight?this.nodes[e-1][t].value-this.scoreSet.endGap:this.nodes[e-1][t].value-this.scoreSet.gap,i=this.scoreSet.useEndGapBottom?this.nodes[e][t-1].value-this.scoreSet.endGap:this.nodes[e][t-1].value-this.scoreSet.gap):e==this.nodes.length-1?(s=this.nodes[e-1][t].value-this.scoreSet.gap,i=this.scoreSet.useEndGapBottom?this.nodes[e][t-1].value-this.scoreSet.endGap:this.nodes[e][t-1].value-this.scoreSet.gap):t==this.nodes[0].length-1?(s=this.scoreSet.useEndGapRight?this.nodes[e-1][t].value-this.scoreSet.endGap:this.nodes[e-1][t].value-this.scoreSet.gap,i=this.nodes[e][t-1].value-this.scoreSet.gap):(s=this.nodes[e-1][t].value-this.scoreSet.gap,i=this.nodes[e][t-1].value-this.scoreSet.gap),n=this.nodes[e-1][t-1].value+this.scoreSet.getScore(this.M[e-1],this.N[t-1]),s>=i&&s>=n?(this.nodes[e][t].value=s,this.nodes[e][t].tracebackI=e-1,this.nodes[e][t].tracebackJ=t):i>=n&&i>=s?(this.nodes[e][t].value=i,this.nodes[e][t].tracebackI=e,this.nodes[e][t].tracebackJ=t-1):(this.nodes[e][t].value=n,this.nodes[e][t].tracebackI=e-1,this.nodes[e][t].tracebackJ=t-1)}this.score=this.nodes[this.nodes.length-1][this.nodes[0].length-1].value}function align(){this.alignedM=new Array,this.alignedN=new Array;for(var e=this.nodes.length-1,t=this.nodes[0].length-1,s=this.nodes[this.nodes.length-1][this.nodes[0].length-1];null!=s.tracebackI&&null!=s.tracebackJ;)s.tracebackI==e-1&&s.tracebackJ==t-1?(this.alignedM.push(this.M.pop()),this.alignedN.push(this.N.pop())):s.tracebackJ==t-1?(this.alignedM.push("-"),this.alignedN.push(this.N.pop())):(this.alignedM.push(this.M.pop()),this.alignedN.push("-")),e=s.tracebackI,t=s.tracebackJ,s=this.nodes[s.tracebackI][s.tracebackJ];this.alignedM=this.alignedM.reverse(),this.alignedN=this.alignedN.reverse()}function getAlignedM(){return this.alignedM.join("")}function getAlignedN(){return this.alignedN.join("")}function AlignPairQuad(){this.M,this.N,this.scoreSet,this.nodes,this.alignedM,this.alignedN,this.score}new AlignPairQuad,AlignPairQuad.prototype.initializeMatrix=initializeMatrix,AlignPairQuad.prototype.fillMatrix=fillMatrix,AlignPairQuad.prototype.align=align,AlignPairQuad.prototype.getAlignedM=getAlignedM,AlignPairQuad.prototype.getAlignedN=getAlignedN,AlignPairQuad.prototype.dumpMatrix=dumpMatrix;
!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports):"function"==typeof define&&define.amd?define(["exports"],n):n(t.d3=t.d3||{})}(this,(function(t){"use strict";function n(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function e(t){var e;return 1===t.length&&(e=t,t=function(t,r){return n(e(t),r)}),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)<0?r=o+1:i=o}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)>0?i=o:r=o+1}return r}}}var r=e(n),i=r.right,o=r.left;function a(t,n){return[t,n]}function u(t){return null===t?NaN:+t}function f(t,n){var e,r,i=t.length,o=0,a=-1,f=0,c=0;if(null==n)for(;++a<i;)isNaN(e=u(t[a]))||(c+=(r=e-f)*(e-(f+=r/++o)));else for(;++a<i;)isNaN(e=u(n(t[a],a,t)))||(c+=(r=e-f)*(e-(f+=r/++o)));if(o>1)return c/(o-1)}function c(t,n){var e=f(t,n);return e?Math.sqrt(e):e}function s(t,n){var e,r,i,o=t.length,a=-1;if(null==n){for(;++a<o;)if(null!=(e=t[a])&&e>=e)for(r=i=e;++a<o;)null!=(e=t[a])&&(r>e&&(r=e),i<e&&(i=e))}else for(;++a<o;)if(null!=(e=n(t[a],a,t))&&e>=e)for(r=i=e;++a<o;)null!=(e=n(t[a],a,t))&&(r>e&&(r=e),i<e&&(i=e));return[r,i]}var l=Array.prototype,h=l.slice,d=l.map;function p(t){return function(){return t}}function v(t){return t}function g(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o}var y=Math.sqrt(50),_=Math.sqrt(10),b=Math.sqrt(2);function m(t,n,e){var r,i,o,a,u=-1;if(e=+e,(t=+t)===(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(a=x(t,n,e))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),n=Math.floor(n/a),o=new Array(i=Math.ceil(n-t+1));++u<i;)o[u]=(t+u)*a;else for(t=Math.floor(t*a),n=Math.ceil(n*a),o=new Array(i=Math.ceil(t-n+1));++u<i;)o[u]=(t-u)/a;return r&&o.reverse(),o}function x(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=y?10:o>=_?5:o>=b?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=y?10:o>=_?5:o>=b?2:1)}function w(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=y?i*=10:o>=_?i*=5:o>=b&&(i*=2),n<t?-i:i}function M(t){return Math.ceil(Math.log(t.length)/Math.LN2)+1}function A(t,n,e){if(null==e&&(e=u),r=t.length){if((n=+n)<=0||r<2)return+e(t[0],0,t);if(n>=1)return+e(t[r-1],r-1,t);var r,i=(r-1)*n,o=Math.floor(i),a=+e(t[o],o,t);return a+(+e(t[o+1],o+1,t)-a)*(i-o)}}function T(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&e>r&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&e>r&&(r=e);return r}function N(t){for(var n,e,r,i=t.length,o=-1,a=0;++o<i;)a+=t[o].length;for(e=new Array(a);--i>=0;)for(n=(r=t[i]).length;--n>=0;)e[--a]=r[n];return e}function S(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&r>e&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&r>e&&(r=e);return r}function E(t){if(!(i=t.length))return[];for(var n=-1,e=S(t,k),r=new Array(e);++n<e;)for(var i,o=-1,a=r[n]=new Array(i);++o<i;)a[o]=t[o][n];return r}function k(t){return t.length}var C=Array.prototype.slice;function P(t){return t}function z(t){return"translate("+(t+.5)+",0)"}function R(t){return"translate(0,"+(t+.5)+")"}function L(t){return function(n){return+t(n)}}function D(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}function U(){return!this.__axis}function q(t,n){var e=[],r=null,i=null,o=6,a=6,u=3,f=1===t||4===t?-1:1,c=4===t||2===t?"x":"y",s=1===t||3===t?z:R;function l(l){var h=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,d=null==i?n.tickFormat?n.tickFormat.apply(n,e):P:i,p=Math.max(o,0)+u,v=n.range(),g=+v[0]+.5,y=+v[v.length-1]+.5,_=(n.bandwidth?D:L)(n.copy()),b=l.selection?l.selection():l,m=b.selectAll(".domain").data([null]),x=b.selectAll(".tick").data(h,n).order(),w=x.exit(),M=x.enter().append("g").attr("class","tick"),A=x.select("line"),T=x.select("text");m=m.merge(m.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),x=x.merge(M),A=A.merge(M.append("line").attr("stroke","currentColor").attr(c+"2",f*o)),T=T.merge(M.append("text").attr("fill","currentColor").attr(c,f*p).attr("dy",1===t?"0em":3===t?"0.71em":"0.32em")),l!==b&&(m=m.transition(l),x=x.transition(l),A=A.transition(l),T=T.transition(l),w=w.transition(l).attr("opacity",1e-6).attr("transform",(function(t){return isFinite(t=_(t))?s(t):this.getAttribute("transform")})),M.attr("opacity",1e-6).attr("transform",(function(t){var n=this.parentNode.__axis;return s(n&&isFinite(n=n(t))?n:_(t))}))),w.remove(),m.attr("d",4===t||2==t?a?"M"+f*a+","+g+"H0.5V"+y+"H"+f*a:"M0.5,"+g+"V"+y:a?"M"+g+","+f*a+"V0.5H"+y+"V"+f*a:"M"+g+",0.5H"+y),x.attr("opacity",1).attr("transform",(function(t){return s(_(t))})),A.attr(c+"2",f*o),T.attr(c,f*p).text(d),b.filter(U).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===t?"start":4===t?"end":"middle"),b.each((function(){this.__axis=_}))}return l.scale=function(t){return arguments.length?(n=t,l):n},l.ticks=function(){return e=C.call(arguments),l},l.tickArguments=function(t){return arguments.length?(e=null==t?[]:C.call(t),l):e.slice()},l.tickValues=function(t){return arguments.length?(r=null==t?null:C.call(t),l):r&&r.slice()},l.tickFormat=function(t){return arguments.length?(i=t,l):i},l.tickSize=function(t){return arguments.length?(o=a=+t,l):o},l.tickSizeInner=function(t){return arguments.length?(o=+t,l):o},l.tickSizeOuter=function(t){return arguments.length?(a=+t,l):a},l.tickPadding=function(t){return arguments.length?(u=+t,l):u},l}var O={value:function(){}};function Y(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new B(r)}function B(t){this._=t}function F(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function I(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function H(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=O,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}B.prototype=Y.prototype={constructor:B,on:function(t,n){var e,r=this._,i=F(t+"",r),o=-1,a=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<a;)if(e=(t=i[o]).type)r[e]=H(r[e],t.name,n);else if(null==n)for(e in r)r[e]=H(r[e],t.name,null);return this}for(;++o<a;)if((e=(t=i[o]).type)&&(e=I(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new B(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var j="http://www.w3.org/1999/xhtml",X={svg:"http://www.w3.org/2000/svg",xhtml:j,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function G(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),X.hasOwnProperty(n)?{space:X[n],local:t}:t}function V(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===j&&n.documentElement.namespaceURI===j?n.createElement(t):n.createElementNS(e,t)}}function $(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function W(t){var n=G(t);return(n.local?$:V)(n)}function Z(){}function Q(t){return null==t?Z:function(){return this.querySelector(t)}}function J(){return[]}function K(t){return null==t?J:function(){return this.querySelectorAll(t)}}var tt=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var nt=document.documentElement;if(!nt.matches){var et=nt.webkitMatchesSelector||nt.msMatchesSelector||nt.mozMatchesSelector||nt.oMatchesSelector;tt=function(t){return function(){return et.call(this,t)}}}}var rt=tt;function it(t){return new Array(t.length)}function ot(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}ot.prototype={constructor:ot,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};function at(t,n,e,r,i,o){for(var a,u=0,f=n.length,c=o.length;u<c;++u)(a=n[u])?(a.__data__=o[u],r[u]=a):e[u]=new ot(t,o[u]);for(;u<f;++u)(a=n[u])&&(i[u]=a)}function ut(t,n,e,r,i,o,a){var u,f,c,s={},l=n.length,h=o.length,d=new Array(l);for(u=0;u<l;++u)(f=n[u])&&(d[u]=c="$"+a.call(f,f.__data__,u,n),c in s?i[u]=f:s[c]=f);for(u=0;u<h;++u)(f=s[c="$"+a.call(t,o[u],u,o)])?(r[u]=f,f.__data__=o[u],s[c]=null):e[u]=new ot(t,o[u]);for(u=0;u<l;++u)(f=n[u])&&s[d[u]]===f&&(i[u]=f)}function ft(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function ct(t){return function(){this.removeAttribute(t)}}function st(t){return function(){this.removeAttributeNS(t.space,t.local)}}function lt(t,n){return function(){this.setAttribute(t,n)}}function ht(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function dt(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function pt(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}function vt(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function gt(t){return function(){this.style.removeProperty(t)}}function yt(t,n,e){return function(){this.style.setProperty(t,n,e)}}function _t(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function bt(t,n){return t.style.getPropertyValue(n)||vt(t).getComputedStyle(t,null).getPropertyValue(n)}function mt(t){return function(){delete this[t]}}function xt(t,n){return function(){this[t]=n}}function wt(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function Mt(t){return t.trim().split(/^|\s+/)}function At(t){return t.classList||new Tt(t)}function Tt(t){this._node=t,this._names=Mt(t.getAttribute("class")||"")}function Nt(t,n){for(var e=At(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function St(t,n){for(var e=At(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function Et(t){return function(){Nt(this,t)}}function kt(t){return function(){St(this,t)}}function Ct(t,n){return function(){(n.apply(this,arguments)?Nt:St)(this,t)}}function Pt(){this.textContent=""}function zt(t){return function(){this.textContent=t}}function Rt(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function Lt(){this.innerHTML=""}function Dt(t){return function(){this.innerHTML=t}}function Ut(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function qt(){this.nextSibling&&this.parentNode.appendChild(this)}function Ot(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Yt(){return null}function Bt(){var t=this.parentNode;t&&t.removeChild(this)}function Ft(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function It(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}Tt.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var Ht={};(t.event=null,"undefined"!=typeof document)&&("onmouseenter"in document.documentElement||(Ht={mouseenter:"mouseover",mouseleave:"mouseout"}));function jt(t,n,e){return t=Xt(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function Xt(n,e,r){return function(i){var o=t.event;t.event=i;try{n.call(this,this.__data__,e,r)}finally{t.event=o}}}function Gt(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function Vt(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function $t(t,n,e){var r=Ht.hasOwnProperty(t.type)?jt:Xt;return function(i,o,a){var u,f=this.__on,c=r(n,o,a);if(f)for(var s=0,l=f.length;s<l;++s)if((u=f[s]).type===t.type&&u.name===t.name)return this.removeEventListener(u.type,u.listener,u.capture),this.addEventListener(u.type,u.listener=c,u.capture=e),void(u.value=n);this.addEventListener(t.type,c,e),u={type:t.type,name:t.name,value:n,listener:c,capture:e},f?f.push(u):this.__on=[u]}}function Wt(n,e,r,i){var o=t.event;n.sourceEvent=t.event,t.event=n;try{return e.apply(r,i)}finally{t.event=o}}function Zt(t,n,e){var r=vt(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function Qt(t,n){return function(){return Zt(this,t,n)}}function Jt(t,n){return function(){return Zt(this,t,n.apply(this,arguments))}}var Kt=[null];function tn(t,n){this._groups=t,this._parents=n}function nn(){return new tn([[document.documentElement]],Kt)}function en(t){return"string"==typeof t?new tn([[document.querySelector(t)]],[document.documentElement]):new tn([[t]],Kt)}tn.prototype=nn.prototype={constructor:tn,select:function(t){"function"!=typeof t&&(t=Q(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a,u=n[i],f=u.length,c=r[i]=new Array(f),s=0;s<f;++s)(o=u[s])&&(a=t.call(o,o.__data__,s,u))&&("__data__"in o&&(a.__data__=o.__data__),c[s]=a);return new tn(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=K(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var a,u=n[o],f=u.length,c=0;c<f;++c)(a=u[c])&&(r.push(t.call(a,a.__data__,c,u)),i.push(a));return new tn(r,i)},filter:function(t){"function"!=typeof t&&(t=rt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,f=r[i]=[],c=0;c<u;++c)(o=a[c])&&t.call(o,o.__data__,c,a)&&f.push(o);return new tn(r,this._parents)},data:function(t,n){if(!t)return d=new Array(this.size()),c=-1,this.each((function(t){d[++c]=t})),d;var e=n?ut:at,r=this._parents,i=this._groups;"function"!=typeof t&&(t=function(t){return function(){return t}}(t));for(var o=i.length,a=new Array(o),u=new Array(o),f=new Array(o),c=0;c<o;++c){var s=r[c],l=i[c],h=l.length,d=t.call(s,s&&s.__data__,c,r),p=d.length,v=u[c]=new Array(p),g=a[c]=new Array(p);e(s,l,v,g,f[c]=new Array(h),d,n);for(var y,_,b=0,m=0;b<p;++b)if(y=v[b]){for(b>=m&&(m=b+1);!(_=g[m])&&++m<p;);y._next=_||null}}return(a=new tn(a,r))._enter=u,a._exit=f,a},enter:function(){return new tn(this._enter||this._groups.map(it),this._parents)},exit:function(){return new tn(this._exit||this._groups.map(it),this._parents)},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var f,c=n[u],s=e[u],l=c.length,h=a[u]=new Array(l),d=0;d<l;++d)(f=c[d]||s[d])&&(h[d]=f);for(;u<r;++u)a[u]=n[u];return new tn(a,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&a!==r.nextSibling&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=ft);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var a,u=e[o],f=u.length,c=i[o]=new Array(f),s=0;s<f;++s)(a=u[s])&&(c[s]=a);c.sort(n)}return new tn(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each((function(){t[++n]=this})),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],a=0,u=o.length;a<u;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,n){var e=G(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?st:ct:"function"==typeof n?e.local?pt:dt:e.local?ht:lt)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?gt:"function"==typeof n?_t:yt)(t,n,null==e?"":e)):bt(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?mt:"function"==typeof n?wt:xt)(t,n)):this.node()[t]},classed:function(t,n){var e=Mt(t+"");if(arguments.length<2){for(var r=At(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?Ct:n?Et:kt)(e,n))},text:function(t){return arguments.length?this.each(null==t?Pt:("function"==typeof t?Rt:zt)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Lt:("function"==typeof t?Ut:Dt)(t)):this.node().innerHTML},raise:function(){return this.each(qt)},lower:function(){return this.each(Ot)},append:function(t){var n="function"==typeof t?t:W(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:W(t),r=null==n?Yt:"function"==typeof n?n:Q(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(Bt)},clone:function(t){return this.select(t?It:Ft)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=Gt(t+""),a=o.length;if(!(arguments.length<2)){for(u=n?$t:Vt,null==e&&(e=!1),r=0;r<a;++r)this.each(u(o[r],n,e));return this}var u=this.node().__on;if(u)for(var f,c=0,s=u.length;c<s;++c)for(r=0,f=u[c];r<a;++r)if((i=o[r]).type===f.type&&i.name===f.name)return f.value},dispatch:function(t,n){return this.each(("function"==typeof n?Jt:Qt)(t,n))}};var rn=0;function on(){return new an}function an(){this._="@"+(++rn).toString(36)}function un(){for(var n,e=t.event;n=e.sourceEvent;)e=n;return e}function fn(t,n){var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=n.clientX,r.y=n.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[n.clientX-i.left-t.clientLeft,n.clientY-i.top-t.clientTop]}function cn(t){var n=un();return n.changedTouches&&(n=n.changedTouches[0]),fn(t,n)}function sn(t,n,e){arguments.length<3&&(e=n,n=un().changedTouches);for(var r,i=0,o=n?n.length:0;i<o;++i)if((r=n[i]).identifier===e)return fn(t,r);return null}function ln(){t.event.stopImmediatePropagation()}function hn(){t.event.preventDefault(),t.event.stopImmediatePropagation()}function dn(t){var n=t.document.documentElement,e=en(t).on("dragstart.drag",hn,!0);"onselectstart"in n?e.on("selectstart.drag",hn,!0):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")}function pn(t,n){var e=t.document.documentElement,r=en(t).on("dragstart.drag",null);n&&(r.on("click.drag",hn,!0),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}function vn(t){return function(){return t}}function gn(t,n,e,r,i,o,a,u,f,c){this.target=t,this.type=n,this.subject=e,this.identifier=r,this.active=i,this.x=o,this.y=a,this.dx=u,this.dy=f,this._=c}function yn(){return!t.event.button}function _n(){return this.parentNode}function bn(n){return null==n?{x:t.event.x,y:t.event.y}:n}function mn(){return"ontouchstart"in this}function xn(t,n,e){t.prototype=n.prototype=e,e.constructor=t}function wn(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function Mn(){}an.prototype=on.prototype={constructor:an,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}},gn.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var An="\\s*([+-]?\\d+)\\s*",Tn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Nn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Sn=/^#([0-9a-f]{3})$/,En=/^#([0-9a-f]{6})$/,kn=new RegExp("^rgb\\("+[An,An,An]+"\\)$"),Cn=new RegExp("^rgb\\("+[Nn,Nn,Nn]+"\\)$"),Pn=new RegExp("^rgba\\("+[An,An,An,Tn]+"\\)$"),zn=new RegExp("^rgba\\("+[Nn,Nn,Nn,Tn]+"\\)$"),Rn=new RegExp("^hsl\\("+[Tn,Nn,Nn]+"\\)$"),Ln=new RegExp("^hsla\\("+[Tn,Nn,Nn,Tn]+"\\)$"),Dn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Un(t){var n;return t=(t+"").trim().toLowerCase(),(n=Sn.exec(t))?new Fn((n=parseInt(n[1],16))>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):(n=En.exec(t))?qn(parseInt(n[1],16)):(n=kn.exec(t))?new Fn(n[1],n[2],n[3],1):(n=Cn.exec(t))?new Fn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=Pn.exec(t))?On(n[1],n[2],n[3],n[4]):(n=zn.exec(t))?On(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=Rn.exec(t))?Hn(n[1],n[2]/100,n[3]/100,1):(n=Ln.exec(t))?Hn(n[1],n[2]/100,n[3]/100,n[4]):Dn.hasOwnProperty(t)?qn(Dn[t]):"transparent"===t?new Fn(NaN,NaN,NaN,0):null}function qn(t){return new Fn(t>>16&255,t>>8&255,255&t,1)}function On(t,n,e,r){return r<=0&&(t=n=e=NaN),new Fn(t,n,e,r)}function Yn(t){return t instanceof Mn||(t=Un(t)),t?new Fn((t=t.rgb()).r,t.g,t.b,t.opacity):new Fn}function Bn(t,n,e,r){return 1===arguments.length?Yn(t):new Fn(t,n,e,null==r?1:r)}function Fn(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function In(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Hn(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new Gn(t,n,e,r)}function jn(t){if(t instanceof Gn)return new Gn(t.h,t.s,t.l,t.opacity);if(t instanceof Mn||(t=Un(t)),!t)return new Gn;if(t instanceof Gn)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),a=NaN,u=o-i,f=(o+i)/2;return u?(a=n===o?(e-r)/u+6*(e<r):e===o?(r-n)/u+2:(n-e)/u+4,u/=f<.5?o+i:2-o-i,a*=60):u=f>0&&f<1?0:a,new Gn(a,u,f,t.opacity)}function Xn(t,n,e,r){return 1===arguments.length?jn(t):new Gn(t,n,e,null==r?1:r)}function Gn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Vn(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}xn(Mn,Un,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),xn(Fn,Bn,wn(Mn,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Fn(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Fn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+In(this.r)+In(this.g)+In(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),xn(Gn,Xn,wn(Mn,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Gn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Gn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new Fn(Vn(t>=240?t-240:t+120,i,r),Vn(t,i,r),Vn(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var $n=Math.PI/180,Wn=180/Math.PI,Zn=6/29,Qn=3*Zn*Zn;function Jn(t){if(t instanceof te)return new te(t.l,t.a,t.b,t.opacity);if(t instanceof ue){if(isNaN(t.h))return new te(t.l,0,0,t.opacity);var n=t.h*$n;return new te(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}t instanceof Fn||(t=Yn(t));var e,r,i=ie(t.r),o=ie(t.g),a=ie(t.b),u=ne((.2225045*i+.7168786*o+.0606169*a)/1);return i===o&&o===a?e=r=u:(e=ne((.4360747*i+.3850649*o+.1430804*a)/.96422),r=ne((.0139322*i+.0971045*o+.7141733*a)/.82521)),new te(116*u-16,500*(e-u),200*(u-r),t.opacity)}function Kn(t,n,e,r){return 1===arguments.length?Jn(t):new te(t,n,e,null==r?1:r)}function te(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function ne(t){return t>.008856451679035631?Math.pow(t,1/3):t/Qn+4/29}function ee(t){return t>Zn?t*t*t:Qn*(t-4/29)}function re(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function ie(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function oe(t){if(t instanceof ue)return new ue(t.h,t.c,t.l,t.opacity);if(t instanceof te||(t=Jn(t)),0===t.a&&0===t.b)return new ue(NaN,0,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*Wn;return new ue(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function ae(t,n,e,r){return 1===arguments.length?oe(t):new ue(t,n,e,null==r?1:r)}function ue(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}xn(te,Kn,wn(Mn,{brighter:function(t){return new te(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new te(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new Fn(re(3.1338561*(n=.96422*ee(n))-1.6168667*(t=1*ee(t))-.4906146*(e=.82521*ee(e))),re(-.9787684*n+1.9161415*t+.033454*e),re(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),xn(ue,ae,wn(Mn,{brighter:function(t){return new ue(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new ue(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return Jn(this).rgb()}}));var fe=-.14861,ce=1.78277,se=-.29227,le=-.90649,he=1.97294,de=he*le,pe=he*ce,ve=ce*se-le*fe;function ge(t){if(t instanceof _e)return new _e(t.h,t.s,t.l,t.opacity);t instanceof Fn||(t=Yn(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(ve*r+de*n-pe*e)/(ve+de-pe),o=r-i,a=(he*(e-i)-se*o)/le,u=Math.sqrt(a*a+o*o)/(he*i*(1-i)),f=u?Math.atan2(a,o)*Wn-120:NaN;return new _e(f<0?f+360:f,u,i,t.opacity)}function ye(t,n,e,r){return 1===arguments.length?ge(t):new _e(t,n,e,null==r?1:r)}function _e(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function be(t,n,e,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*n+(4-6*o+3*a)*e+(1+3*t+3*o-3*a)*r+a*i)/6}function me(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,u=r<n-1?t[r+2]:2*o-i;return be((e-r/n)*n,a,i,o,u)}}function xe(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],a=t[(r+1)%n],u=t[(r+2)%n];return be((e-r/n)*n,i,o,a,u)}}function we(t){return function(){return t}}function Me(t,n){return function(e){return t+e*n}}function Ae(t,n){var e=n-t;return e?Me(t,e>180||e<-180?e-360*Math.round(e/360):e):we(isNaN(t)?n:t)}function Te(t){return 1==(t=+t)?Ne:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):we(isNaN(n)?e:n)}}function Ne(t,n){var e=n-t;return e?Me(t,e):we(isNaN(t)?n:t)}xn(_e,ye,wn(Mn,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new _e(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new _e(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*$n,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new Fn(255*(n+e*(fe*r+ce*i)),255*(n+e*(se*r+le*i)),255*(n+e*(he*r)),this.opacity)}}));var Se=function t(n){var e=Te(n);function r(t,n){var r=e((t=Bn(t)).r,(n=Bn(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),a=Ne(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=a(n),t+""}}return r.gamma=t,r}(1);function Ee(t){return function(n){var e,r,i=n.length,o=new Array(i),a=new Array(i),u=new Array(i);for(e=0;e<i;++e)r=Bn(n[e]),o[e]=r.r||0,a[e]=r.g||0,u[e]=r.b||0;return o=t(o),a=t(a),u=t(u),r.opacity=1,function(t){return r.r=o(t),r.g=a(t),r.b=u(t),r+""}}}var ke=Ee(me),Ce=Ee(xe);function Pe(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(e=0;e<i;++e)o[e]=Oe(t[e],n[e]);for(;e<r;++e)a[e]=n[e];return function(t){for(e=0;e<i;++e)a[e]=o[e](t);return a}}function ze(t,n){var e=new Date;return n-=t=+t,function(r){return e.setTime(t+n*r),e}}function Re(t,n){return n-=t=+t,function(e){return t+n*e}}function Le(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=Oe(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}}var De=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Ue=new RegExp(De.source,"g");function qe(t,n){var e,r,i,o=De.lastIndex=Ue.lastIndex=0,a=-1,u=[],f=[];for(t+="",n+="";(e=De.exec(t))&&(r=Ue.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),u[a]?u[a]+=i:u[++a]=i),(e=e[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,f.push({i:a,x:Re(e,r)})),o=Ue.lastIndex;return o<n.length&&(i=n.slice(o),u[a]?u[a]+=i:u[++a]=i),u.length<2?f[0]?function(t){return function(n){return t(n)+""}}(f[0].x):function(t){return function(){return t}}(n):(n=f.length,function(t){for(var e,r=0;r<n;++r)u[(e=f[r]).i]=e.x(t);return u.join("")})}function Oe(t,n){var e,r=typeof n;return null==n||"boolean"===r?we(n):("number"===r?Re:"string"===r?(e=Un(n))?(n=e,Se):qe:n instanceof Un?Se:n instanceof Date?ze:Array.isArray(n)?Pe:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?Le:Re)(t,n)}function Ye(t,n){return n-=t=+t,function(e){return Math.round(t+n*e)}}var Be,Fe,Ie,He,je=180/Math.PI,Xe={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Ge(t,n,e,r,i,o){var a,u,f;return(a=Math.sqrt(t*t+n*n))&&(t/=a,n/=a),(f=t*e+n*r)&&(e-=t*f,r-=n*f),(u=Math.sqrt(e*e+r*r))&&(e/=u,r/=u,f/=u),t*r<n*e&&(t=-t,n=-n,f=-f,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*je,skewX:Math.atan(f)*je,scaleX:a,scaleY:u}}function Ve(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var u=[],f=[];return o=t(o),a=t(a),function(t,r,i,o,a,u){if(t!==i||r!==o){var f=a.push("translate(",null,n,null,e);u.push({i:f-4,x:Re(t,i)},{i:f-2,x:Re(r,o)})}else(i||o)&&a.push("translate("+i+n+o+e)}(o.translateX,o.translateY,a.translateX,a.translateY,u,f),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:Re(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,a.rotate,u,f),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:Re(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,a.skewX,u,f),function(t,n,e,r,o,a){if(t!==e||n!==r){var u=o.push(i(o)+"scale(",null,",",null,")");a.push({i:u-4,x:Re(t,e)},{i:u-2,x:Re(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,u,f),o=a=null,function(t){for(var n,e=-1,r=f.length;++e<r;)u[(n=f[e]).i]=n.x(t);return u.join("")}}}var $e=Ve((function(t){return"none"===t?Xe:(Be||(Be=document.createElement("DIV"),Fe=document.documentElement,Ie=document.defaultView),Be.style.transform=t,t=Ie.getComputedStyle(Fe.appendChild(Be),null).getPropertyValue("transform"),Fe.removeChild(Be),Ge(+(t=t.slice(7,-1).split(","))[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),We=Ve((function(t){return null==t?Xe:(He||(He=document.createElementNS("http://www.w3.org/2000/svg","g")),He.setAttribute("transform",t),(t=He.transform.baseVal.consolidate())?Ge((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):Xe)}),", ",")",")"),Ze=Math.SQRT2;function Qe(t){return((t=Math.exp(t))+1/t)/2}function Je(t,n){var e,r,i=t[0],o=t[1],a=t[2],u=n[0],f=n[1],c=n[2],s=u-i,l=f-o,h=s*s+l*l;if(h<1e-12)r=Math.log(c/a)/Ze,e=function(t){return[i+t*s,o+t*l,a*Math.exp(Ze*t*r)]};else{var d=Math.sqrt(h),p=(c*c-a*a+4*h)/(2*a*2*d),v=(c*c-a*a-4*h)/(2*c*2*d),g=Math.log(Math.sqrt(p*p+1)-p),y=Math.log(Math.sqrt(v*v+1)-v);r=(y-g)/Ze,e=function(t){var n=t*r,e=Qe(g),u=a/(2*d)*(e*function(t){return((t=Math.exp(2*t))-1)/(t+1)}(Ze*n+g)-function(t){return((t=Math.exp(t))-1/t)/2}(g));return[i+u*s,o+u*l,a*e/Qe(Ze*n+g)]}}return e.duration=1e3*r,e}function Ke(t){return function(n,e){var r=t((n=Xn(n)).h,(e=Xn(e)).h),i=Ne(n.s,e.s),o=Ne(n.l,e.l),a=Ne(n.opacity,e.opacity);return function(t){return n.h=r(t),n.s=i(t),n.l=o(t),n.opacity=a(t),n+""}}}var tr=Ke(Ae),nr=Ke(Ne);function er(t){return function(n,e){var r=t((n=ae(n)).h,(e=ae(e)).h),i=Ne(n.c,e.c),o=Ne(n.l,e.l),a=Ne(n.opacity,e.opacity);return function(t){return n.h=r(t),n.c=i(t),n.l=o(t),n.opacity=a(t),n+""}}}var rr=er(Ae),ir=er(Ne);function or(t){return function n(e){function r(n,r){var i=t((n=ye(n)).h,(r=ye(r)).h),o=Ne(n.s,r.s),a=Ne(n.l,r.l),u=Ne(n.opacity,r.opacity);return function(t){return n.h=i(t),n.s=o(t),n.l=a(Math.pow(t,e)),n.opacity=u(t),n+""}}return e=+e,r.gamma=n,r}(1)}var ar=or(Ae),ur=or(Ne);var fr,cr,sr=0,lr=0,hr=0,dr=0,pr=0,vr=0,gr="object"==typeof performance&&performance.now?performance:Date,yr="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function _r(){return pr||(yr(br),pr=gr.now()+vr)}function br(){pr=0}function mr(){this._call=this._time=this._next=null}function xr(t,n,e){var r=new mr;return r.restart(t,n,e),r}function wr(){_r(),++sr;for(var t,n=fr;n;)(t=pr-n._time)>=0&&n._call.call(null,t),n=n._next;--sr}function Mr(){pr=(dr=gr.now())+vr,sr=lr=0;try{wr()}finally{sr=0,function(){var t,n,e=fr,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:fr=n);cr=t,Tr(r)}(),pr=0}}function Ar(){var t=gr.now(),n=t-dr;n>1e3&&(vr-=n,dr=t)}function Tr(t){sr||(lr&&(lr=clearTimeout(lr)),t-pr>24?(t<1/0&&(lr=setTimeout(Mr,t-gr.now()-vr)),hr&&(hr=clearInterval(hr))):(hr||(dr=gr.now(),hr=setInterval(Ar,1e3)),sr=1,yr(Mr)))}function Nr(t,n,e){var r=new mr;return n=null==n?0:+n,r.restart((function(e){r.stop(),t(e+n)}),n,e),r}mr.prototype=xr.prototype={constructor:mr,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?_r():+e)+(null==n?0:+n),this._next||cr===this||(cr?cr._next=this:fr=this,cr=this),this._call=t,this._time=e,Tr()},stop:function(){this._call&&(this._call=null,this._time=1/0,Tr())}};var Sr=Y("start","end","interrupt"),Er=[];function kr(t,n,e,r,i,o){var a=t.__transition;if(a){if(e in a)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(f){var c,s,l,h;if(1!==e.state)return u();for(c in i)if((h=i[c]).name===e.name){if(3===h.state)return Nr(o);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[c]):+c<n&&(h.state=6,h.timer.stop(),delete i[c])}if(Nr((function(){3===e.state&&(e.state=4,e.timer.restart(a,e.delay,e.time),a(f))})),e.state=2,e.on.call("start",t,t.__data__,e.index,e.group),2===e.state){for(e.state=3,r=new Array(l=e.tween.length),c=0,s=-1;c<l;++c)(h=e.tween[c].value.call(t,t.__data__,e.index,e.group))&&(r[++s]=h);r.length=s+1}}function a(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(u),e.state=5,1),o=-1,a=r.length;++o<a;)r[o].call(null,i);5===e.state&&(e.on.call("end",t,t.__data__,e.index,e.group),u())}function u(){for(var r in e.state=6,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=xr((function(t){e.state=1,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:Sr,tween:Er,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})}function Cr(t,n){var e=zr(t,n);if(e.state>0)throw new Error("too late; already scheduled");return e}function Pr(t,n){var e=zr(t,n);if(e.state>2)throw new Error("too late; already started");return e}function zr(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}function Rr(t,n){var e,r,i,o=t.__transition,a=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>2&&e.state<5,e.state=6,e.timer.stop(),r&&e.on.call("interrupt",t,t.__data__,e.index,e.group),delete o[i]):a=!1;a&&delete t.__transition}}function Lr(t,n){var e,r;return function(){var i=Pr(this,t),o=i.tween;if(o!==e)for(var a=0,u=(r=e=o).length;a<u;++a)if(r[a].name===n){(r=r.slice()).splice(a,1);break}i.tween=r}}function Dr(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=Pr(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var u={name:n,value:e},f=0,c=i.length;f<c;++f)if(i[f].name===n){i[f]=u;break}f===c&&i.push(u)}o.tween=i}}function Ur(t,n,e){var r=t._id;return t.each((function(){var t=Pr(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return zr(t,r).value[n]}}function qr(t,n){var e;return("number"==typeof n?Re:n instanceof Un?Se:(e=Un(n))?(n=e,Se):qe)(t,n)}function Or(t){return function(){this.removeAttribute(t)}}function Yr(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Br(t,n,e){var r,i;return function(){var o=this.getAttribute(t);return o===e?null:o===r?i:i=n(r=o,e)}}function Fr(t,n,e){var r,i;return function(){var o=this.getAttributeNS(t.space,t.local);return o===e?null:o===r?i:i=n(r=o,e)}}function Ir(t,n,e){var r,i,o;return function(){var a,u=e(this);if(null!=u)return(a=this.getAttribute(t))===u?null:a===r&&u===i?o:o=n(r=a,i=u);this.removeAttribute(t)}}function Hr(t,n,e){var r,i,o;return function(){var a,u=e(this);if(null!=u)return(a=this.getAttributeNS(t.space,t.local))===u?null:a===r&&u===i?o:o=n(r=a,i=u);this.removeAttributeNS(t.space,t.local)}}function jr(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttributeNS(t.space,t.local,r(n))}}return e._value=n,e}function Xr(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttribute(t,r(n))}}return e._value=n,e}function Gr(t,n){return function(){Cr(this,t).delay=+n.apply(this,arguments)}}function Vr(t,n){return n=+n,function(){Cr(this,t).delay=n}}function $r(t,n){return function(){Pr(this,t).duration=+n.apply(this,arguments)}}function Wr(t,n){return n=+n,function(){Pr(this,t).duration=n}}function Zr(t,n){if("function"!=typeof n)throw new Error;return function(){Pr(this,t).ease=n}}function Qr(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?Cr:Pr;return function(){var a=o(this,t),u=a.on;u!==r&&(i=(r=u).copy()).on(n,e),a.on=i}}var Jr=nn.prototype.constructor;function Kr(t,n,e){function r(){var r=this,i=n.apply(r,arguments);return i&&function(n){r.style.setProperty(t,i(n),e)}}return r._value=n,r}var ti=0;function ni(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function ei(t){return nn().transition(t)}function ri(){return++ti}var ii=nn.prototype;function oi(t){return((t*=2)<=1?t*t:--t*(2-t)+1)/2}function ai(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}ni.prototype=ei.prototype={constructor:ni,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=Q(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var u,f,c=r[a],s=c.length,l=o[a]=new Array(s),h=0;h<s;++h)(u=c[h])&&(f=t.call(u,u.__data__,h,c))&&("__data__"in u&&(f.__data__=u.__data__),l[h]=f,kr(l[h],n,e,h,l,zr(u,e)));return new ni(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=K(t));for(var r=this._groups,i=r.length,o=[],a=[],u=0;u<i;++u)for(var f,c=r[u],s=c.length,l=0;l<s;++l)if(f=c[l]){for(var h,d=t.call(f,f.__data__,l,c),p=zr(f,e),v=0,g=d.length;v<g;++v)(h=d[v])&&kr(h,n,e,v,d,p);o.push(d),a.push(f)}return new ni(o,a,n,e)},filter:function(t){"function"!=typeof t&&(t=rt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,f=r[i]=[],c=0;c<u;++c)(o=a[c])&&t.call(o,o.__data__,c,a)&&f.push(o);return new ni(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var f,c=n[u],s=e[u],l=c.length,h=a[u]=new Array(l),d=0;d<l;++d)(f=c[d]||s[d])&&(h[d]=f);for(;u<r;++u)a[u]=n[u];return new ni(a,this._parents,this._name,this._id)},selection:function(){return new Jr(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=ri(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],f=u.length,c=0;c<f;++c)if(a=u[c]){var s=zr(a,n);kr(a,t,e,c,u,{time:s.time+s.delay+s.duration,delay:0,duration:s.duration,ease:s.ease})}return new ni(r,this._parents,t,e)},call:ii.call,nodes:ii.nodes,node:ii.node,size:ii.size,empty:ii.empty,each:ii.each,on:function(t,n){var e=this._id;return arguments.length<2?zr(this.node(),e).on.on(t):this.each(Qr(e,t,n))},attr:function(t,n){var e=G(t),r="transform"===e?We:qr;return this.attrTween(t,"function"==typeof n?(e.local?Hr:Ir)(e,r,Ur(this,"attr."+t,n)):null==n?(e.local?Yr:Or)(e):(e.local?Fr:Br)(e,r,n+""))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=G(t);return this.tween(e,(r.local?jr:Xr)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?$e:qr;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=bt(this,t),a=(this.style.removeProperty(t),bt(this,t));return o===a?null:o===e&&a===r?i:i=n(e=o,r=a)}}(t,r)).on("end.style."+t,function(t){return function(){this.style.removeProperty(t)}}(t)):this.styleTween(t,"function"==typeof n?function(t,n,e){var r,i,o;return function(){var a=bt(this,t),u=e(this);return null==u&&(this.style.removeProperty(t),u=bt(this,t)),a===u?null:a===r&&u===i?o:o=n(r=a,i=u)}}(t,r,Ur(this,"style."+t,n)):function(t,n,e){var r,i;return function(){var o=bt(this,t);return o===e?null:o===r?i:i=n(r=o,e)}}(t,r,n+""),e)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,Kr(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(Ur(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",function(t){return function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}}(this._id))},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=zr(this.node(),e).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?Lr:Dr)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Gr:Vr)(n,t)):zr(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?$r:Wr)(n,t)):zr(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(Zr(n,t)):zr(this.node(),n).ease}};var ui=function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e}(3),fi=function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),ci=function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),si=Math.PI,li=si/2;function hi(t){return(1-Math.cos(si*t))/2}function di(t){return((t*=2)<=1?Math.pow(2,10*t-10):2-Math.pow(2,10-10*t))/2}function pi(t){return((t*=2)<=1?1-Math.sqrt(1-t*t):Math.sqrt(1-(t-=2)*t)+1)/2}var vi=7.5625;function gi(t){return(t=+t)<4/11?vi*t*t:t<8/11?vi*(t-=6/11)*t+3/4:t<10/11?vi*(t-=9/11)*t+15/16:vi*(t-=21/22)*t+63/64}var yi=function t(n){function e(t){return t*t*((n+1)*t-n)}return n=+n,e.overshoot=t,e}(1.70158),_i=function t(n){function e(t){return--t*t*((n+1)*t+n)+1}return n=+n,e.overshoot=t,e}(1.70158),bi=function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(1.70158),mi=2*Math.PI,xi=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=mi);function i(t){return n*Math.pow(2,10*--t)*Math.sin((r-t)/e)}return i.amplitude=function(n){return t(n,e*mi)},i.period=function(e){return t(n,e)},i}(1,.3),wi=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=mi);function i(t){return 1-n*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/e)}return i.amplitude=function(n){return t(n,e*mi)},i.period=function(e){return t(n,e)},i}(1,.3),Mi=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=mi);function i(t){return((t=2*t-1)<0?n*Math.pow(2,10*t)*Math.sin((r-t)/e):2-n*Math.pow(2,-10*t)*Math.sin((r+t)/e))/2}return i.amplitude=function(n){return t(n,e*mi)},i.period=function(e){return t(n,e)},i}(1,.3),Ai={time:null,delay:0,duration:250,ease:ai};function Ti(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return Ai.time=_r(),Ai;return e}nn.prototype.interrupt=function(t){return this.each((function(){Rr(this,t)}))},nn.prototype.transition=function(t){var n,e;t instanceof ni?(n=t._id,t=t._name):(n=ri(),(e=Ai).time=_r(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],f=u.length,c=0;c<f;++c)(a=u[c])&&kr(a,t,n,c,u,e||Ti(a,n));return new ni(r,this._parents,t,n)};var Ni=[null];function Si(t){return function(){return t}}function Ei(t,n,e){this.target=t,this.type=n,this.selection=e}function ki(){t.event.stopImmediatePropagation()}function Ci(){t.event.preventDefault(),t.event.stopImmediatePropagation()}var Pi={name:"drag"},zi={name:"space"},Ri={name:"handle"},Li={name:"center"},Di={name:"x",handles:["e","w"].map(Hi),input:function(t,n){return t&&[[t[0],n[0][1]],[t[1],n[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},Ui={name:"y",handles:["n","s"].map(Hi),input:function(t,n){return t&&[[n[0][0],t[0]],[n[1][0],t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},qi={name:"xy",handles:["n","e","s","w","nw","ne","se","sw"].map(Hi),input:function(t){return t},output:function(t){return t}},Oi={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Yi={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},Bi={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},Fi={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},Ii={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function Hi(t){return{type:t}}function ji(){return!t.event.button}function Xi(){var t=this.ownerSVGElement||this;return[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function Gi(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function Vi(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function $i(n){var e,r=Xi,i=ji,o=Y(u,"start","brush","end"),a=6;function u(t){var e=t.property("__brush",h).selectAll(".overlay").data([Hi("overlay")]);e.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",Oi.overlay).merge(e).each((function(){var t=Gi(this).extent;en(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])})),t.selectAll(".selection").data([Hi("selection")]).enter().append("rect").attr("class","selection").attr("cursor",Oi.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=t.selectAll(".handle").data(n.handles,(function(t){return t.type}));r.exit().remove(),r.enter().append("rect").attr("class",(function(t){return"handle handle--"+t.type})).attr("cursor",(function(t){return Oi[t.type]})),t.each(f).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",l)}function f(){var t=en(this),n=Gi(this).selection;n?(t.selectAll(".selection").style("display",null).attr("x",n[0][0]).attr("y",n[0][1]).attr("width",n[1][0]-n[0][0]).attr("height",n[1][1]-n[0][1]),t.selectAll(".handle").style("display",null).attr("x",(function(t){return"e"===t.type[t.type.length-1]?n[1][0]-a/2:n[0][0]-a/2})).attr("y",(function(t){return"s"===t.type[0]?n[1][1]-a/2:n[0][1]-a/2})).attr("width",(function(t){return"n"===t.type||"s"===t.type?n[1][0]-n[0][0]+a:a})).attr("height",(function(t){return"e"===t.type||"w"===t.type?n[1][1]-n[0][1]+a:a}))):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function c(t,n){return t.__brush.emitter||new s(t,n)}function s(t,n){this.that=t,this.args=n,this.state=t.__brush,this.active=0}function l(){if(t.event.touches){if(t.event.changedTouches.length<t.event.touches.length)return Ci()}else if(e)return;if(i.apply(this,arguments)){var r,o,a,u,s,l,h,d,p,v,g,y,_,b=this,m=t.event.target.__data__.type,x="selection"===(t.event.metaKey?m="overlay":m)?Pi:t.event.altKey?Li:Ri,w=n===Ui?null:Fi[m],M=n===Di?null:Ii[m],A=Gi(b),T=A.extent,N=A.selection,S=T[0][0],E=T[0][1],k=T[1][0],C=T[1][1],P=w&&M&&t.event.shiftKey,z=cn(b),R=z,L=c(b,arguments).beforestart();"overlay"===m?A.selection=N=[[r=n===Ui?S:z[0],a=n===Di?E:z[1]],[s=n===Ui?k:r,h=n===Di?C:a]]:(r=N[0][0],a=N[0][1],s=N[1][0],h=N[1][1]),o=r,u=a,l=s,d=h;var D=en(b).attr("pointer-events","none"),U=D.selectAll(".overlay").attr("cursor",Oi[m]);if(t.event.touches)D.on("touchmove.brush",O,!0).on("touchend.brush touchcancel.brush",B,!0);else{var q=en(t.event.view).on("keydown.brush",F,!0).on("keyup.brush",I,!0).on("mousemove.brush",O,!0).on("mouseup.brush",B,!0);dn(t.event.view)}ki(),Rr(b),f.call(b),L.start()}function O(){var t=cn(b);!P||y||_||(Math.abs(t[0]-R[0])>Math.abs(t[1]-R[1])?_=!0:y=!0),R=t,g=!0,Ci(),Y()}function Y(){var t;switch(p=R[0]-z[0],v=R[1]-z[1],x){case zi:case Pi:w&&(p=Math.max(S-r,Math.min(k-s,p)),o=r+p,l=s+p),M&&(v=Math.max(E-a,Math.min(C-h,v)),u=a+v,d=h+v);break;case Ri:w<0?(p=Math.max(S-r,Math.min(k-r,p)),o=r+p,l=s):w>0&&(p=Math.max(S-s,Math.min(k-s,p)),o=r,l=s+p),M<0?(v=Math.max(E-a,Math.min(C-a,v)),u=a+v,d=h):M>0&&(v=Math.max(E-h,Math.min(C-h,v)),u=a,d=h+v);break;case Li:w&&(o=Math.max(S,Math.min(k,r-p*w)),l=Math.max(S,Math.min(k,s+p*w))),M&&(u=Math.max(E,Math.min(C,a-v*M)),d=Math.max(E,Math.min(C,h+v*M)))}l<o&&(w*=-1,t=r,r=s,s=t,t=o,o=l,l=t,m in Yi&&U.attr("cursor",Oi[m=Yi[m]])),d<u&&(M*=-1,t=a,a=h,h=t,t=u,u=d,d=t,m in Bi&&U.attr("cursor",Oi[m=Bi[m]])),A.selection&&(N=A.selection),y&&(o=N[0][0],l=N[1][0]),_&&(u=N[0][1],d=N[1][1]),N[0][0]===o&&N[0][1]===u&&N[1][0]===l&&N[1][1]===d||(A.selection=[[o,u],[l,d]],f.call(b),L.brush())}function B(){if(ki(),t.event.touches){if(t.event.touches.length)return;e&&clearTimeout(e),e=setTimeout((function(){e=null}),500),D.on("touchmove.brush touchend.brush touchcancel.brush",null)}else pn(t.event.view,g),q.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);D.attr("pointer-events","all"),U.attr("cursor",Oi.overlay),A.selection&&(N=A.selection),Vi(N)&&(A.selection=null,f.call(b)),L.end()}function F(){switch(t.event.keyCode){case 16:P=w&&M;break;case 18:x===Ri&&(w&&(s=l-p*w,r=o+p*w),M&&(h=d-v*M,a=u+v*M),x=Li,Y());break;case 32:x!==Ri&&x!==Li||(w<0?s=l-p:w>0&&(r=o-p),M<0?h=d-v:M>0&&(a=u-v),x=zi,U.attr("cursor",Oi.selection),Y());break;default:return}Ci()}function I(){switch(t.event.keyCode){case 16:P&&(y=_=P=!1,Y());break;case 18:x===Li&&(w<0?s=l:w>0&&(r=o),M<0?h=d:M>0&&(a=u),x=Ri,Y());break;case 32:x===zi&&(t.event.altKey?(w&&(s=l-p*w,r=o+p*w),M&&(h=d-v*M,a=u+v*M),x=Li):(w<0?s=l:w>0&&(r=o),M<0?h=d:M>0&&(a=u),x=Ri),U.attr("cursor",Oi[m]),Y());break;default:return}Ci()}}function h(){var t=this.__brush||{selection:null};return t.extent=r.apply(this,arguments),t.dim=n,t}return u.move=function(t,e){t.selection?t.on("start.brush",(function(){c(this,arguments).beforestart().start()})).on("interrupt.brush end.brush",(function(){c(this,arguments).end()})).tween("brush",(function(){var t=this,r=t.__brush,i=c(t,arguments),o=r.selection,a=n.input("function"==typeof e?e.apply(this,arguments):e,r.extent),u=Oe(o,a);function s(n){r.selection=1===n&&Vi(a)?null:u(n),f.call(t),i.brush()}return o&&a?s:s(1)})):t.each((function(){var t=this,r=arguments,i=t.__brush,o=n.input("function"==typeof e?e.apply(t,r):e,i.extent),a=c(t,r).beforestart();Rr(t),i.selection=null==o||Vi(o)?null:o,f.call(t),a.start().brush().end()}))},s.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(t){Wt(new Ei(u,t,n.output(this.state.selection)),o.apply,o,[t,this.that,this.args])}},u.extent=function(t){return arguments.length?(r="function"==typeof t?t:Si([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),u):r},u.filter=function(t){return arguments.length?(i="function"==typeof t?t:Si(!!t),u):i},u.handleSize=function(t){return arguments.length?(a=+t,u):a},u.on=function(){var t=o.on.apply(o,arguments);return t===o?u:t},u}var Wi=Math.cos,Zi=Math.sin,Qi=Math.PI,Ji=Qi/2,Ki=2*Qi,to=Math.max;function no(t){return function(n,e){return t(n.source.value+n.target.value,e.source.value+e.target.value)}}var eo=Array.prototype.slice;function ro(t){return function(){return t}}var io=Math.PI,oo=2*io,ao=oo-1e-6;function uo(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function fo(){return new uo}function co(t){return t.source}function so(t){return t.target}function lo(t){return t.radius}function ho(t){return t.startAngle}function po(t){return t.endAngle}uo.prototype=fo.prototype={constructor:uo,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,a=this._y1,u=e-t,f=r-n,c=o-t,s=a-n,l=c*c+s*s;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(l>1e-6)if(Math.abs(s*u-f*c)>1e-6&&i){var h=e-o,d=r-a,p=u*u+f*f,v=h*h+d*d,g=Math.sqrt(p),y=Math.sqrt(l),_=i*Math.tan((io-Math.acos((p+l-v)/(2*g*y)))/2),b=_/y,m=_/g;Math.abs(b-1)>1e-6&&(this._+="L"+(t+b*c)+","+(n+b*s)),this._+="A"+i+","+i+",0,0,"+ +(s*h>c*d)+","+(this._x1=t+m*u)+","+(this._y1=n+m*f)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,o){t=+t,n=+n;var a=(e=+e)*Math.cos(r),u=e*Math.sin(r),f=t+a,c=n+u,s=1^o,l=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+f+","+c:(Math.abs(this._x1-f)>1e-6||Math.abs(this._y1-c)>1e-6)&&(this._+="L"+f+","+c),e&&(l<0&&(l=l%oo+oo),l>ao?this._+="A"+e+","+e+",0,1,"+s+","+(t-a)+","+(n-u)+"A"+e+","+e+",0,1,"+s+","+(this._x1=f)+","+(this._y1=c):l>1e-6&&(this._+="A"+e+","+e+",0,"+ +(l>=io)+","+s+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};function vo(){}function go(t,n){var e=new vo;if(t instanceof vo)t.each((function(t,n){e.set(n,t)}));else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==n)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n(r=t[i],i,t),r)}else if(t)for(var a in t)e.set(a,t[a]);return e}function yo(){return{}}function _o(t,n,e){t[n]=e}function bo(){return go()}function mo(t,n,e){t.set(n,e)}function xo(){}vo.prototype=go.prototype={constructor:vo,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var wo=go.prototype;function Mo(t,n){var e=new xo;if(t instanceof xo)t.each((function(t){e.add(t)}));else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}xo.prototype=Mo.prototype={constructor:xo,has:wo.has,add:function(t){return this["$"+(t+="")]=t,this},remove:wo.remove,clear:wo.clear,values:wo.keys,size:wo.size,empty:wo.empty,each:wo.each};var Ao=Array.prototype.slice;function To(t,n){return t-n}function No(t){return function(){return t}}function So(t,n){for(var e,r=-1,i=n.length;++r<i;)if(e=Eo(t,n[r]))return e;return 0}function Eo(t,n){for(var e=n[0],r=n[1],i=-1,o=0,a=t.length,u=a-1;o<a;u=o++){var f=t[o],c=f[0],s=f[1],l=t[u],h=l[0],d=l[1];if(ko(f,l,n))return 0;s>r!=d>r&&e<(h-c)*(r-s)/(d-s)+c&&(i=-i)}return i}function ko(t,n,e){var r,i,o,a;return function(t,n,e){return(n[0]-t[0])*(e[1]-t[1])==(e[0]-t[0])*(n[1]-t[1])}(t,n,e)&&(i=t[r=+(t[0]===n[0])],o=e[r],a=n[r],i<=o&&o<=a||a<=o&&o<=i)}function Co(){}var Po=[[],[[[1,1.5],[.5,1]]],[[[1.5,1],[1,1.5]]],[[[1.5,1],[.5,1]]],[[[1,.5],[1.5,1]]],[[[1,1.5],[.5,1]],[[1,.5],[1.5,1]]],[[[1,.5],[1,1.5]]],[[[1,.5],[.5,1]]],[[[.5,1],[1,.5]]],[[[1,1.5],[1,.5]]],[[[.5,1],[1,.5]],[[1.5,1],[1,1.5]]],[[[1.5,1],[1,.5]]],[[[.5,1],[1.5,1]]],[[[1,1.5],[1.5,1]]],[[[.5,1],[1,1.5]]],[]];function zo(){var t=1,n=1,e=M,r=u;function i(t){var n=e(t);if(Array.isArray(n))n=n.slice().sort(To);else{var r=s(t),i=r[0],a=r[1];n=w(i,a,n),n=g(Math.floor(i/n)*n,Math.floor(a/n)*n,n)}return n.map((function(n){return o(t,n)}))}function o(e,i){var o=[],u=[];return function(e,r,i){var o,u,f,c,s,l,h=new Array,d=new Array;o=u=-1,c=e[0]>=r,Po[c<<1].forEach(p);for(;++o<t-1;)f=c,c=e[o+1]>=r,Po[f|c<<1].forEach(p);Po[c<<0].forEach(p);for(;++u<n-1;){for(o=-1,c=e[u*t+t]>=r,s=e[u*t]>=r,Po[c<<1|s<<2].forEach(p);++o<t-1;)f=c,c=e[u*t+t+o+1]>=r,l=s,s=e[u*t+o+1]>=r,Po[f|c<<1|s<<2|l<<3].forEach(p);Po[c|s<<3].forEach(p)}o=-1,s=e[u*t]>=r,Po[s<<2].forEach(p);for(;++o<t-1;)l=s,s=e[u*t+o+1]>=r,Po[s<<2|l<<3].forEach(p);function p(t){var n,e,r=[t[0][0]+o,t[0][1]+u],f=[t[1][0]+o,t[1][1]+u],c=a(r),s=a(f);(n=d[c])?(e=h[s])?(delete d[n.end],delete h[e.start],n===e?(n.ring.push(f),i(n.ring)):h[n.start]=d[e.end]={start:n.start,end:e.end,ring:n.ring.concat(e.ring)}):(delete d[n.end],n.ring.push(f),d[n.end=s]=n):(n=h[s])?(e=d[c])?(delete h[n.start],delete d[e.end],n===e?(n.ring.push(f),i(n.ring)):h[e.start]=d[n.end]={start:e.start,end:n.end,ring:e.ring.concat(n.ring)}):(delete h[n.start],n.ring.unshift(r),h[n.start=c]=n):h[c]=d[s]={start:c,end:s,ring:[r,f]}}Po[s<<3].forEach(p)}(e,i,(function(t){r(t,e,i),function(t){for(var n=0,e=t.length,r=t[e-1][1]*t[0][0]-t[e-1][0]*t[0][1];++n<e;)r+=t[n-1][1]*t[n][0]-t[n-1][0]*t[n][1];return r}(t)>0?o.push([t]):u.push(t)})),u.forEach((function(t){for(var n,e=0,r=o.length;e<r;++e)if(-1!==So((n=o[e])[0],t))return void n.push(t)})),{type:"MultiPolygon",value:i,coordinates:o}}function a(n){return 2*n[0]+n[1]*(t+1)*4}function u(e,r,i){e.forEach((function(e){var o,a=e[0],u=e[1],f=0|a,c=0|u,s=r[c*t+f];a>0&&a<t&&f===a&&(o=r[c*t+f-1],e[0]=a+(i-o)/(s-o)-.5),u>0&&u<n&&c===u&&(o=r[(c-1)*t+f],e[1]=u+(i-o)/(s-o)-.5)}))}return i.contour=o,i.size=function(e){if(!arguments.length)return[t,n];var r=Math.ceil(e[0]),o=Math.ceil(e[1]);if(!(r>0&&o>0))throw new Error("invalid size");return t=r,n=o,i},i.thresholds=function(t){return arguments.length?(e="function"==typeof t?t:Array.isArray(t)?No(Ao.call(t)):No(t),i):e},i.smooth=function(t){return arguments.length?(r=t?u:Co,i):r===u},i}function Ro(t,n,e){for(var r=t.width,i=t.height,o=1+(e<<1),a=0;a<i;++a)for(var u=0,f=0;u<r+e;++u)u<r&&(f+=t.data[u+a*r]),u>=e&&(u>=o&&(f-=t.data[u-o+a*r]),n.data[u-e+a*r]=f/Math.min(u+1,r-1+o-u,o))}function Lo(t,n,e){for(var r=t.width,i=t.height,o=1+(e<<1),a=0;a<r;++a)for(var u=0,f=0;u<i+e;++u)u<i&&(f+=t.data[a+u*r]),u>=e&&(u>=o&&(f-=t.data[a+(u-o)*r]),n.data[a+(u-e)*r]=f/Math.min(u+1,i-1+o-u,o))}function Do(t){return t[0]}function Uo(t){return t[1]}function qo(){return 1}var Oo={},Yo={};function Bo(t){return new Function("d","return {"+t.map((function(t,n){return JSON.stringify(t)+": d["+n+"]"})).join(",")+"}")}function Fo(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,i=[],o=t.length,a=0,u=0,f=o<=0,c=!1;function s(){if(f)return Yo;if(c)return c=!1,Oo;var n,r,i=a;if(34===t.charCodeAt(i)){for(;a++<o&&34!==t.charCodeAt(a)||34===t.charCodeAt(++a););return(n=a)>=o?f=!0:10===(r=t.charCodeAt(a++))?c=!0:13===r&&(c=!0,10===t.charCodeAt(a)&&++a),t.slice(i+1,n-1).replace(/""/g,'"')}for(;a<o;){if(10===(r=t.charCodeAt(n=a++)))c=!0;else if(13===r)c=!0,10===t.charCodeAt(a)&&++a;else if(r!==e)continue;return t.slice(i,n)}return f=!0,t.slice(i,o)}for(10===t.charCodeAt(o-1)&&--o,13===t.charCodeAt(o-1)&&--o;(r=s())!==Yo;){for(var l=[];r!==Oo&&r!==Yo;)l.push(r),r=s();n&&null==(l=n(l,u++))||i.push(l)}return i}function i(n){return n.map(o).join(t)}function o(t){return null==t?"":n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,i,o=r(t,(function(t,r){if(e)return e(t,r-1);i=t,e=n?function(t,n){var e=Bo(t);return function(r,i){return n(e(r),i,t)}}(t,n):Bo(t)}));return o.columns=i||[],o},parseRows:r,format:function(n,e){return null==e&&(e=function(t){var n=Object.create(null),e=[];return t.forEach((function(t){for(var r in t)r in n||e.push(n[r]=r)})),e}(n)),[e.map(o).join(t)].concat(n.map((function(n){return e.map((function(t){return o(n[t])})).join(t)}))).join("\n")},formatRows:function(t){return t.map(i).join("\n")}}}var Io=Fo(","),Ho=Io.parse,jo=Io.parseRows,Xo=Io.format,Go=Io.formatRows,Vo=Fo("\t"),$o=Vo.parse,Wo=Vo.parseRows,Zo=Vo.format,Qo=Vo.formatRows;function Jo(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.blob()}function Ko(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.arrayBuffer()}function ta(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}function na(t,n){return fetch(t,n).then(ta)}function ea(t){return function(n,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=void 0),na(n,e).then((function(n){return t(n,r)}))}}var ra=ea(Ho),ia=ea($o);function oa(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}function aa(t){return function(n,e){return na(n,e).then((function(n){return(new DOMParser).parseFromString(n,t)}))}}var ua=aa("application/xml"),fa=aa("text/html"),ca=aa("image/svg+xml");function sa(t){return function(){return t}}function la(){return 1e-6*(Math.random()-.5)}function ha(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,o,a,u,f,c,s,l,h,d=t._root,p={data:r},v=t._x0,g=t._y0,y=t._x1,_=t._y1;if(!d)return t._root=p,t;for(;d.length;)if((c=n>=(o=(v+y)/2))?v=o:y=o,(s=e>=(a=(g+_)/2))?g=a:_=a,i=d,!(d=d[l=s<<1|c]))return i[l]=p,t;if(u=+t._x.call(null,d.data),f=+t._y.call(null,d.data),n===u&&e===f)return p.next=d,i?i[l]=p:t._root=p,t;do{i=i?i[l]=new Array(4):t._root=new Array(4),(c=n>=(o=(v+y)/2))?v=o:y=o,(s=e>=(a=(g+_)/2))?g=a:_=a}while((l=s<<1|c)==(h=(f>=a)<<1|u>=o));return i[h]=d,i[l]=p,t}function da(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i}function pa(t){return t[0]}function va(t){return t[1]}function ga(t,n,e){var r=new ya(null==n?pa:n,null==e?va:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function ya(t,n,e,r,i,o){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function _a(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var ba=ga.prototype=ya.prototype;function ma(t){return t.x+t.vx}function xa(t){return t.y+t.vy}function wa(t){return t.index}function Ma(t,n){var e=t.get(n);if(!e)throw new Error("missing: "+n);return e}function Aa(t){return t.x}function Ta(t){return t.y}ba.copy=function(){var t,n,e=new ya(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=_a(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=_a(n));return e},ba.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return ha(this.cover(n,e),n,e,t)},ba.addAll=function(t){var n,e,r,i,o=t.length,a=new Array(o),u=new Array(o),f=1/0,c=1/0,s=-1/0,l=-1/0;for(e=0;e<o;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(a[e]=r,u[e]=i,r<f&&(f=r),r>s&&(s=r),i<c&&(c=i),i>l&&(l=i));for(s<f&&(f=this._x0,s=this._x1),l<c&&(c=this._y0,l=this._y1),this.cover(f,c).cover(s,l),e=0;e<o;++e)ha(this,a[e],u[e],t[e]);return this},ba.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,o=(r=Math.floor(n))+1;else{if(!(e>t||t>i||r>n||n>o))return this;var a,u,f=i-e,c=this._root;switch(u=(n<(r+o)/2)<<1|t<(e+i)/2){case 0:do{(a=new Array(4))[u]=c,c=a}while(o=r+(f*=2),t>(i=e+f)||n>o);break;case 1:do{(a=new Array(4))[u]=c,c=a}while(o=r+(f*=2),(e=i-f)>t||n>o);break;case 2:do{(a=new Array(4))[u]=c,c=a}while(r=o-(f*=2),t>(i=e+f)||r>n);break;case 3:do{(a=new Array(4))[u]=c,c=a}while(r=o-(f*=2),(e=i-f)>t||r>n)}this._root&&this._root.length&&(this._root=c)}return this._x0=e,this._y0=r,this._x1=i,this._y1=o,this},ba.data=function(){var t=[];return this.visit((function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)})),t},ba.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},ba.find=function(t,n,e){var r,i,o,a,u,f,c,s=this._x0,l=this._y0,h=this._x1,d=this._y1,p=[],v=this._root;for(v&&p.push(new da(v,s,l,h,d)),null==e?e=1/0:(s=t-e,l=n-e,h=t+e,d=n+e,e*=e);f=p.pop();)if(!(!(v=f.node)||(i=f.x0)>h||(o=f.y0)>d||(a=f.x1)<s||(u=f.y1)<l))if(v.length){var g=(i+a)/2,y=(o+u)/2;p.push(new da(v[3],g,y,a,u),new da(v[2],i,y,g,u),new da(v[1],g,o,a,y),new da(v[0],i,o,g,y)),(c=(n>=y)<<1|t>=g)&&(f=p[p.length-1],p[p.length-1]=p[p.length-1-c],p[p.length-1-c]=f)}else{var _=t-+this._x.call(null,v.data),b=n-+this._y.call(null,v.data),m=_*_+b*b;if(m<e){var x=Math.sqrt(e=m);s=t-x,l=n-x,h=t+x,d=n+x,r=v.data}}return r},ba.remove=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(a=+this._y.call(null,t)))return this;var n,e,r,i,o,a,u,f,c,s,l,h,d=this._root,p=this._x0,v=this._y0,g=this._x1,y=this._y1;if(!d)return this;if(d.length)for(;;){if((c=o>=(u=(p+g)/2))?p=u:g=u,(s=a>=(f=(v+y)/2))?v=f:y=f,n=d,!(d=d[l=s<<1|c]))return this;if(!d.length)break;(n[l+1&3]||n[l+2&3]||n[l+3&3])&&(e=n,h=l)}for(;d.data!==t;)if(r=d,!(d=d.next))return this;return(i=d.next)&&delete d.next,r?(i?r.next=i:delete r.next,this):n?(i?n[l]=i:delete n[l],(d=n[0]||n[1]||n[2]||n[3])&&d===(n[3]||n[2]||n[1]||n[0])&&!d.length&&(e?e[h]=d:this._root=d),this):(this._root=i,this)},ba.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},ba.root=function(){return this._root},ba.size=function(){var t=0;return this.visit((function(n){if(!n.length)do{++t}while(n=n.next)})),t},ba.visit=function(t){var n,e,r,i,o,a,u=[],f=this._root;for(f&&u.push(new da(f,this._x0,this._y0,this._x1,this._y1));n=u.pop();)if(!t(f=n.node,r=n.x0,i=n.y0,o=n.x1,a=n.y1)&&f.length){var c=(r+o)/2,s=(i+a)/2;(e=f[3])&&u.push(new da(e,c,s,o,a)),(e=f[2])&&u.push(new da(e,r,s,c,a)),(e=f[1])&&u.push(new da(e,c,i,o,s)),(e=f[0])&&u.push(new da(e,r,i,c,s))}return this},ba.visitAfter=function(t){var n,e=[],r=[];for(this._root&&e.push(new da(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var o,a=n.x0,u=n.y0,f=n.x1,c=n.y1,s=(a+f)/2,l=(u+c)/2;(o=i[0])&&e.push(new da(o,a,u,s,l)),(o=i[1])&&e.push(new da(o,s,u,f,l)),(o=i[2])&&e.push(new da(o,a,l,s,c)),(o=i[3])&&e.push(new da(o,s,l,f,c))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},ba.x=function(t){return arguments.length?(this._x=t,this):this._x},ba.y=function(t){return arguments.length?(this._y=t,this):this._y};var Na=Math.PI*(3-Math.sqrt(5));function Sa(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]}function Ea(t){return(t=Sa(Math.abs(t)))?t[1]:NaN}var ka,Ca=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Pa(t){return new za(t)}function za(t){if(!(n=Ca.exec(t)))throw new Error("invalid format: "+t);var n;this.fill=n[1]||" ",this.align=n[2]||">",this.sign=n[3]||"-",this.symbol=n[4]||"",this.zero=!!n[5],this.width=n[6]&&+n[6],this.comma=!!n[7],this.precision=n[8]&&+n[8].slice(1),this.trim=!!n[9],this.type=n[10]||""}function Ra(t,n){var e=Sa(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}Pa.prototype=za.prototype,za.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var La={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return Ra(100*t,n)},r:Ra,s:function(t,n){var e=Sa(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(ka=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+Sa(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}};function Da(t){return t}var Ua,qa=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function Oa(t){var n,e,r=t.grouping&&t.thousands?(n=t.grouping,e=t.thousands,function(t,r){for(var i=t.length,o=[],a=0,u=n[0],f=0;i>0&&u>0&&(f+u+1>r&&(u=Math.max(1,r-f)),o.push(t.substring(i-=u,i+u)),!((f+=u+1)>r));)u=n[a=(a+1)%n.length];return o.reverse().join(e)}):Da,i=t.currency,o=t.decimal,a=t.numerals?function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(t.numerals):Da,u=t.percent||"%";function f(t){var n=(t=Pa(t)).fill,e=t.align,f=t.sign,c=t.symbol,s=t.zero,l=t.width,h=t.comma,d=t.precision,p=t.trim,v=t.type;"n"===v?(h=!0,v="g"):La[v]||(null==d&&(d=12),p=!0,v="g"),(s||"0"===n&&"="===e)&&(s=!0,n="0",e="=");var g="$"===c?i[0]:"#"===c&&/[boxX]/.test(v)?"0"+v.toLowerCase():"",y="$"===c?i[1]:/[%p]/.test(v)?u:"",_=La[v],b=/[defgprs%]/.test(v);function m(t){var i,u,c,m=g,x=y;if("c"===v)x=_(t)+x,t="";else{var w=(t=+t)<0;if(t=_(Math.abs(t),d),p&&(t=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(i>0){if(!+t[r])break t;i=0}}return i>0?t.slice(0,i)+t.slice(n+1):t}(t)),w&&0==+t&&(w=!1),m=(w?"("===f?f:"-":"-"===f||"("===f?"":f)+m,x=("s"===v?qa[8+ka/3]:"")+x+(w&&"("===f?")":""),b)for(i=-1,u=t.length;++i<u;)if(48>(c=t.charCodeAt(i))||c>57){x=(46===c?o+t.slice(i+1):t.slice(i))+x,t=t.slice(0,i);break}}h&&!s&&(t=r(t,1/0));var M=m.length+t.length+x.length,A=M<l?new Array(l-M+1).join(n):"";switch(h&&s&&(t=r(A+t,A.length?l-x.length:1/0),A=""),e){case"<":t=m+t+x+A;break;case"=":t=m+A+t+x;break;case"^":t=A.slice(0,M=A.length>>1)+m+t+x+A.slice(M);break;default:t=A+m+t+x}return a(t)}return d=null==d?6:/[gprs]/.test(v)?Math.max(1,Math.min(21,d)):Math.max(0,Math.min(20,d)),m.toString=function(){return t+""},m}return{format:f,formatPrefix:function(t,n){var e=f(((t=Pa(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Ea(n)/3))),i=Math.pow(10,-r),o=qa[8+r/3];return function(t){return e(i*t)+o}}}}function Ya(n){return Ua=Oa(n),t.format=Ua.format,t.formatPrefix=Ua.formatPrefix,Ua}function Ba(t){return Math.max(0,-Ea(Math.abs(t)))}function Fa(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Ea(n)/3)))-Ea(Math.abs(t)))}function Ia(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,Ea(n)-Ea(t))+1}function Ha(){return new ja}function ja(){this.reset()}Ya({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),ja.prototype={constructor:ja,reset:function(){this.s=this.t=0},add:function(t){Ga(Xa,t,this.t),Ga(this,Xa.s,this.s),this.s?this.t+=Xa.t:this.s=Xa.t},valueOf:function(){return this.s}};var Xa=new ja;function Ga(t,n,e){var r=t.s=n+e,i=r-n,o=r-i;t.t=n-o+(e-i)}var Va=Math.PI,$a=Va/2,Wa=Va/4,Za=2*Va,Qa=180/Va,Ja=Va/180,Ka=Math.abs,tu=Math.atan,nu=Math.atan2,eu=Math.cos,ru=Math.ceil,iu=Math.exp,ou=Math.log,au=Math.pow,uu=Math.sin,fu=Math.sign||function(t){return t>0?1:t<0?-1:0},cu=Math.sqrt,su=Math.tan;function lu(t){return t>1?0:t<-1?Va:Math.acos(t)}function hu(t){return t>1?$a:t<-1?-$a:Math.asin(t)}function du(t){return(t=uu(t/2))*t}function pu(){}function vu(t,n){t&&yu.hasOwnProperty(t.type)&&yu[t.type](t,n)}var gu={Feature:function(t,n){vu(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)vu(e[r].geometry,n)}},yu={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)t=e[r],n.point(t[0],t[1],t[2])},LineString:function(t,n){_u(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)_u(e[r],n,0)},Polygon:function(t,n){bu(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)bu(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)vu(e[r],n)}};function _u(t,n,e){var r,i=-1,o=t.length-e;for(n.lineStart();++i<o;)r=t[i],n.point(r[0],r[1],r[2]);n.lineEnd()}function bu(t,n){var e=-1,r=t.length;for(n.polygonStart();++e<r;)_u(t[e],n,1);n.polygonEnd()}function mu(t,n){t&&gu.hasOwnProperty(t.type)?gu[t.type](t,n):vu(t,n)}var xu,wu,Mu,Au,Tu,Nu=Ha(),Su=Ha(),Eu={point:pu,lineStart:pu,lineEnd:pu,polygonStart:function(){Nu.reset(),Eu.lineStart=ku,Eu.lineEnd=Cu},polygonEnd:function(){var t=+Nu;Su.add(t<0?Za+t:t),this.lineStart=this.lineEnd=this.point=pu},sphere:function(){Su.add(Za)}};function ku(){Eu.point=Pu}function Cu(){zu(xu,wu)}function Pu(t,n){Eu.point=zu,xu=t,wu=n,Mu=t*=Ja,Au=eu(n=(n*=Ja)/2+Wa),Tu=uu(n)}function zu(t,n){var e=(t*=Ja)-Mu,r=e>=0?1:-1,i=r*e,o=eu(n=(n*=Ja)/2+Wa),a=uu(n),u=Tu*a,f=Au*o+u*eu(i),c=u*r*uu(i);Nu.add(nu(c,f)),Mu=t,Au=o,Tu=a}function Ru(t){return[nu(t[1],t[0]),hu(t[2])]}function Lu(t){var n=t[0],e=t[1],r=eu(e);return[r*eu(n),r*uu(n),uu(e)]}function Du(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function Uu(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function qu(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]}function Ou(t,n){return[t[0]*n,t[1]*n,t[2]*n]}function Yu(t){var n=cu(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}var Bu,Fu,Iu,Hu,ju,Xu,Gu,Vu,$u,Wu,Zu,Qu,Ju,Ku,tf,nf,ef,rf,of,af,uf,ff,cf,sf,lf,hf,df=Ha(),pf={point:vf,lineStart:yf,lineEnd:_f,polygonStart:function(){pf.point=bf,pf.lineStart=mf,pf.lineEnd=xf,df.reset(),Eu.polygonStart()},polygonEnd:function(){Eu.polygonEnd(),pf.point=vf,pf.lineStart=yf,pf.lineEnd=_f,Nu<0?(Bu=-(Iu=180),Fu=-(Hu=90)):df>1e-6?Hu=90:df<-1e-6&&(Fu=-90),Wu[0]=Bu,Wu[1]=Iu}};function vf(t,n){$u.push(Wu=[Bu=t,Iu=t]),n<Fu&&(Fu=n),n>Hu&&(Hu=n)}function gf(t,n){var e=Lu([t*Ja,n*Ja]);if(Vu){var r=Uu(Vu,e),i=Uu([r[1],-r[0],0],r);Yu(i),i=Ru(i);var o,a=t-ju,u=a>0?1:-1,f=i[0]*Qa*u,c=Ka(a)>180;c^(u*ju<f&&f<u*t)?(o=i[1]*Qa)>Hu&&(Hu=o):c^(u*ju<(f=(f+360)%360-180)&&f<u*t)?(o=-i[1]*Qa)<Fu&&(Fu=o):(n<Fu&&(Fu=n),n>Hu&&(Hu=n)),c?t<ju?wf(Bu,t)>wf(Bu,Iu)&&(Iu=t):wf(t,Iu)>wf(Bu,Iu)&&(Bu=t):Iu>=Bu?(t<Bu&&(Bu=t),t>Iu&&(Iu=t)):t>ju?wf(Bu,t)>wf(Bu,Iu)&&(Iu=t):wf(t,Iu)>wf(Bu,Iu)&&(Bu=t)}else $u.push(Wu=[Bu=t,Iu=t]);n<Fu&&(Fu=n),n>Hu&&(Hu=n),Vu=e,ju=t}function yf(){pf.point=gf}function _f(){Wu[0]=Bu,Wu[1]=Iu,pf.point=vf,Vu=null}function bf(t,n){if(Vu){var e=t-ju;df.add(Ka(e)>180?e+(e>0?360:-360):e)}else Xu=t,Gu=n;Eu.point(t,n),gf(t,n)}function mf(){Eu.lineStart()}function xf(){bf(Xu,Gu),Eu.lineEnd(),Ka(df)>1e-6&&(Bu=-(Iu=180)),Wu[0]=Bu,Wu[1]=Iu,Vu=null}function wf(t,n){return(n-=t)<0?n+360:n}function Mf(t,n){return t[0]-n[0]}function Af(t,n){return t[0]<=t[1]?t[0]<=n&&n<=t[1]:n<t[0]||t[1]<n}var Tf={sphere:pu,point:Nf,lineStart:Ef,lineEnd:Pf,polygonStart:function(){Tf.lineStart=zf,Tf.lineEnd=Rf},polygonEnd:function(){Tf.lineStart=Ef,Tf.lineEnd=Pf}};function Nf(t,n){t*=Ja;var e=eu(n*=Ja);Sf(e*eu(t),e*uu(t),uu(n))}function Sf(t,n,e){++Zu,Ju+=(t-Ju)/Zu,Ku+=(n-Ku)/Zu,tf+=(e-tf)/Zu}function Ef(){Tf.point=kf}function kf(t,n){t*=Ja;var e=eu(n*=Ja);sf=e*eu(t),lf=e*uu(t),hf=uu(n),Tf.point=Cf,Sf(sf,lf,hf)}function Cf(t,n){t*=Ja;var e=eu(n*=Ja),r=e*eu(t),i=e*uu(t),o=uu(n),a=nu(cu((a=lf*o-hf*i)*a+(a=hf*r-sf*o)*a+(a=sf*i-lf*r)*a),sf*r+lf*i+hf*o);Qu+=a,nf+=a*(sf+(sf=r)),ef+=a*(lf+(lf=i)),rf+=a*(hf+(hf=o)),Sf(sf,lf,hf)}function Pf(){Tf.point=Nf}function zf(){Tf.point=Lf}function Rf(){Df(ff,cf),Tf.point=Nf}function Lf(t,n){ff=t,cf=n,t*=Ja,n*=Ja,Tf.point=Df;var e=eu(n);sf=e*eu(t),lf=e*uu(t),hf=uu(n),Sf(sf,lf,hf)}function Df(t,n){t*=Ja;var e=eu(n*=Ja),r=e*eu(t),i=e*uu(t),o=uu(n),a=lf*o-hf*i,u=hf*r-sf*o,f=sf*i-lf*r,c=cu(a*a+u*u+f*f),s=hu(c),l=c&&-s/c;of+=l*a,af+=l*u,uf+=l*f,Qu+=s,nf+=s*(sf+(sf=r)),ef+=s*(lf+(lf=i)),rf+=s*(hf+(hf=o)),Sf(sf,lf,hf)}function Uf(t){return function(){return t}}function qf(t,n){function e(e,r){return e=t(e,r),n(e[0],e[1])}return t.invert&&n.invert&&(e.invert=function(e,r){return(e=n.invert(e,r))&&t.invert(e[0],e[1])}),e}function Of(t,n){return[t>Va?t-Za:t<-Va?t+Za:t,n]}function Yf(t,n,e){return(t%=Za)?n||e?qf(Ff(t),If(n,e)):Ff(t):n||e?If(n,e):Of}function Bf(t){return function(n,e){return[(n+=t)>Va?n-Za:n<-Va?n+Za:n,e]}}function Ff(t){var n=Bf(t);return n.invert=Bf(-t),n}function If(t,n){var e=eu(t),r=uu(t),i=eu(n),o=uu(n);function a(t,n){var a=eu(n),u=eu(t)*a,f=uu(t)*a,c=uu(n),s=c*e+u*r;return[nu(f*i-s*o,u*e-c*r),hu(s*i+f*o)]}return a.invert=function(t,n){var a=eu(n),u=eu(t)*a,f=uu(t)*a,c=uu(n),s=c*i-f*o;return[nu(f*i+c*o,u*e+s*r),hu(s*e-u*r)]},a}function Hf(t){function n(n){return(n=t(n[0]*Ja,n[1]*Ja))[0]*=Qa,n[1]*=Qa,n}return t=Yf(t[0]*Ja,t[1]*Ja,t.length>2?t[2]*Ja:0),n.invert=function(n){return(n=t.invert(n[0]*Ja,n[1]*Ja))[0]*=Qa,n[1]*=Qa,n},n}function jf(t,n,e,r,i,o){if(e){var a=eu(n),u=uu(n),f=r*e;null==i?(i=n+r*Za,o=n-f/2):(i=Xf(a,i),o=Xf(a,o),(r>0?i<o:i>o)&&(i+=r*Za));for(var c,s=i;r>0?s>o:s<o;s-=f)c=Ru([a,-u*eu(s),-u*uu(s)]),t.point(c[0],c[1])}}function Xf(t,n){(n=Lu(n))[0]-=t,Yu(n);var e=lu(-n[1]);return((-n[2]<0?-e:e)+Za-1e-6)%Za}function Gf(){var t,n=[];return{point:function(n,e){t.push([n,e])},lineStart:function(){n.push(t=[])},lineEnd:pu,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}}function Vf(t,n){return Ka(t[0]-n[0])<1e-6&&Ka(t[1]-n[1])<1e-6}function $f(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}function Wf(t,n,e,r,i){var o,a,u=[],f=[];if(t.forEach((function(t){if(!((n=t.length-1)<=0)){var n,e,r=t[0],a=t[n];if(Vf(r,a)){for(i.lineStart(),o=0;o<n;++o)i.point((r=t[o])[0],r[1]);i.lineEnd()}else u.push(e=new $f(r,t,null,!0)),f.push(e.o=new $f(r,null,e,!1)),u.push(e=new $f(a,t,null,!1)),f.push(e.o=new $f(a,null,e,!0))}})),u.length){for(f.sort(n),Zf(u),Zf(f),o=0,a=f.length;o<a;++o)f[o].e=e=!e;for(var c,s,l=u[0];;){for(var h=l,d=!0;h.v;)if((h=h.n)===l)return;c=h.z,i.lineStart();do{if(h.v=h.o.v=!0,h.e){if(d)for(o=0,a=c.length;o<a;++o)i.point((s=c[o])[0],s[1]);else r(h.x,h.n.x,1,i);h=h.n}else{if(d)for(c=h.p.z,o=c.length-1;o>=0;--o)i.point((s=c[o])[0],s[1]);else r(h.x,h.p.x,-1,i);h=h.p}c=(h=h.o).z,d=!d}while(!h.v);i.lineEnd()}}}function Zf(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}Of.invert=Of;var Qf=Ha();function Jf(t,n){var e=n[0],r=n[1],i=uu(r),o=[uu(e),-eu(e),0],a=0,u=0;Qf.reset(),1===i?r=$a+1e-6:-1===i&&(r=-$a-1e-6);for(var f=0,c=t.length;f<c;++f)if(l=(s=t[f]).length)for(var s,l,h=s[l-1],d=h[0],p=h[1]/2+Wa,v=uu(p),g=eu(p),y=0;y<l;++y,d=b,v=x,g=w,h=_){var _=s[y],b=_[0],m=_[1]/2+Wa,x=uu(m),w=eu(m),M=b-d,A=M>=0?1:-1,T=A*M,N=T>Va,S=v*x;if(Qf.add(nu(S*A*uu(T),g*w+S*eu(T))),a+=N?M+A*Za:M,N^d>=e^b>=e){var E=Uu(Lu(h),Lu(_));Yu(E);var k=Uu(o,E);Yu(k);var C=(N^M>=0?-1:1)*hu(k[2]);(r>C||r===C&&(E[0]||E[1]))&&(u+=N^M>=0?1:-1)}}return(a<-1e-6||a<1e-6&&Qf<-1e-6)^1&u}function Kf(t,n,e,r){return function(i){var o,a,u,f=n(i),c=Gf(),s=n(c),l=!1,h={point:d,lineStart:v,lineEnd:g,polygonStart:function(){h.point=y,h.lineStart=_,h.lineEnd=b,a=[],o=[]},polygonEnd:function(){h.point=d,h.lineStart=v,h.lineEnd=g,a=N(a);var t=Jf(o,r);a.length?(l||(i.polygonStart(),l=!0),Wf(a,nc,t,e,i)):t&&(l||(i.polygonStart(),l=!0),i.lineStart(),e(null,null,1,i),i.lineEnd()),l&&(i.polygonEnd(),l=!1),a=o=null},sphere:function(){i.polygonStart(),i.lineStart(),e(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function d(n,e){t(n,e)&&i.point(n,e)}function p(t,n){f.point(t,n)}function v(){h.point=p,f.lineStart()}function g(){h.point=d,f.lineEnd()}function y(t,n){u.push([t,n]),s.point(t,n)}function _(){s.lineStart(),u=[]}function b(){y(u[0][0],u[0][1]),s.lineEnd();var t,n,e,r,f=s.clean(),h=c.result(),d=h.length;if(u.pop(),o.push(u),u=null,d)if(1&f){if((n=(e=h[0]).length-1)>0){for(l||(i.polygonStart(),l=!0),i.lineStart(),t=0;t<n;++t)i.point((r=e[t])[0],r[1]);i.lineEnd()}}else d>1&&2&f&&h.push(h.pop().concat(h.shift())),a.push(h.filter(tc))}return h}}function tc(t){return t.length>1}function nc(t,n){return((t=t.x)[0]<0?t[1]-$a-1e-6:$a-t[1])-((n=n.x)[0]<0?n[1]-$a-1e-6:$a-n[1])}var ec=Kf((function(){return!0}),(function(t){var n,e=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(o,a){var u=o>0?Va:-Va,f=Ka(o-e);Ka(f-Va)<1e-6?(t.point(e,r=(r+a)/2>0?$a:-$a),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(u,r),t.point(o,r),n=0):i!==u&&f>=Va&&(Ka(e-i)<1e-6&&(e-=1e-6*i),Ka(o-u)<1e-6&&(o-=1e-6*u),r=function(t,n,e,r){var i,o,a=uu(t-e);return Ka(a)>1e-6?tu((uu(n)*(o=eu(r))*uu(e)-uu(r)*(i=eu(n))*uu(t))/(i*o*a)):(n+r)/2}(e,r,o,a),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(u,r),n=0),t.point(e=o,r=a),i=u},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}}),(function(t,n,e,r){var i;if(null==t)i=e*$a,r.point(-Va,i),r.point(0,i),r.point(Va,i),r.point(Va,0),r.point(Va,-i),r.point(0,-i),r.point(-Va,-i),r.point(-Va,0),r.point(-Va,i);else if(Ka(t[0]-n[0])>1e-6){var o=t[0]<n[0]?Va:-Va;i=e*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(n[0],n[1])}),[-Va,-$a]);function rc(t){var n=eu(t),e=6*Ja,r=n>0,i=Ka(n)>1e-6;function o(t,e){return eu(t)*eu(e)>n}function a(t,e,r){var i=[1,0,0],o=Uu(Lu(t),Lu(e)),a=Du(o,o),u=o[0],f=a-u*u;if(!f)return!r&&t;var c=n*a/f,s=-n*u/f,l=Uu(i,o),h=Ou(i,c);qu(h,Ou(o,s));var d=l,p=Du(h,d),v=Du(d,d),g=p*p-v*(Du(h,h)-1);if(!(g<0)){var y=cu(g),_=Ou(d,(-p-y)/v);if(qu(_,h),_=Ru(_),!r)return _;var b,m=t[0],x=e[0],w=t[1],M=e[1];x<m&&(b=m,m=x,x=b);var A=x-m,T=Ka(A-Va)<1e-6;if(!T&&M<w&&(b=w,w=M,M=b),T||A<1e-6?T?w+M>0^_[1]<(Ka(_[0]-m)<1e-6?w:M):w<=_[1]&&_[1]<=M:A>Va^(m<=_[0]&&_[0]<=x)){var N=Ou(d,(-p+y)/v);return qu(N,h),[_,Ru(N)]}}}function u(n,e){var i=r?t:Va-t,o=0;return n<-i?o|=1:n>i&&(o|=2),e<-i?o|=4:e>i&&(o|=8),o}return Kf(o,(function(t){var n,e,f,c,s;return{lineStart:function(){c=f=!1,s=1},point:function(l,h){var d,p=[l,h],v=o(l,h),g=r?v?0:u(l,h):v?u(l+(l<0?Va:-Va),h):0;if(!n&&(c=f=v)&&t.lineStart(),v!==f&&(!(d=a(n,p))||Vf(n,d)||Vf(p,d))&&(p[0]+=1e-6,p[1]+=1e-6,v=o(p[0],p[1])),v!==f)s=0,v?(t.lineStart(),d=a(p,n),t.point(d[0],d[1])):(d=a(n,p),t.point(d[0],d[1]),t.lineEnd()),n=d;else if(i&&n&&r^v){var y;g&e||!(y=a(p,n,!0))||(s=0,r?(t.lineStart(),t.point(y[0][0],y[0][1]),t.point(y[1][0],y[1][1]),t.lineEnd()):(t.point(y[1][0],y[1][1]),t.lineEnd(),t.lineStart(),t.point(y[0][0],y[0][1])))}!v||n&&Vf(n,p)||t.point(p[0],p[1]),n=p,f=v,e=g},lineEnd:function(){f&&t.lineEnd(),n=null},clean:function(){return s|(c&&f)<<1}}}),(function(n,r,i,o){jf(o,t,e,i,n,r)}),r?[0,-t]:[-Va,t-Va])}function ic(t,n,e,r){function i(i,o){return t<=i&&i<=e&&n<=o&&o<=r}function o(i,o,u,c){var s=0,l=0;if(null==i||(s=a(i,u))!==(l=a(o,u))||f(i,o)<0^u>0)do{c.point(0===s||3===s?t:e,s>1?r:n)}while((s=(s+u+4)%4)!==l);else c.point(o[0],o[1])}function a(r,i){return Ka(r[0]-t)<1e-6?i>0?0:3:Ka(r[0]-e)<1e-6?i>0?2:1:Ka(r[1]-n)<1e-6?i>0?1:0:i>0?3:2}function u(t,n){return f(t.x,n.x)}function f(t,n){var e=a(t,1),r=a(n,1);return e!==r?e-r:0===e?n[1]-t[1]:1===e?t[0]-n[0]:2===e?t[1]-n[1]:n[0]-t[0]}return function(a){var f,c,s,l,h,d,p,v,g,y,_,b=a,m=Gf(),x={point:w,lineStart:function(){x.point=M,c&&c.push(s=[]);y=!0,g=!1,p=v=NaN},lineEnd:function(){f&&(M(l,h),d&&g&&m.rejoin(),f.push(m.result()));x.point=w,g&&b.lineEnd()},polygonStart:function(){b=m,f=[],c=[],_=!0},polygonEnd:function(){var n=function(){for(var n=0,e=0,i=c.length;e<i;++e)for(var o,a,u=c[e],f=1,s=u.length,l=u[0],h=l[0],d=l[1];f<s;++f)o=h,a=d,l=u[f],h=l[0],d=l[1],a<=r?d>r&&(h-o)*(r-a)>(d-a)*(t-o)&&++n:d<=r&&(h-o)*(r-a)<(d-a)*(t-o)&&--n;return n}(),e=_&&n,i=(f=N(f)).length;(e||i)&&(a.polygonStart(),e&&(a.lineStart(),o(null,null,1,a),a.lineEnd()),i&&Wf(f,u,n,o,a),a.polygonEnd());b=a,f=c=s=null}};function w(t,n){i(t,n)&&b.point(t,n)}function M(o,a){var u=i(o,a);if(c&&s.push([o,a]),y)l=o,h=a,d=u,y=!1,u&&(b.lineStart(),b.point(o,a));else if(u&&g)b.point(o,a);else{var f=[p=Math.max(-1e9,Math.min(1e9,p)),v=Math.max(-1e9,Math.min(1e9,v))],m=[o=Math.max(-1e9,Math.min(1e9,o)),a=Math.max(-1e9,Math.min(1e9,a))];!function(t,n,e,r,i,o){var a,u=t[0],f=t[1],c=0,s=1,l=n[0]-u,h=n[1]-f;if(a=e-u,l||!(a>0)){if(a/=l,l<0){if(a<c)return;a<s&&(s=a)}else if(l>0){if(a>s)return;a>c&&(c=a)}if(a=i-u,l||!(a<0)){if(a/=l,l<0){if(a>s)return;a>c&&(c=a)}else if(l>0){if(a<c)return;a<s&&(s=a)}if(a=r-f,h||!(a>0)){if(a/=h,h<0){if(a<c)return;a<s&&(s=a)}else if(h>0){if(a>s)return;a>c&&(c=a)}if(a=o-f,h||!(a<0)){if(a/=h,h<0){if(a>s)return;a>c&&(c=a)}else if(h>0){if(a<c)return;a<s&&(s=a)}return c>0&&(t[0]=u+c*l,t[1]=f+c*h),s<1&&(n[0]=u+s*l,n[1]=f+s*h),!0}}}}}(f,m,t,n,e,r)?u&&(b.lineStart(),b.point(o,a),_=!1):(g||(b.lineStart(),b.point(f[0],f[1])),b.point(m[0],m[1]),u||b.lineEnd(),_=!1)}p=o,v=a,g=u}return x}}var oc,ac,uc,fc=Ha(),cc={sphere:pu,point:pu,lineStart:function(){cc.point=lc,cc.lineEnd=sc},lineEnd:pu,polygonStart:pu,polygonEnd:pu};function sc(){cc.point=cc.lineEnd=pu}function lc(t,n){oc=t*=Ja,ac=uu(n*=Ja),uc=eu(n),cc.point=hc}function hc(t,n){t*=Ja;var e=uu(n*=Ja),r=eu(n),i=Ka(t-oc),o=eu(i),a=r*uu(i),u=uc*e-ac*r*o,f=ac*e+uc*r*o;fc.add(nu(cu(a*a+u*u),f)),oc=t,ac=e,uc=r}function dc(t){return fc.reset(),mu(t,cc),+fc}var pc=[null,null],vc={type:"LineString",coordinates:pc};function gc(t,n){return pc[0]=t,pc[1]=n,dc(vc)}var yc={Feature:function(t,n){return bc(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)if(bc(e[r].geometry,n))return!0;return!1}},_c={Sphere:function(){return!0},Point:function(t,n){return mc(t.coordinates,n)},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(mc(e[r],n))return!0;return!1},LineString:function(t,n){return xc(t.coordinates,n)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(xc(e[r],n))return!0;return!1},Polygon:function(t,n){return wc(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(wc(e[r],n))return!0;return!1},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)if(bc(e[r],n))return!0;return!1}};function bc(t,n){return!(!t||!_c.hasOwnProperty(t.type))&&_c[t.type](t,n)}function mc(t,n){return 0===gc(t,n)}function xc(t,n){var e=gc(t[0],t[1]);return gc(t[0],n)+gc(n,t[1])<=e+1e-6}function wc(t,n){return!!Jf(t.map(Mc),Ac(n))}function Mc(t){return(t=t.map(Ac)).pop(),t}function Ac(t){return[t[0]*Ja,t[1]*Ja]}function Tc(t,n,e){var r=g(t,n-1e-6,e).concat(n);return function(t){return r.map((function(n){return[t,n]}))}}function Nc(t,n,e){var r=g(t,n-1e-6,e).concat(n);return function(t){return r.map((function(n){return[n,t]}))}}function Sc(){var t,n,e,r,i,o,a,u,f,c,s,l,h=10,d=h,p=90,v=360,y=2.5;function _(){return{type:"MultiLineString",coordinates:b()}}function b(){return g(ru(r/p)*p,e,p).map(s).concat(g(ru(u/v)*v,a,v).map(l)).concat(g(ru(n/h)*h,t,h).filter((function(t){return Ka(t%p)>1e-6})).map(f)).concat(g(ru(o/d)*d,i,d).filter((function(t){return Ka(t%v)>1e-6})).map(c))}return _.lines=function(){return b().map((function(t){return{type:"LineString",coordinates:t}}))},_.outline=function(){return{type:"Polygon",coordinates:[s(r).concat(l(a).slice(1),s(e).reverse().slice(1),l(u).reverse().slice(1))]}},_.extent=function(t){return arguments.length?_.extentMajor(t).extentMinor(t):_.extentMinor()},_.extentMajor=function(t){return arguments.length?(r=+t[0][0],e=+t[1][0],u=+t[0][1],a=+t[1][1],r>e&&(t=r,r=e,e=t),u>a&&(t=u,u=a,a=t),_.precision(y)):[[r,u],[e,a]]},_.extentMinor=function(e){return arguments.length?(n=+e[0][0],t=+e[1][0],o=+e[0][1],i=+e[1][1],n>t&&(e=n,n=t,t=e),o>i&&(e=o,o=i,i=e),_.precision(y)):[[n,o],[t,i]]},_.step=function(t){return arguments.length?_.stepMajor(t).stepMinor(t):_.stepMinor()},_.stepMajor=function(t){return arguments.length?(p=+t[0],v=+t[1],_):[p,v]},_.stepMinor=function(t){return arguments.length?(h=+t[0],d=+t[1],_):[h,d]},_.precision=function(h){return arguments.length?(y=+h,f=Tc(o,i,90),c=Nc(n,t,y),s=Tc(u,a,90),l=Nc(r,e,y),_):y},_.extentMajor([[-180,-89.999999],[180,89.999999]]).extentMinor([[-180,-80.000001],[180,80.000001]])}function Ec(t){return t}var kc,Cc,Pc,zc,Rc=Ha(),Lc=Ha(),Dc={point:pu,lineStart:pu,lineEnd:pu,polygonStart:function(){Dc.lineStart=Uc,Dc.lineEnd=Yc},polygonEnd:function(){Dc.lineStart=Dc.lineEnd=Dc.point=pu,Rc.add(Ka(Lc)),Lc.reset()},result:function(){var t=Rc/2;return Rc.reset(),t}};function Uc(){Dc.point=qc}function qc(t,n){Dc.point=Oc,kc=Pc=t,Cc=zc=n}function Oc(t,n){Lc.add(zc*t-Pc*n),Pc=t,zc=n}function Yc(){Oc(kc,Cc)}var Bc=1/0,Fc=Bc,Ic=-Bc,Hc=Ic,jc={point:function(t,n){t<Bc&&(Bc=t);t>Ic&&(Ic=t);n<Fc&&(Fc=n);n>Hc&&(Hc=n)},lineStart:pu,lineEnd:pu,polygonStart:pu,polygonEnd:pu,result:function(){var t=[[Bc,Fc],[Ic,Hc]];return Ic=Hc=-(Fc=Bc=1/0),t}};var Xc,Gc,Vc,$c,Wc=0,Zc=0,Qc=0,Jc=0,Kc=0,ts=0,ns=0,es=0,rs=0,is={point:os,lineStart:as,lineEnd:cs,polygonStart:function(){is.lineStart=ss,is.lineEnd=ls},polygonEnd:function(){is.point=os,is.lineStart=as,is.lineEnd=cs},result:function(){var t=rs?[ns/rs,es/rs]:ts?[Jc/ts,Kc/ts]:Qc?[Wc/Qc,Zc/Qc]:[NaN,NaN];return Wc=Zc=Qc=Jc=Kc=ts=ns=es=rs=0,t}};function os(t,n){Wc+=t,Zc+=n,++Qc}function as(){is.point=us}function us(t,n){is.point=fs,os(Vc=t,$c=n)}function fs(t,n){var e=t-Vc,r=n-$c,i=cu(e*e+r*r);Jc+=i*(Vc+t)/2,Kc+=i*($c+n)/2,ts+=i,os(Vc=t,$c=n)}function cs(){is.point=os}function ss(){is.point=hs}function ls(){ds(Xc,Gc)}function hs(t,n){is.point=ds,os(Xc=Vc=t,Gc=$c=n)}function ds(t,n){var e=t-Vc,r=n-$c,i=cu(e*e+r*r);Jc+=i*(Vc+t)/2,Kc+=i*($c+n)/2,ts+=i,ns+=(i=$c*t-Vc*n)*(Vc+t),es+=i*($c+n),rs+=3*i,os(Vc=t,$c=n)}function ps(t){this._context=t}ps.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,Za)}},result:pu};var vs,gs,ys,_s,bs,ms=Ha(),xs={point:pu,lineStart:function(){xs.point=ws},lineEnd:function(){vs&&Ms(gs,ys),xs.point=pu},polygonStart:function(){vs=!0},polygonEnd:function(){vs=null},result:function(){var t=+ms;return ms.reset(),t}};function ws(t,n){xs.point=Ms,gs=_s=t,ys=bs=n}function Ms(t,n){_s-=t,bs-=n,ms.add(cu(_s*_s+bs*bs)),_s=t,bs=n}function As(){this._string=[]}function Ts(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}function Ns(t){return function(n){var e=new Ss;for(var r in t)e[r]=t[r];return e.stream=n,e}}function Ss(){}function Es(t,n,e){var r=t.clipExtent&&t.clipExtent();return t.scale(150).translate([0,0]),null!=r&&t.clipExtent(null),mu(e,t.stream(jc)),n(jc.result()),null!=r&&t.clipExtent(r),t}function ks(t,n,e){return Es(t,(function(e){var r=n[1][0]-n[0][0],i=n[1][1]-n[0][1],o=Math.min(r/(e[1][0]-e[0][0]),i/(e[1][1]-e[0][1])),a=+n[0][0]+(r-o*(e[1][0]+e[0][0]))/2,u=+n[0][1]+(i-o*(e[1][1]+e[0][1]))/2;t.scale(150*o).translate([a,u])}),e)}function Cs(t,n,e){return ks(t,[[0,0],n],e)}function Ps(t,n,e){return Es(t,(function(e){var r=+n,i=r/(e[1][0]-e[0][0]),o=(r-i*(e[1][0]+e[0][0]))/2,a=-i*e[0][1];t.scale(150*i).translate([o,a])}),e)}function zs(t,n,e){return Es(t,(function(e){var r=+n,i=r/(e[1][1]-e[0][1]),o=-i*e[0][0],a=(r-i*(e[1][1]+e[0][1]))/2;t.scale(150*i).translate([o,a])}),e)}As.prototype={_radius:4.5,_circle:Ts(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=Ts(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}},Ss.prototype={constructor:Ss,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var Rs=eu(30*Ja);function Ls(t,n){return+n?function(t,n){function e(r,i,o,a,u,f,c,s,l,h,d,p,v,g){var y=c-r,_=s-i,b=y*y+_*_;if(b>4*n&&v--){var m=a+h,x=u+d,w=f+p,M=cu(m*m+x*x+w*w),A=hu(w/=M),T=Ka(Ka(w)-1)<1e-6||Ka(o-l)<1e-6?(o+l)/2:nu(x,m),N=t(T,A),S=N[0],E=N[1],k=S-r,C=E-i,P=_*k-y*C;(P*P/b>n||Ka((y*k+_*C)/b-.5)>.3||a*h+u*d+f*p<Rs)&&(e(r,i,o,a,u,f,S,E,T,m/=M,x/=M,w,v,g),g.point(S,E),e(S,E,T,m,x,w,c,s,l,h,d,p,v,g))}}return function(n){var r,i,o,a,u,f,c,s,l,h,d,p,v={point:g,lineStart:y,lineEnd:b,polygonStart:function(){n.polygonStart(),v.lineStart=m},polygonEnd:function(){n.polygonEnd(),v.lineStart=y}};function g(e,r){e=t(e,r),n.point(e[0],e[1])}function y(){s=NaN,v.point=_,n.lineStart()}function _(r,i){var o=Lu([r,i]),a=t(r,i);e(s,l,c,h,d,p,s=a[0],l=a[1],c=r,h=o[0],d=o[1],p=o[2],16,n),n.point(s,l)}function b(){v.point=g,n.lineEnd()}function m(){y(),v.point=x,v.lineEnd=w}function x(t,n){_(r=t,n),i=s,o=l,a=h,u=d,f=p,v.point=_}function w(){e(s,l,c,h,d,p,i,o,r,a,u,f,16,n),v.lineEnd=b,b()}return v}}(t,n):function(t){return Ns({point:function(n,e){n=t(n,e),this.stream.point(n[0],n[1])}})}(t)}var Ds=Ns({point:function(t,n){this.stream.point(t*Ja,n*Ja)}});function Us(t,n,e){function r(r,i){return[n+t*r,e-t*i]}return r.invert=function(r,i){return[(r-n)/t,(e-i)/t]},r}function qs(t,n,e,r){var i=eu(r),o=uu(r),a=i*t,u=o*t,f=i/t,c=o/t,s=(o*e-i*n)/t,l=(o*n+i*e)/t;function h(t,r){return[a*t-u*r+n,e-u*t-a*r]}return h.invert=function(t,n){return[f*t-c*n+s,l-c*t-f*n]},h}function Os(t){return Ys((function(){return t}))()}function Ys(t){var n,e,r,i,o,a,u,f,c,s,l=150,h=480,d=250,p=0,v=0,g=0,y=0,_=0,b=0,m=null,x=ec,w=null,M=Ec,A=.5;function T(t){return f(t[0]*Ja,t[1]*Ja)}function N(t){return(t=f.invert(t[0],t[1]))&&[t[0]*Qa,t[1]*Qa]}function S(){var t=qs(l,0,0,b).apply(null,n(p,v)),r=(b?qs:Us)(l,h-t[0],d-t[1],b);return e=Yf(g,y,_),u=qf(n,r),f=qf(e,u),a=Ls(u,A),E()}function E(){return c=s=null,T}return T.stream=function(t){return c&&s===t?c:c=Ds(function(t){return Ns({point:function(n,e){var r=t(n,e);return this.stream.point(r[0],r[1])}})}(e)(x(a(M(s=t)))))},T.preclip=function(t){return arguments.length?(x=t,m=void 0,E()):x},T.postclip=function(t){return arguments.length?(M=t,w=r=i=o=null,E()):M},T.clipAngle=function(t){return arguments.length?(x=+t?rc(m=t*Ja):(m=null,ec),E()):m*Qa},T.clipExtent=function(t){return arguments.length?(M=null==t?(w=r=i=o=null,Ec):ic(w=+t[0][0],r=+t[0][1],i=+t[1][0],o=+t[1][1]),E()):null==w?null:[[w,r],[i,o]]},T.scale=function(t){return arguments.length?(l=+t,S()):l},T.translate=function(t){return arguments.length?(h=+t[0],d=+t[1],S()):[h,d]},T.center=function(t){return arguments.length?(p=t[0]%360*Ja,v=t[1]%360*Ja,S()):[p*Qa,v*Qa]},T.rotate=function(t){return arguments.length?(g=t[0]%360*Ja,y=t[1]%360*Ja,_=t.length>2?t[2]%360*Ja:0,S()):[g*Qa,y*Qa,_*Qa]},T.angle=function(t){return arguments.length?(b=t%360*Ja,S()):b*Qa},T.precision=function(t){return arguments.length?(a=Ls(u,A=t*t),E()):cu(A)},T.fitExtent=function(t,n){return ks(T,t,n)},T.fitSize=function(t,n){return Cs(T,t,n)},T.fitWidth=function(t,n){return Ps(T,t,n)},T.fitHeight=function(t,n){return zs(T,t,n)},function(){return n=t.apply(this,arguments),T.invert=n.invert&&N,S()}}function Bs(t){var n=0,e=Va/3,r=Ys(t),i=r(n,e);return i.parallels=function(t){return arguments.length?r(n=t[0]*Ja,e=t[1]*Ja):[n*Qa,e*Qa]},i}function Fs(t,n){var e=uu(t),r=(e+uu(n))/2;if(Ka(r)<1e-6)return function(t){var n=eu(t);function e(t,e){return[t*n,uu(e)/n]}return e.invert=function(t,e){return[t/n,hu(e*n)]},e}(t);var i=1+e*(2*r-e),o=cu(i)/r;function a(t,n){var e=cu(i-2*r*uu(n))/r;return[e*uu(t*=r),o-e*eu(t)]}return a.invert=function(t,n){var e=o-n;return[nu(t,Ka(e))/r*fu(e),hu((i-(t*t+e*e)*r*r)/(2*r))]},a}function Is(){return Bs(Fs).scale(155.424).center([0,33.6442])}function Hs(){return Is().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])}function js(t){return function(n,e){var r=eu(n),i=eu(e),o=t(r*i);return[o*i*uu(n),o*uu(e)]}}function Xs(t){return function(n,e){var r=cu(n*n+e*e),i=t(r),o=uu(i),a=eu(i);return[nu(n*o,r*a),hu(r&&e*o/r)]}}var Gs=js((function(t){return cu(2/(1+t))}));Gs.invert=Xs((function(t){return 2*hu(t/2)}));var Vs=js((function(t){return(t=lu(t))&&t/uu(t)}));function $s(t,n){return[t,ou(su(($a+n)/2))]}function Ws(t){var n,e,r,i=Os(t),o=i.center,a=i.scale,u=i.translate,f=i.clipExtent,c=null;function s(){var o=Va*a(),u=i(Hf(i.rotate()).invert([0,0]));return f(null==c?[[u[0]-o,u[1]-o],[u[0]+o,u[1]+o]]:t===$s?[[Math.max(u[0]-o,c),n],[Math.min(u[0]+o,e),r]]:[[c,Math.max(u[1]-o,n)],[e,Math.min(u[1]+o,r)]])}return i.scale=function(t){return arguments.length?(a(t),s()):a()},i.translate=function(t){return arguments.length?(u(t),s()):u()},i.center=function(t){return arguments.length?(o(t),s()):o()},i.clipExtent=function(t){return arguments.length?(null==t?c=n=e=r=null:(c=+t[0][0],n=+t[0][1],e=+t[1][0],r=+t[1][1]),s()):null==c?null:[[c,n],[e,r]]},s()}function Zs(t){return su(($a+t)/2)}function Qs(t,n){var e=eu(t),r=t===n?uu(t):ou(e/eu(n))/ou(Zs(n)/Zs(t)),i=e*au(Zs(t),r)/r;if(!r)return $s;function o(t,n){i>0?n<1e-6-$a&&(n=1e-6-$a):n>$a-1e-6&&(n=$a-1e-6);var e=i/au(Zs(n),r);return[e*uu(r*t),i-e*eu(r*t)]}return o.invert=function(t,n){var e=i-n,o=fu(r)*cu(t*t+e*e);return[nu(t,Ka(e))/r*fu(e),2*tu(au(i/o,1/r))-$a]},o}function Js(t,n){return[t,n]}function Ks(t,n){var e=eu(t),r=t===n?uu(t):(e-eu(n))/(n-t),i=e/r+t;if(Ka(r)<1e-6)return Js;function o(t,n){var e=i-n,o=r*t;return[e*uu(o),i-e*eu(o)]}return o.invert=function(t,n){var e=i-n;return[nu(t,Ka(e))/r*fu(e),i-fu(r)*cu(t*t+e*e)]},o}Vs.invert=Xs((function(t){return t})),$s.invert=function(t,n){return[t,2*tu(iu(n))-$a]},Js.invert=Js;var tl=1.340264,nl=-.081106,el=893e-6,rl=.003796,il=cu(3)/2;function ol(t,n){var e=hu(il*uu(n)),r=e*e,i=r*r*r;return[t*eu(e)/(il*(tl+3*nl*r+i*(7*el+9*rl*r))),e*(tl+nl*r+i*(el+rl*r))]}function al(t,n){var e=eu(n),r=eu(t)*e;return[e*uu(t)/r,uu(n)/r]}function ul(t,n,e,r){return 1===t&&1===n&&0===e&&0===r?Ec:Ns({point:function(i,o){this.stream.point(i*t+e,o*n+r)}})}function fl(t,n){var e=n*n,r=e*e;return[t*(.8707-.131979*e+r*(r*(.003971*e-.001529*r)-.013791)),n*(1.007226+e*(.015085+r*(.028874*e-.044475-.005916*r)))]}function cl(t,n){return[eu(n)*uu(t),uu(n)]}function sl(t,n){var e=eu(n),r=1+eu(t)*e;return[e*uu(t)/r,uu(n)/r]}function ll(t,n){return[ou(su(($a+n)/2)),-t]}function hl(t,n){return t.parent===n.parent?1:2}function dl(t,n){return t+n.x}function pl(t,n){return Math.max(t,n.y)}function vl(t){var n=0,e=t.children,r=e&&e.length;if(r)for(;--r>=0;)n+=e[r].value;else n=1;t.value=n}function gl(t,n){var e,r,i,o,a,u=new ml(t),f=+t.value&&(u.value=t.value),c=[u];for(null==n&&(n=yl);e=c.pop();)if(f&&(e.value=+e.data.value),(i=n(e.data))&&(a=i.length))for(e.children=new Array(a),o=a-1;o>=0;--o)c.push(r=e.children[o]=new ml(i[o])),r.parent=e,r.depth=e.depth+1;return u.eachBefore(bl)}function yl(t){return t.children}function _l(t){t.data=t.data.data}function bl(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function ml(t){this.data=t,this.depth=this.height=0,this.parent=null}ol.invert=function(t,n){for(var e,r=n,i=r*r,o=i*i*i,a=0;a<12&&(o=(i=(r-=e=(r*(tl+nl*i+o*(el+rl*i))-n)/(tl+3*nl*i+o*(7*el+9*rl*i)))*r)*i*i,!(Ka(e)<1e-12));++a);return[il*t*(tl+3*nl*i+o*(7*el+9*rl*i))/eu(r),hu(uu(r)/il)]},al.invert=Xs(tu),fl.invert=function(t,n){var e,r=n,i=25;do{var o=r*r,a=o*o;r-=e=(r*(1.007226+o*(.015085+a*(.028874*o-.044475-.005916*a)))-n)/(1.007226+o*(.045255+a*(.259866*o-.311325-.005916*11*a)))}while(Ka(e)>1e-6&&--i>0);return[t/(.8707+(o=r*r)*(o*(o*o*o*(.003971-.001529*o)-.013791)-.131979)),r]},cl.invert=Xs(hu),sl.invert=Xs((function(t){return 2*tu(t)})),ll.invert=function(t,n){return[-n,2*tu(iu(t))-$a]},ml.prototype=gl.prototype={constructor:ml,count:function(){return this.eachAfter(vl)},each:function(t){var n,e,r,i,o=this,a=[o];do{for(n=a.reverse(),a=[];o=n.pop();)if(t(o),e=o.children)for(r=0,i=e.length;r<i;++r)a.push(e[r])}while(a.length);return this},eachAfter:function(t){for(var n,e,r,i=this,o=[i],a=[];i=o.pop();)if(a.push(i),n=i.children)for(e=0,r=n.length;e<r;++e)o.push(n[e]);for(;i=a.pop();)t(i);return this},eachBefore:function(t){for(var n,e,r=this,i=[r];r=i.pop();)if(t(r),n=r.children)for(e=n.length-1;e>=0;--e)i.push(n[e]);return this},sum:function(t){return this.eachAfter((function(n){for(var e=+t(n.data)||0,r=n.children,i=r&&r.length;--i>=0;)e+=r[i].value;n.value=e}))},sort:function(t){return this.eachBefore((function(n){n.children&&n.children.sort(t)}))},path:function(t){for(var n=this,e=function(t,n){if(t===n)return t;var e=t.ancestors(),r=n.ancestors(),i=null;t=e.pop(),n=r.pop();for(;t===n;)i=t,t=e.pop(),n=r.pop();return i}(n,t),r=[n];n!==e;)n=n.parent,r.push(n);for(var i=r.length;t!==e;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},descendants:function(){var t=[];return this.each((function(n){t.push(n)})),t},leaves:function(){var t=[];return this.eachBefore((function(n){n.children||t.push(n)})),t},links:function(){var t=this,n=[];return t.each((function(e){e!==t&&n.push({source:e.parent,target:e})})),n},copy:function(){return gl(this).eachBefore(_l)}};var xl=Array.prototype.slice;function wl(t){for(var n,e,r=0,i=(t=function(t){for(var n,e,r=t.length;r;)e=Math.random()*r--|0,n=t[r],t[r]=t[e],t[e]=n;return t}(xl.call(t))).length,o=[];r<i;)n=t[r],e&&Tl(e,n)?++r:(e=Sl(o=Ml(o,n)),r=0);return e}function Ml(t,n){var e,r;if(Nl(n,t))return[n];for(e=0;e<t.length;++e)if(Al(n,t[e])&&Nl(El(t[e],n),t))return[t[e],n];for(e=0;e<t.length-1;++e)for(r=e+1;r<t.length;++r)if(Al(El(t[e],t[r]),n)&&Al(El(t[e],n),t[r])&&Al(El(t[r],n),t[e])&&Nl(kl(t[e],t[r],n),t))return[t[e],t[r],n];throw new Error}function Al(t,n){var e=t.r-n.r,r=n.x-t.x,i=n.y-t.y;return e<0||e*e<r*r+i*i}function Tl(t,n){var e=t.r-n.r+1e-6,r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function Nl(t,n){for(var e=0;e<n.length;++e)if(!Tl(t,n[e]))return!1;return!0}function Sl(t){switch(t.length){case 1:return function(t){return{x:t.x,y:t.y,r:t.r}}(t[0]);case 2:return El(t[0],t[1]);case 3:return kl(t[0],t[1],t[2])}}function El(t,n){var e=t.x,r=t.y,i=t.r,o=n.x,a=n.y,u=n.r,f=o-e,c=a-r,s=u-i,l=Math.sqrt(f*f+c*c);return{x:(e+o+f/l*s)/2,y:(r+a+c/l*s)/2,r:(l+i+u)/2}}function kl(t,n,e){var r=t.x,i=t.y,o=t.r,a=n.x,u=n.y,f=n.r,c=e.x,s=e.y,l=e.r,h=r-a,d=r-c,p=i-u,v=i-s,g=f-o,y=l-o,_=r*r+i*i-o*o,b=_-a*a-u*u+f*f,m=_-c*c-s*s+l*l,x=d*p-h*v,w=(p*m-v*b)/(2*x)-r,M=(v*g-p*y)/x,A=(d*b-h*m)/(2*x)-i,T=(h*y-d*g)/x,N=M*M+T*T-1,S=2*(o+w*M+A*T),E=w*w+A*A-o*o,k=-(N?(S+Math.sqrt(S*S-4*N*E))/(2*N):E/S);return{x:r+w+M*k,y:i+A+T*k,r:k}}function Cl(t,n,e){var r,i,o,a,u=t.x-n.x,f=t.y-n.y,c=u*u+f*f;c?(i=n.r+e.r,i*=i,a=t.r+e.r,i>(a*=a)?(r=(c+a-i)/(2*c),o=Math.sqrt(Math.max(0,a/c-r*r)),e.x=t.x-r*u-o*f,e.y=t.y-r*f+o*u):(r=(c+i-a)/(2*c),o=Math.sqrt(Math.max(0,i/c-r*r)),e.x=n.x+r*u-o*f,e.y=n.y+r*f+o*u)):(e.x=n.x+e.r,e.y=n.y)}function Pl(t,n){var e=t.r+n.r-1e-6,r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function zl(t){var n=t._,e=t.next._,r=n.r+e.r,i=(n.x*e.r+e.x*n.r)/r,o=(n.y*e.r+e.y*n.r)/r;return i*i+o*o}function Rl(t){this._=t,this.next=null,this.previous=null}function Ll(t){if(!(i=t.length))return 0;var n,e,r,i,o,a,u,f,c,s,l;if((n=t[0]).x=0,n.y=0,!(i>1))return n.r;if(e=t[1],n.x=-e.r,e.x=n.r,e.y=0,!(i>2))return n.r+e.r;Cl(e,n,r=t[2]),n=new Rl(n),e=new Rl(e),r=new Rl(r),n.next=r.previous=e,e.next=n.previous=r,r.next=e.previous=n;t:for(u=3;u<i;++u){Cl(n._,e._,r=t[u]),r=new Rl(r),f=e.next,c=n.previous,s=e._.r,l=n._.r;do{if(s<=l){if(Pl(f._,r._)){e=f,n.next=e,e.previous=n,--u;continue t}s+=f._.r,f=f.next}else{if(Pl(c._,r._)){(n=c).next=e,e.previous=n,--u;continue t}l+=c._.r,c=c.previous}}while(f!==c.next);for(r.previous=n,r.next=e,n.next=e.previous=e=r,o=zl(n);(r=r.next)!==e;)(a=zl(r))<o&&(n=r,o=a);e=n.next}for(n=[e._],r=e;(r=r.next)!==e;)n.push(r._);for(r=wl(n),u=0;u<i;++u)(n=t[u]).x-=r.x,n.y-=r.y;return r.r}function Dl(t){return null==t?null:Ul(t)}function Ul(t){if("function"!=typeof t)throw new Error;return t}function ql(){return 0}function Ol(t){return function(){return t}}function Yl(t){return Math.sqrt(t.value)}function Bl(t){return function(n){n.children||(n.r=Math.max(0,+t(n)||0))}}function Fl(t,n){return function(e){if(r=e.children){var r,i,o,a=r.length,u=t(e)*n||0;if(u)for(i=0;i<a;++i)r[i].r+=u;if(o=Ll(r),u)for(i=0;i<a;++i)r[i].r-=u;e.r=o+u}}}function Il(t){return function(n){var e=n.parent;n.r*=t,e&&(n.x=e.x+t*n.x,n.y=e.y+t*n.y)}}function Hl(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)}function jl(t,n,e,r,i){for(var o,a=t.children,u=-1,f=a.length,c=t.value&&(r-n)/t.value;++u<f;)(o=a[u]).y0=e,o.y1=i,o.x0=n,o.x1=n+=o.value*c}var Xl={depth:-1},Gl={};function Vl(t){return t.id}function $l(t){return t.parentId}function Wl(t,n){return t.parent===n.parent?1:2}function Zl(t){var n=t.children;return n?n[0]:t.t}function Ql(t){var n=t.children;return n?n[n.length-1]:t.t}function Jl(t,n,e){var r=e/(n.i-t.i);n.c-=r,n.s+=e,t.c+=r,n.z+=e,n.m+=e}function Kl(t,n,e){return t.a.parent===n.parent?t.a:e}function th(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}function nh(t,n,e,r,i){for(var o,a=t.children,u=-1,f=a.length,c=t.value&&(i-e)/t.value;++u<f;)(o=a[u]).x0=n,o.x1=r,o.y0=e,o.y1=e+=o.value*c}th.prototype=Object.create(ml.prototype);var eh=(1+Math.sqrt(5))/2;function rh(t,n,e,r,i,o){for(var a,u,f,c,s,l,h,d,p,v,g,y=[],_=n.children,b=0,m=0,x=_.length,w=n.value;b<x;){f=i-e,c=o-r;do{s=_[m++].value}while(!s&&m<x);for(l=h=s,g=s*s*(v=Math.max(c/f,f/c)/(w*t)),p=Math.max(h/g,g/l);m<x;++m){if(s+=u=_[m].value,u<l&&(l=u),u>h&&(h=u),g=s*s*v,(d=Math.max(h/g,g/l))>p){s-=u;break}p=d}y.push(a={value:s,dice:f<c,children:_.slice(b,m)}),a.dice?jl(a,e,r,i,w?r+=c*s/w:o):nh(a,e,r,w?e+=f*s/w:i,o),w-=s,b=m}return y}var ih=function t(n){function e(t,e,r,i,o){rh(n,t,e,r,i,o)}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(eh);var oh=function t(n){function e(t,e,r,i,o){if((a=t._squarify)&&a.ratio===n)for(var a,u,f,c,s,l=-1,h=a.length,d=t.value;++l<h;){for(f=(u=a[l]).children,c=u.value=0,s=f.length;c<s;++c)u.value+=f[c].value;u.dice?jl(u,e,r,i,r+=(o-r)*u.value/d):nh(u,e,r,e+=(i-e)*u.value/d,o),d-=u.value}else t._squarify=a=rh(n,t,e,r,i,o),a.ratio=n}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(eh);function ah(t,n,e){return(n[0]-t[0])*(e[1]-t[1])-(n[1]-t[1])*(e[0]-t[0])}function uh(t,n){return t[0]-n[0]||t[1]-n[1]}function fh(t){for(var n=t.length,e=[0,1],r=2,i=2;i<n;++i){for(;r>1&&ah(t[e[r-2]],t[e[r-1]],t[i])<=0;)--r;e[r++]=i}return e.slice(0,r)}function ch(){return Math.random()}var sh=function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(ch),lh=function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var o;if(null!=r)o=r,r=null;else do{r=2*n()-1,o=2*n()-1,i=r*r+o*o}while(!i||i>1);return t+e*o*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(ch),hh=function t(n){function e(){var t=lh.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(ch),dh=function t(n){function e(t){return function(){for(var e=0,r=0;r<t;++r)e+=n();return e}}return e.source=t,e}(ch),ph=function t(n){function e(t){var e=dh.source(n)(t);return function(){return e()/t}}return e.source=t,e}(ch),vh=function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(ch),gh=Array.prototype,yh=gh.map,_h=gh.slice,bh={name:"implicit"};function mh(t){var n=go(),e=[],r=bh;function i(i){var o=i+"",a=n.get(o);if(!a){if(r!==bh)return r;n.set(o,a=e.push(i))}return t[(a-1)%t.length]}return t=null==t?[]:_h.call(t),i.domain=function(t){if(!arguments.length)return e.slice();e=[],n=go();for(var r,o,a=-1,u=t.length;++a<u;)n.has(o=(r=t[a])+"")||n.set(o,e.push(r));return i},i.range=function(n){return arguments.length?(t=_h.call(n),i):t.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return mh().domain(e).range(t).unknown(r)},i}function xh(){var t,n,e=mh().unknown(void 0),r=e.domain,i=e.range,o=[0,1],a=!1,u=0,f=0,c=.5;function s(){var e=r().length,s=o[1]<o[0],l=o[s-0],h=o[1-s];t=(h-l)/Math.max(1,e-u+2*f),a&&(t=Math.floor(t)),l+=(h-l-t*(e-u))*c,n=t*(1-u),a&&(l=Math.round(l),n=Math.round(n));var d=g(e).map((function(n){return l+t*n}));return i(s?d.reverse():d)}return delete e.unknown,e.domain=function(t){return arguments.length?(r(t),s()):r()},e.range=function(t){return arguments.length?(o=[+t[0],+t[1]],s()):o.slice()},e.rangeRound=function(t){return o=[+t[0],+t[1]],a=!0,s()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(a=!!t,s()):a},e.padding=function(t){return arguments.length?(u=f=Math.max(0,Math.min(1,t)),s()):u},e.paddingInner=function(t){return arguments.length?(u=Math.max(0,Math.min(1,t)),s()):u},e.paddingOuter=function(t){return arguments.length?(f=Math.max(0,Math.min(1,t)),s()):f},e.align=function(t){return arguments.length?(c=Math.max(0,Math.min(1,t)),s()):c},e.copy=function(){return xh().domain(r()).range(o).round(a).paddingInner(u).paddingOuter(f).align(c)},s()}function wh(t){return function(){return t}}function Mh(t){return+t}var Ah=[0,1];function Th(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:wh(n)}function Nh(t,n,e,r){var i=t[0],o=t[1],a=n[0],u=n[1];return o<i?(i=e(o,i),a=r(u,a)):(i=e(i,o),a=r(a,u)),function(t){return a(i(t))}}function Sh(t,n,e,r){var o=Math.min(t.length,n.length)-1,a=new Array(o),u=new Array(o),f=-1;for(t[o]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++f<o;)a[f]=e(t[f],t[f+1]),u[f]=r(n[f],n[f+1]);return function(n){var e=i(t,n,1,o)-1;return u[e](a[e](n))}}function Eh(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp())}function kh(t,n){var e,r,i,o=Ah,a=Ah,u=Oe,f=!1;function c(){return e=Math.min(o.length,a.length)>2?Sh:Nh,r=i=null,s}function s(n){return(r||(r=e(o,a,f?function(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=n?0:t>=e?1:r(t)}}}(t):t,u)))(+n)}return s.invert=function(t){return(i||(i=e(a,o,Th,f?function(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=0?n:t>=1?e:r(t)}}}(n):n)))(+t)},s.domain=function(t){return arguments.length?(o=yh.call(t,Mh),c()):o.slice()},s.range=function(t){return arguments.length?(a=_h.call(t),c()):a.slice()},s.rangeRound=function(t){return a=_h.call(t),u=Ye,c()},s.clamp=function(t){return arguments.length?(f=!!t,c()):f},s.interpolate=function(t){return arguments.length?(u=t,c()):u},c()}function Ch(n){var e=n.domain;return n.ticks=function(t){var n=e();return m(n[0],n[n.length-1],null==t?10:t)},n.tickFormat=function(n,r){return function(n,e,r){var i,o=n[0],a=n[n.length-1],u=w(o,a,null==e?10:e);switch((r=Pa(null==r?",f":r)).type){case"s":var f=Math.max(Math.abs(o),Math.abs(a));return null!=r.precision||isNaN(i=Fa(u,f))||(r.precision=i),t.formatPrefix(r,f);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=Ia(u,Math.max(Math.abs(o),Math.abs(a))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=Ba(u))||(r.precision=i-2*("%"===r.type))}return t.format(r)}(e(),n,r)},n.nice=function(t){null==t&&(t=10);var r,i=e(),o=0,a=i.length-1,u=i[o],f=i[a];return f<u&&(r=u,u=f,f=r,r=o,o=a,a=r),(r=x(u,f,t))>0?r=x(u=Math.floor(u/r)*r,f=Math.ceil(f/r)*r,t):r<0&&(r=x(u=Math.ceil(u*r)/r,f=Math.floor(f*r)/r,t)),r>0?(i[o]=Math.floor(u/r)*r,i[a]=Math.ceil(f/r)*r,e(i)):r<0&&(i[o]=Math.ceil(u*r)/r,i[a]=Math.floor(f*r)/r,e(i)),n},n}function Ph(t,n){var e,r=0,i=(t=t.slice()).length-1,o=t[r],a=t[i];return a<o&&(e=r,r=i,i=e,e=o,o=a,a=e),t[r]=n.floor(o),t[i]=n.ceil(a),t}function zh(t,n){return(n=Math.log(n/t))?function(e){return Math.log(e/t)/n}:wh(n)}function Rh(t,n){return t<0?function(e){return-Math.pow(-n,e)*Math.pow(-t,1-e)}:function(e){return Math.pow(n,e)*Math.pow(t,1-e)}}function Lh(t){return isFinite(t)?+("1e"+t):t<0?0:t}function Dh(t){return 10===t?Lh:t===Math.E?Math.exp:function(n){return Math.pow(t,n)}}function Uh(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(n){return Math.log(n)/t})}function qh(t){return function(n){return-t(-n)}}function Oh(t,n){return t<0?-Math.pow(-t,n):Math.pow(t,n)}function Yh(){var t=1,n=kh((function(n,e){return(e=Oh(e,t)-(n=Oh(n,t)))?function(r){return(Oh(r,t)-n)/e}:wh(e)}),(function(n,e){return e=Oh(e,t)-(n=Oh(n,t)),function(r){return Oh(n+e*r,1/t)}})),e=n.domain;return n.exponent=function(n){return arguments.length?(t=+n,e(e())):t},n.copy=function(){return Eh(n,Yh().exponent(t))},Ch(n)}var Bh=new Date,Fh=new Date;function Ih(t,n,e,r){function i(n){return t(n=new Date(+n)),n}return i.floor=i,i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var a,u=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return u;do{u.push(a=new Date(+e)),n(e,o),t(e)}while(a<e&&e<r);return u},i.filter=function(e){return Ih((function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););}))},e&&(i.count=function(n,r){return Bh.setTime(+n),Fh.setTime(+r),t(Bh),t(Fh),Math.floor(e(Bh,Fh))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var Hh=Ih((function(){}),(function(t,n){t.setTime(+t+n)}),(function(t,n){return n-t}));Hh.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Ih((function(n){n.setTime(Math.floor(n/t)*t)}),(function(n,e){n.setTime(+n+e*t)}),(function(n,e){return(e-n)/t})):Hh:null};var jh=Hh.range,Xh=Ih((function(t){t.setTime(1e3*Math.floor(t/1e3))}),(function(t,n){t.setTime(+t+1e3*n)}),(function(t,n){return(n-t)/1e3}),(function(t){return t.getUTCSeconds()})),Gh=Xh.range,Vh=Ih((function(t){t.setTime(6e4*Math.floor(t/6e4))}),(function(t,n){t.setTime(+t+6e4*n)}),(function(t,n){return(n-t)/6e4}),(function(t){return t.getMinutes()})),$h=Vh.range,Wh=Ih((function(t){var n=6e4*t.getTimezoneOffset()%36e5;n<0&&(n+=36e5),t.setTime(36e5*Math.floor((+t-n)/36e5)+n)}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getHours()})),Zh=Wh.range,Qh=Ih((function(t){t.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+n)}),(function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/864e5}),(function(t){return t.getDate()-1})),Jh=Qh.range;function Kh(t){return Ih((function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+7*n)}),(function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/6048e5}))}var td=Kh(0),nd=Kh(1),ed=Kh(2),rd=Kh(3),id=Kh(4),od=Kh(5),ad=Kh(6),ud=td.range,fd=nd.range,cd=ed.range,sd=rd.range,ld=id.range,hd=od.range,dd=ad.range,pd=Ih((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,n){t.setMonth(t.getMonth()+n)}),(function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()})),vd=pd.range,gd=Ih((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n)}),(function(t,n){return n.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));gd.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Ih((function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)}),(function(n,e){n.setFullYear(n.getFullYear()+e*t)})):null};var yd=gd.range,_d=Ih((function(t){t.setUTCSeconds(0,0)}),(function(t,n){t.setTime(+t+6e4*n)}),(function(t,n){return(n-t)/6e4}),(function(t){return t.getUTCMinutes()})),bd=_d.range,md=Ih((function(t){t.setUTCMinutes(0,0,0)}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getUTCHours()})),xd=md.range,wd=Ih((function(t){t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+n)}),(function(t,n){return(n-t)/864e5}),(function(t){return t.getUTCDate()-1})),Md=wd.range;function Ad(t){return Ih((function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+7*n)}),(function(t,n){return(n-t)/6048e5}))}var Td=Ad(0),Nd=Ad(1),Sd=Ad(2),Ed=Ad(3),kd=Ad(4),Cd=Ad(5),Pd=Ad(6),zd=Td.range,Rd=Nd.range,Ld=Sd.range,Dd=Ed.range,Ud=kd.range,qd=Cd.range,Od=Pd.range,Yd=Ih((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCMonth(t.getUTCMonth()+n)}),(function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),Bd=Yd.range,Fd=Ih((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)}),(function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()}));Fd.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Ih((function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)}),(function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)})):null};var Id=Fd.range;function Hd(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function jd(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Xd(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}function Gd(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,a=t.shortDays,u=t.months,f=t.shortMonths,c=tp(i),s=np(i),l=tp(o),h=np(o),d=tp(a),p=np(a),v=tp(u),g=np(u),y=tp(f),_=np(f),b={a:function(t){return a[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return f[t.getMonth()]},B:function(t){return u[t.getMonth()]},c:null,d:xp,e:xp,f:Np,H:wp,I:Mp,j:Ap,L:Tp,m:Sp,M:Ep,p:function(t){return i[+(t.getHours()>=12)]},Q:ev,s:rv,S:kp,u:Cp,U:Pp,V:zp,w:Rp,W:Lp,x:null,X:null,y:Dp,Y:Up,Z:qp,"%":nv},m={a:function(t){return a[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return f[t.getUTCMonth()]},B:function(t){return u[t.getUTCMonth()]},c:null,d:Op,e:Op,f:Hp,H:Yp,I:Bp,j:Fp,L:Ip,m:jp,M:Xp,p:function(t){return i[+(t.getUTCHours()>=12)]},Q:ev,s:rv,S:Gp,u:Vp,U:$p,V:Wp,w:Zp,W:Qp,x:null,X:null,y:Jp,Y:Kp,Z:tv,"%":nv},x={a:function(t,n,e){var r=d.exec(n.slice(e));return r?(t.w=p[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=l.exec(n.slice(e));return r?(t.w=h[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=y.exec(n.slice(e));return r?(t.m=_[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=v.exec(n.slice(e));return r?(t.m=g[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return A(t,n,e,r)},d:lp,e:lp,f:yp,H:dp,I:dp,j:hp,L:gp,m:sp,M:pp,p:function(t,n,e){var r=c.exec(n.slice(e));return r?(t.p=s[r[0].toLowerCase()],e+r[0].length):-1},Q:bp,s:mp,S:vp,u:rp,U:ip,V:op,w:ep,W:ap,x:function(t,n,r){return A(t,e,n,r)},X:function(t,n,e){return A(t,r,n,e)},y:fp,Y:up,Z:cp,"%":_p};function w(t,n){return function(e){var r,i,o,a=[],u=-1,f=0,c=t.length;for(e instanceof Date||(e=new Date(+e));++u<c;)37===t.charCodeAt(u)&&(a.push(t.slice(f,u)),null!=(i=$d[r=t.charAt(++u)])?r=t.charAt(++u):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),a.push(r),f=u+1);return a.push(t.slice(f,u)),a.join("")}}function M(t,n){return function(e){var r,i,o=Xd(1900);if(A(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("p"in o&&(o.H=o.H%12+12*o.p),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=jd(Xd(o.y))).getUTCDay(),r=i>4||0===i?Nd.ceil(r):Nd(r),r=wd.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=n(Xd(o.y))).getDay(),r=i>4||0===i?nd.ceil(r):nd(r),r=Qh.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?jd(Xd(o.y)).getUTCDay():n(Xd(o.y)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,jd(o)):n(o)}}function A(t,n,e,r){for(var i,o,a=0,u=n.length,f=e.length;a<u;){if(r>=f)return-1;if(37===(i=n.charCodeAt(a++))){if(i=n.charAt(a++),!(o=x[i in $d?n.charAt(a++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return b.x=w(e,b),b.X=w(r,b),b.c=w(n,b),m.x=w(e,m),m.X=w(r,m),m.c=w(n,m),{format:function(t){var n=w(t+="",b);return n.toString=function(){return t},n},parse:function(t){var n=M(t+="",Hd);return n.toString=function(){return t},n},utcFormat:function(t){var n=w(t+="",m);return n.toString=function(){return t},n},utcParse:function(t){var n=M(t,jd);return n.toString=function(){return t},n}}}var Vd,$d={"-":"",_:" ",0:"0"},Wd=/^\s*\d+/,Zd=/^%/,Qd=/[\\^$*+?|[\]().{}]/g;function Jd(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function Kd(t){return t.replace(Qd,"\\$&")}function tp(t){return new RegExp("^(?:"+t.map(Kd).join("|")+")","i")}function np(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function ep(t,n,e){var r=Wd.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function rp(t,n,e){var r=Wd.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function ip(t,n,e){var r=Wd.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function op(t,n,e){var r=Wd.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function ap(t,n,e){var r=Wd.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function up(t,n,e){var r=Wd.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function fp(t,n,e){var r=Wd.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function cp(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function sp(t,n,e){var r=Wd.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function lp(t,n,e){var r=Wd.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function hp(t,n,e){var r=Wd.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function dp(t,n,e){var r=Wd.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function pp(t,n,e){var r=Wd.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function vp(t,n,e){var r=Wd.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function gp(t,n,e){var r=Wd.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function yp(t,n,e){var r=Wd.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function _p(t,n,e){var r=Zd.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function bp(t,n,e){var r=Wd.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function mp(t,n,e){var r=Wd.exec(n.slice(e));return r?(t.Q=1e3*+r[0],e+r[0].length):-1}function xp(t,n){return Jd(t.getDate(),n,2)}function wp(t,n){return Jd(t.getHours(),n,2)}function Mp(t,n){return Jd(t.getHours()%12||12,n,2)}function Ap(t,n){return Jd(1+Qh.count(gd(t),t),n,3)}function Tp(t,n){return Jd(t.getMilliseconds(),n,3)}function Np(t,n){return Tp(t,n)+"000"}function Sp(t,n){return Jd(t.getMonth()+1,n,2)}function Ep(t,n){return Jd(t.getMinutes(),n,2)}function kp(t,n){return Jd(t.getSeconds(),n,2)}function Cp(t){var n=t.getDay();return 0===n?7:n}function Pp(t,n){return Jd(td.count(gd(t),t),n,2)}function zp(t,n){var e=t.getDay();return t=e>=4||0===e?id(t):id.ceil(t),Jd(id.count(gd(t),t)+(4===gd(t).getDay()),n,2)}function Rp(t){return t.getDay()}function Lp(t,n){return Jd(nd.count(gd(t),t),n,2)}function Dp(t,n){return Jd(t.getFullYear()%100,n,2)}function Up(t,n){return Jd(t.getFullYear()%1e4,n,4)}function qp(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+Jd(n/60|0,"0",2)+Jd(n%60,"0",2)}function Op(t,n){return Jd(t.getUTCDate(),n,2)}function Yp(t,n){return Jd(t.getUTCHours(),n,2)}function Bp(t,n){return Jd(t.getUTCHours()%12||12,n,2)}function Fp(t,n){return Jd(1+wd.count(Fd(t),t),n,3)}function Ip(t,n){return Jd(t.getUTCMilliseconds(),n,3)}function Hp(t,n){return Ip(t,n)+"000"}function jp(t,n){return Jd(t.getUTCMonth()+1,n,2)}function Xp(t,n){return Jd(t.getUTCMinutes(),n,2)}function Gp(t,n){return Jd(t.getUTCSeconds(),n,2)}function Vp(t){var n=t.getUTCDay();return 0===n?7:n}function $p(t,n){return Jd(Td.count(Fd(t),t),n,2)}function Wp(t,n){var e=t.getUTCDay();return t=e>=4||0===e?kd(t):kd.ceil(t),Jd(kd.count(Fd(t),t)+(4===Fd(t).getUTCDay()),n,2)}function Zp(t){return t.getUTCDay()}function Qp(t,n){return Jd(Nd.count(Fd(t),t),n,2)}function Jp(t,n){return Jd(t.getUTCFullYear()%100,n,2)}function Kp(t,n){return Jd(t.getUTCFullYear()%1e4,n,4)}function tv(){return"+0000"}function nv(){return"%"}function ev(t){return+t}function rv(t){return Math.floor(+t/1e3)}function iv(n){return Vd=Gd(n),t.timeFormat=Vd.format,t.timeParse=Vd.parse,t.utcFormat=Vd.utcFormat,t.utcParse=Vd.utcParse,Vd}iv({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var ov=Date.prototype.toISOString?function(t){return t.toISOString()}:t.utcFormat("%Y-%m-%dT%H:%M:%S.%LZ");var av=+new Date("2000-01-01T00:00:00.000Z")?function(t){var n=new Date(t);return isNaN(n)?null:n}:t.utcParse("%Y-%m-%dT%H:%M:%S.%LZ");function uv(t){return new Date(t)}function fv(t){return t instanceof Date?+t:+new Date(+t)}function cv(t,n,r,i,o,a,u,f,c){var s=kh(Th,Re),l=s.invert,h=s.domain,d=c(".%L"),p=c(":%S"),v=c("%I:%M"),g=c("%I %p"),y=c("%a %d"),_=c("%b %d"),b=c("%B"),m=c("%Y"),x=[[u,1,1e3],[u,5,5e3],[u,15,15e3],[u,30,3e4],[a,1,6e4],[a,5,3e5],[a,15,9e5],[a,30,18e5],[o,1,36e5],[o,3,108e5],[o,6,216e5],[o,12,432e5],[i,1,864e5],[i,2,1728e5],[r,1,6048e5],[n,1,2592e6],[n,3,7776e6],[t,1,31536e6]];function M(e){return(u(e)<e?d:a(e)<e?p:o(e)<e?v:i(e)<e?g:n(e)<e?r(e)<e?y:_:t(e)<e?b:m)(e)}function A(n,r,i,o){if(null==n&&(n=10),"number"==typeof n){var a=Math.abs(i-r)/n,u=e((function(t){return t[2]})).right(x,a);u===x.length?(o=w(r/31536e6,i/31536e6,n),n=t):u?(o=(u=x[a/x[u-1][2]<x[u][2]/a?u-1:u])[1],n=u[0]):(o=Math.max(w(r,i,n),1),n=f)}return null==o?n:n.every(o)}return s.invert=function(t){return new Date(l(t))},s.domain=function(t){return arguments.length?h(yh.call(t,fv)):h().map(uv)},s.ticks=function(t,n){var e,r=h(),i=r[0],o=r[r.length-1],a=o<i;return a&&(e=i,i=o,o=e),e=(e=A(t,i,o,n))?e.range(i,o+1):[],a?e.reverse():e},s.tickFormat=function(t,n){return null==n?M:c(n)},s.nice=function(t,n){var e=h();return(t=A(t,e[0],e[e.length-1],n))?h(Ph(e,t)):s},s.copy=function(){return Eh(s,cv(t,n,r,i,o,a,u,f,c))},s}function sv(t){for(var n=t.length/6|0,e=new Array(n),r=0;r<n;)e[r]="#"+t.slice(6*r,6*++r);return e}var lv=sv("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),hv=sv("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),dv=sv("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),pv=sv("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),vv=sv("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),gv=sv("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),yv=sv("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),_v=sv("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),bv=sv("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");function mv(t){return ke(t[t.length-1])}var xv=new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(sv),wv=mv(xv),Mv=new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(sv),Av=mv(Mv),Tv=new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(sv),Nv=mv(Tv),Sv=new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(sv),Ev=mv(Sv),kv=new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(sv),Cv=mv(kv),Pv=new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(sv),zv=mv(Pv),Rv=new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(sv),Lv=mv(Rv),Dv=new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(sv),Uv=mv(Dv),qv=new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(sv),Ov=mv(qv),Yv=new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(sv),Bv=mv(Yv),Fv=new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(sv),Iv=mv(Fv),Hv=new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(sv),jv=mv(Hv),Xv=new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(sv),Gv=mv(Xv),Vv=new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(sv),$v=mv(Vv),Wv=new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(sv),Zv=mv(Wv),Qv=new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(sv),Jv=mv(Qv),Kv=new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(sv),tg=mv(Kv),ng=new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(sv),eg=mv(ng),rg=new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(sv),ig=mv(rg),og=new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(sv),ag=mv(og),ug=new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(sv),fg=mv(ug),cg=new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(sv),sg=mv(cg),lg=new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(sv),hg=mv(lg),dg=new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(sv),pg=mv(dg),vg=new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(sv),gg=mv(vg),yg=new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(sv),_g=mv(yg),bg=new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(sv),mg=mv(bg),xg=ur(ye(300,.5,0),ye(-240,.5,1)),wg=ur(ye(-100,.75,.35),ye(80,1.5,.8)),Mg=ur(ye(260,.75,.35),ye(80,1.5,.8)),Ag=ye();var Tg=Bn(),Ng=Math.PI/3,Sg=2*Math.PI/3;function Eg(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}}var kg=Eg(sv("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),Cg=Eg(sv("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),Pg=Eg(sv("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),zg=Eg(sv("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));function Rg(t){return function(){return t}}var Lg=Math.abs,Dg=Math.atan2,Ug=Math.cos,qg=Math.max,Og=Math.min,Yg=Math.sin,Bg=Math.sqrt,Fg=Math.PI,Ig=Fg/2,Hg=2*Fg;function jg(t){return t>1?0:t<-1?Fg:Math.acos(t)}function Xg(t){return t>=1?Ig:t<=-1?-Ig:Math.asin(t)}function Gg(t){return t.innerRadius}function Vg(t){return t.outerRadius}function $g(t){return t.startAngle}function Wg(t){return t.endAngle}function Zg(t){return t&&t.padAngle}function Qg(t,n,e,r,i,o,a,u){var f=e-t,c=r-n,s=a-i,l=u-o,h=(s*(n-o)-l*(t-i))/(l*f-s*c);return[t+h*f,n+h*c]}function Jg(t,n,e,r,i,o,a){var u=t-e,f=n-r,c=(a?o:-o)/Bg(u*u+f*f),s=c*f,l=-c*u,h=t+s,d=n+l,p=e+s,v=r+l,g=(h+p)/2,y=(d+v)/2,_=p-h,b=v-d,m=_*_+b*b,x=i-o,w=h*v-p*d,M=(b<0?-1:1)*Bg(qg(0,x*x*m-w*w)),A=(w*b-_*M)/m,T=(-w*_-b*M)/m,N=(w*b+_*M)/m,S=(-w*_+b*M)/m,E=A-g,k=T-y,C=N-g,P=S-y;return E*E+k*k>C*C+P*P&&(A=N,T=S),{cx:A,cy:T,x01:-s,y01:-l,x11:A*(i/x-1),y11:T*(i/x-1)}}function Kg(t){this._context=t}function ty(t){return new Kg(t)}function ny(t){return t[0]}function ey(t){return t[1]}function ry(){var t=ny,n=ey,e=Rg(!0),r=null,i=ty,o=null;function a(a){var u,f,c,s=a.length,l=!1;for(null==r&&(o=i(c=fo())),u=0;u<=s;++u)!(u<s&&e(f=a[u],u,a))===l&&((l=!l)?o.lineStart():o.lineEnd()),l&&o.point(+t(f,u,a),+n(f,u,a));if(c)return o=null,c+""||null}return a.x=function(n){return arguments.length?(t="function"==typeof n?n:Rg(+n),a):t},a.y=function(t){return arguments.length?(n="function"==typeof t?t:Rg(+t),a):n},a.defined=function(t){return arguments.length?(e="function"==typeof t?t:Rg(!!t),a):e},a.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),a):i},a.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),a):r},a}function iy(){var t=ny,n=null,e=Rg(0),r=ey,i=Rg(!0),o=null,a=ty,u=null;function f(f){var c,s,l,h,d,p=f.length,v=!1,g=new Array(p),y=new Array(p);for(null==o&&(u=a(d=fo())),c=0;c<=p;++c){if(!(c<p&&i(h=f[c],c,f))===v)if(v=!v)s=c,u.areaStart(),u.lineStart();else{for(u.lineEnd(),u.lineStart(),l=c-1;l>=s;--l)u.point(g[l],y[l]);u.lineEnd(),u.areaEnd()}v&&(g[c]=+t(h,c,f),y[c]=+e(h,c,f),u.point(n?+n(h,c,f):g[c],r?+r(h,c,f):y[c]))}if(d)return u=null,d+""||null}function c(){return ry().defined(i).curve(a).context(o)}return f.x=function(e){return arguments.length?(t="function"==typeof e?e:Rg(+e),n=null,f):t},f.x0=function(n){return arguments.length?(t="function"==typeof n?n:Rg(+n),f):t},f.x1=function(t){return arguments.length?(n=null==t?null:"function"==typeof t?t:Rg(+t),f):n},f.y=function(t){return arguments.length?(e="function"==typeof t?t:Rg(+t),r=null,f):e},f.y0=function(t){return arguments.length?(e="function"==typeof t?t:Rg(+t),f):e},f.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:Rg(+t),f):r},f.lineX0=f.lineY0=function(){return c().x(t).y(e)},f.lineY1=function(){return c().x(t).y(r)},f.lineX1=function(){return c().x(n).y(e)},f.defined=function(t){return arguments.length?(i="function"==typeof t?t:Rg(!!t),f):i},f.curve=function(t){return arguments.length?(a=t,null!=o&&(u=a(o)),f):a},f.context=function(t){return arguments.length?(null==t?o=u=null:u=a(o=t),f):o},f}function oy(t,n){return n<t?-1:n>t?1:n>=t?0:NaN}function ay(t){return t}Kg.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var uy=cy(ty);function fy(t){this._curve=t}function cy(t){function n(n){return new fy(t(n))}return n._curve=t,n}function sy(t){var n=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?n(cy(t)):n()._curve},t}function ly(){return sy(ry().curve(uy))}function hy(){var t=iy().curve(uy),n=t.curve,e=t.lineX0,r=t.lineX1,i=t.lineY0,o=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return sy(e())},delete t.lineX0,t.lineEndAngle=function(){return sy(r())},delete t.lineX1,t.lineInnerRadius=function(){return sy(i())},delete t.lineY0,t.lineOuterRadius=function(){return sy(o())},delete t.lineY1,t.curve=function(t){return arguments.length?n(cy(t)):n()._curve},t}function dy(t,n){return[(n=+n)*Math.cos(t-=Math.PI/2),n*Math.sin(t)]}fy.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}};var py=Array.prototype.slice;function vy(t){return t.source}function gy(t){return t.target}function yy(t){var n=vy,e=gy,r=ny,i=ey,o=null;function a(){var a,u=py.call(arguments),f=n.apply(this,u),c=e.apply(this,u);if(o||(o=a=fo()),t(o,+r.apply(this,(u[0]=f,u)),+i.apply(this,u),+r.apply(this,(u[0]=c,u)),+i.apply(this,u)),a)return o=null,a+""||null}return a.source=function(t){return arguments.length?(n=t,a):n},a.target=function(t){return arguments.length?(e=t,a):e},a.x=function(t){return arguments.length?(r="function"==typeof t?t:Rg(+t),a):r},a.y=function(t){return arguments.length?(i="function"==typeof t?t:Rg(+t),a):i},a.context=function(t){return arguments.length?(o=null==t?null:t,a):o},a}function _y(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n=(n+r)/2,e,n,i,r,i)}function by(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n,e=(e+i)/2,r,e,r,i)}function my(t,n,e,r,i){var o=dy(n,e),a=dy(n,e=(e+i)/2),u=dy(r,e),f=dy(r,i);t.moveTo(o[0],o[1]),t.bezierCurveTo(a[0],a[1],u[0],u[1],f[0],f[1])}var xy={draw:function(t,n){var e=Math.sqrt(n/Fg);t.moveTo(e,0),t.arc(0,0,e,0,Hg)}},wy={draw:function(t,n){var e=Math.sqrt(n/5)/2;t.moveTo(-3*e,-e),t.lineTo(-e,-e),t.lineTo(-e,-3*e),t.lineTo(e,-3*e),t.lineTo(e,-e),t.lineTo(3*e,-e),t.lineTo(3*e,e),t.lineTo(e,e),t.lineTo(e,3*e),t.lineTo(-e,3*e),t.lineTo(-e,e),t.lineTo(-3*e,e),t.closePath()}},My=Math.sqrt(1/3),Ay=2*My,Ty={draw:function(t,n){var e=Math.sqrt(n/Ay),r=e*My;t.moveTo(0,-e),t.lineTo(r,0),t.lineTo(0,e),t.lineTo(-r,0),t.closePath()}},Ny=Math.sin(Fg/10)/Math.sin(7*Fg/10),Sy=Math.sin(Hg/10)*Ny,Ey=-Math.cos(Hg/10)*Ny,ky={draw:function(t,n){var e=Math.sqrt(.8908130915292852*n),r=Sy*e,i=Ey*e;t.moveTo(0,-e),t.lineTo(r,i);for(var o=1;o<5;++o){var a=Hg*o/5,u=Math.cos(a),f=Math.sin(a);t.lineTo(f*e,-u*e),t.lineTo(u*r-f*i,f*r+u*i)}t.closePath()}},Cy={draw:function(t,n){var e=Math.sqrt(n),r=-e/2;t.rect(r,r,e,e)}},Py=Math.sqrt(3),zy={draw:function(t,n){var e=-Math.sqrt(n/(3*Py));t.moveTo(0,2*e),t.lineTo(-Py*e,-e),t.lineTo(Py*e,-e),t.closePath()}},Ry=-.5,Ly=Math.sqrt(3)/2,Dy=1/Math.sqrt(12),Uy=3*(Dy/2+1),qy={draw:function(t,n){var e=Math.sqrt(n/Uy),r=e/2,i=e*Dy,o=r,a=e*Dy+e,u=-o,f=a;t.moveTo(r,i),t.lineTo(o,a),t.lineTo(u,f),t.lineTo(Ry*r-Ly*i,Ly*r+Ry*i),t.lineTo(Ry*o-Ly*a,Ly*o+Ry*a),t.lineTo(Ry*u-Ly*f,Ly*u+Ry*f),t.lineTo(Ry*r+Ly*i,Ry*i-Ly*r),t.lineTo(Ry*o+Ly*a,Ry*a-Ly*o),t.lineTo(Ry*u+Ly*f,Ry*f-Ly*u),t.closePath()}},Oy=[xy,wy,Ty,Cy,ky,zy,qy];function Yy(){}function By(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function Fy(t){this._context=t}function Iy(t){this._context=t}function Hy(t){this._context=t}function jy(t,n){this._basis=new Fy(t),this._beta=n}Fy.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:By(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:By(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},Iy.prototype={areaStart:Yy,areaEnd:Yy,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:By(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},Hy.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(e,r):this._context.moveTo(e,r);break;case 3:this._point=4;default:By(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},jy.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,e=t.length-1;if(e>0)for(var r,i=t[0],o=n[0],a=t[e]-i,u=n[e]-o,f=-1;++f<=e;)r=f/e,this._basis.point(this._beta*t[f]+(1-this._beta)*(i+r*a),this._beta*n[f]+(1-this._beta)*(o+r*u));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};var Xy=function t(n){function e(t){return 1===n?new Fy(t):new jy(t,n)}return e.beta=function(n){return t(+n)},e}(.85);function Gy(t,n,e){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-e),t._x2,t._y2)}function Vy(t,n){this._context=t,this._k=(1-n)/6}Vy.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:Gy(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:Gy(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var $y=function t(n){function e(t){return new Vy(t,n)}return e.tension=function(n){return t(+n)},e}(0);function Wy(t,n){this._context=t,this._k=(1-n)/6}Wy.prototype={areaStart:Yy,areaEnd:Yy,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Gy(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Zy=function t(n){function e(t){return new Wy(t,n)}return e.tension=function(n){return t(+n)},e}(0);function Qy(t,n){this._context=t,this._k=(1-n)/6}Qy.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Gy(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Jy=function t(n){function e(t){return new Qy(t,n)}return e.tension=function(n){return t(+n)},e}(0);function Ky(t,n,e){var r=t._x1,i=t._y1,o=t._x2,a=t._y2;if(t._l01_a>1e-12){var u=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,f=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*u-t._x0*t._l12_2a+t._x2*t._l01_2a)/f,i=(i*u-t._y0*t._l12_2a+t._y2*t._l01_2a)/f}if(t._l23_a>1e-12){var c=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,s=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*c+t._x1*t._l23_2a-n*t._l12_2a)/s,a=(a*c+t._y1*t._l23_2a-e*t._l12_2a)/s}t._context.bezierCurveTo(r,i,o,a,t._x2,t._y2)}function t_(t,n){this._context=t,this._alpha=n}t_.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:Ky(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var n_=function t(n){function e(t){return n?new t_(t,n):new Vy(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function e_(t,n){this._context=t,this._alpha=n}e_.prototype={areaStart:Yy,areaEnd:Yy,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Ky(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var r_=function t(n){function e(t){return n?new e_(t,n):new Wy(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function i_(t,n){this._context=t,this._alpha=n}i_.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Ky(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var o_=function t(n){function e(t){return n?new i_(t,n):new Qy(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function a_(t){this._context=t}function u_(t){return t<0?-1:1}function f_(t,n,e){var r=t._x1-t._x0,i=n-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),a=(e-t._y1)/(i||r<0&&-0),u=(o*i+a*r)/(r+i);return(u_(o)+u_(a))*Math.min(Math.abs(o),Math.abs(a),.5*Math.abs(u))||0}function c_(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function s_(t,n,e){var r=t._x0,i=t._y0,o=t._x1,a=t._y1,u=(o-r)/3;t._context.bezierCurveTo(r+u,i+u*n,o-u,a-u*e,o,a)}function l_(t){this._context=t}function h_(t){this._context=new d_(t)}function d_(t){this._context=t}function p_(t){this._context=t}function v_(t){var n,e,r=t.length-1,i=new Array(r),o=new Array(r),a=new Array(r);for(i[0]=0,o[0]=2,a[0]=t[0]+2*t[1],n=1;n<r-1;++n)i[n]=1,o[n]=4,a[n]=4*t[n]+2*t[n+1];for(i[r-1]=2,o[r-1]=7,a[r-1]=8*t[r-1]+t[r],n=1;n<r;++n)e=i[n]/o[n-1],o[n]-=e,a[n]-=e*a[n-1];for(i[r-1]=a[r-1]/o[r-1],n=r-2;n>=0;--n)i[n]=(a[n]-i[n+1])/o[n];for(o[r-1]=(t[r]+i[r-1])/2,n=0;n<r-1;++n)o[n]=2*t[n+1]-i[n+1];return[i,o]}function g_(t,n){this._context=t,this._t=n}function y_(t,n){if((i=t.length)>1)for(var e,r,i,o=1,a=t[n[0]],u=a.length;o<i;++o)for(r=a,a=t[n[o]],e=0;e<u;++e)a[e][1]+=a[e][0]=isNaN(r[e][1])?r[e][0]:r[e][1]}function __(t){for(var n=t.length,e=new Array(n);--n>=0;)e[n]=n;return e}function b_(t,n){return t[n]}function m_(t){var n=t.map(x_);return __(t).sort((function(t,e){return n[t]-n[e]}))}function x_(t){for(var n,e=0,r=-1,i=t.length;++r<i;)(n=+t[r][1])&&(e+=n);return e}function w_(t){return function(){return t}}function M_(t){return t[0]}function A_(t){return t[1]}function T_(){this._=null}function N_(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function S_(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function E_(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function k_(t){for(;t.L;)t=t.L;return t}function C_(t,n,e,r){var i=[null,null],o=tb.push(i)-1;return i.left=t,i.right=n,e&&z_(i,t,n,e),r&&z_(i,n,t,r),J_[t.index].halfedges.push(o),J_[n.index].halfedges.push(o),i}function P_(t,n,e){var r=[n,e];return r.left=t,r}function z_(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function R_(t,n,e,r,i){var o,a=t[0],u=t[1],f=a[0],c=a[1],s=0,l=1,h=u[0]-f,d=u[1]-c;if(o=n-f,h||!(o>0)){if(o/=h,h<0){if(o<s)return;o<l&&(l=o)}else if(h>0){if(o>l)return;o>s&&(s=o)}if(o=r-f,h||!(o<0)){if(o/=h,h<0){if(o>l)return;o>s&&(s=o)}else if(h>0){if(o<s)return;o<l&&(l=o)}if(o=e-c,d||!(o>0)){if(o/=d,d<0){if(o<s)return;o<l&&(l=o)}else if(d>0){if(o>l)return;o>s&&(s=o)}if(o=i-c,d||!(o<0)){if(o/=d,d<0){if(o>l)return;o>s&&(s=o)}else if(d>0){if(o<s)return;o<l&&(l=o)}return!(s>0||l<1)||(s>0&&(t[0]=[f+s*h,c+s*d]),l<1&&(t[1]=[f+l*h,c+l*d]),!0)}}}}}function L_(t,n,e,r,i){var o=t[1];if(o)return!0;var a,u,f=t[0],c=t.left,s=t.right,l=c[0],h=c[1],d=s[0],p=s[1],v=(l+d)/2,g=(h+p)/2;if(p===h){if(v<n||v>=r)return;if(l>d){if(f){if(f[1]>=i)return}else f=[v,e];o=[v,i]}else{if(f){if(f[1]<e)return}else f=[v,i];o=[v,e]}}else if(u=g-(a=(l-d)/(p-h))*v,a<-1||a>1)if(l>d){if(f){if(f[1]>=i)return}else f=[(e-u)/a,e];o=[(i-u)/a,i]}else{if(f){if(f[1]<e)return}else f=[(i-u)/a,i];o=[(e-u)/a,e]}else if(h<p){if(f){if(f[0]>=r)return}else f=[n,a*n+u];o=[r,a*r+u]}else{if(f){if(f[0]<n)return}else f=[r,a*r+u];o=[n,a*n+u]}return t[0]=f,t[1]=o,!0}function D_(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function U_(t,n){return n[+(n.left!==t.site)]}function q_(t,n){return n[+(n.left===t.site)]}a_.prototype={areaStart:Yy,areaEnd:Yy,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}},l_.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:s_(this,this._t0,c_(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,s_(this,c_(this,e=f_(this,t,n)),e);break;default:s_(this,this._t0,e=f_(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(h_.prototype=Object.create(l_.prototype)).point=function(t,n){l_.prototype.point.call(this,n,t)},d_.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,o){this._context.bezierCurveTo(n,t,r,e,o,i)}},p_.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,e=t.length;if(e)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===e)this._context.lineTo(t[1],n[1]);else for(var r=v_(t),i=v_(n),o=0,a=1;a<e;++o,++a)this._context.bezierCurveTo(r[0][o],i[0][o],r[1][o],i[1][o],t[a],n[a]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}},g_.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var e=this._x*(1-this._t)+t*this._t;this._context.lineTo(e,this._y),this._context.lineTo(e,n)}}this._x=t,this._y=n}},T_.prototype={constructor:T_,insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=k_(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(r=e.U).L?(i=r.R)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(S_(this,e),e=(t=e).U),e.C=!1,r.C=!0,E_(this,r)):(i=r.L)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(E_(this,e),e=(t=e).U),e.C=!1,r.C=!0,S_(this,r)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,o=t.L,a=t.R;if(e=o?a?k_(a):o:a,i?i.L===t?i.L=e:i.R=e:this._=e,o&&a?(r=e.C,e.C=t.C,e.L=o,o.U=e,e!==a?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=a,a.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((n=i.R).C&&(n.C=!1,i.C=!0,S_(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,E_(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,S_(this,i),t=this._;break}}else if((n=i.L).C&&(n.C=!1,i.C=!0,E_(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,S_(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,E_(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var O_,Y_=[];function B_(){N_(this),this.x=this.y=this.arc=this.site=this.cy=null}function F_(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,o=e.site;if(r!==o){var a=i[0],u=i[1],f=r[0]-a,c=r[1]-u,s=o[0]-a,l=o[1]-u,h=2*(f*l-c*s);if(!(h>=-eb)){var d=f*f+c*c,p=s*s+l*l,v=(l*d-c*p)/h,g=(f*p-s*d)/h,y=Y_.pop()||new B_;y.arc=t,y.site=i,y.x=v+a,y.y=(y.cy=g+u)+Math.sqrt(v*v+g*g),t.circle=y;for(var _=null,b=K_._;b;)if(y.y<b.y||y.y===b.y&&y.x<=b.x){if(!b.L){_=b.P;break}b=b.L}else{if(!b.R){_=b;break}b=b.R}K_.insert(_,y),_||(O_=y)}}}}function I_(t){var n=t.circle;n&&(n.P||(O_=n.N),K_.remove(n),Y_.push(n),N_(n),t.circle=null)}var H_=[];function j_(){N_(this),this.edge=this.site=this.circle=null}function X_(t){var n=H_.pop()||new j_;return n.site=t,n}function G_(t){I_(t),Q_.remove(t),H_.push(t),N_(t)}function V_(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],o=t.P,a=t.N,u=[t];G_(t);for(var f=o;f.circle&&Math.abs(e-f.circle.x)<nb&&Math.abs(r-f.circle.cy)<nb;)o=f.P,u.unshift(f),G_(f),f=o;u.unshift(f),I_(f);for(var c=a;c.circle&&Math.abs(e-c.circle.x)<nb&&Math.abs(r-c.circle.cy)<nb;)a=c.N,u.push(c),G_(c),c=a;u.push(c),I_(c);var s,l=u.length;for(s=1;s<l;++s)c=u[s],f=u[s-1],z_(c.edge,f.site,c.site,i);f=u[0],(c=u[l-1]).edge=C_(f.site,c.site,null,i),F_(f),F_(c)}function $_(t){for(var n,e,r,i,o=t[0],a=t[1],u=Q_._;u;)if((r=W_(u,a)-o)>nb)u=u.L;else{if(!((i=o-Z_(u,a))>nb)){r>-nb?(n=u.P,e=u):i>-nb?(n=u,e=u.N):n=e=u;break}if(!u.R){n=u;break}u=u.R}!function(t){J_[t.index]={site:t,halfedges:[]}}(t);var f=X_(t);if(Q_.insert(n,f),n||e){if(n===e)return I_(n),e=X_(n.site),Q_.insert(f,e),f.edge=e.edge=C_(n.site,f.site),F_(n),void F_(e);if(e){I_(n),I_(e);var c=n.site,s=c[0],l=c[1],h=t[0]-s,d=t[1]-l,p=e.site,v=p[0]-s,g=p[1]-l,y=2*(h*g-d*v),_=h*h+d*d,b=v*v+g*g,m=[(g*_-d*b)/y+s,(h*b-v*_)/y+l];z_(e.edge,c,p,m),f.edge=C_(c,t,null,m),e.edge=C_(t,p,null,m),F_(n),F_(e)}else f.edge=C_(n.site,f.site)}}function W_(t,n){var e=t.site,r=e[0],i=e[1],o=i-n;if(!o)return r;var a=t.P;if(!a)return-1/0;var u=(e=a.site)[0],f=e[1],c=f-n;if(!c)return u;var s=u-r,l=1/o-1/c,h=s/c;return l?(-h+Math.sqrt(h*h-2*l*(s*s/(-2*c)-f+c/2+i-o/2)))/l+r:(r+u)/2}function Z_(t,n){var e=t.N;if(e)return W_(e,n);var r=t.site;return r[1]===n?r[0]:1/0}var Q_,J_,K_,tb,nb=1e-6,eb=1e-12;function rb(t,n,e){return(t[0]-e[0])*(n[1]-t[1])-(t[0]-n[0])*(e[1]-t[1])}function ib(t,n){return n[1]-t[1]||n[0]-t[0]}function ob(t,n){var e,r,i,o=t.sort(ib).pop();for(tb=[],J_=new Array(t.length),Q_=new T_,K_=new T_;;)if(i=O_,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===e&&o[1]===r||($_(o),e=o[0],r=o[1]),o=t.pop();else{if(!i)break;V_(i.arc)}if(function(){for(var t,n,e,r,i=0,o=J_.length;i<o;++i)if((t=J_[i])&&(r=(n=t.halfedges).length)){var a=new Array(r),u=new Array(r);for(e=0;e<r;++e)a[e]=e,u[e]=D_(t,tb[n[e]]);for(a.sort((function(t,n){return u[n]-u[t]})),e=0;e<r;++e)u[e]=n[a[e]];for(e=0;e<r;++e)n[e]=u[e]}}(),n){var a=+n[0][0],u=+n[0][1],f=+n[1][0],c=+n[1][1];!function(t,n,e,r){for(var i,o=tb.length;o--;)L_(i=tb[o],t,n,e,r)&&R_(i,t,n,e,r)&&(Math.abs(i[0][0]-i[1][0])>nb||Math.abs(i[0][1]-i[1][1])>nb)||delete tb[o]}(a,u,f,c),function(t,n,e,r){var i,o,a,u,f,c,s,l,h,d,p,v,g=J_.length,y=!0;for(i=0;i<g;++i)if(o=J_[i]){for(a=o.site,u=(f=o.halfedges).length;u--;)tb[f[u]]||f.splice(u,1);for(u=0,c=f.length;u<c;)p=(d=q_(o,tb[f[u]]))[0],v=d[1],l=(s=U_(o,tb[f[++u%c]]))[0],h=s[1],(Math.abs(p-l)>nb||Math.abs(v-h)>nb)&&(f.splice(u,0,tb.push(P_(a,d,Math.abs(p-t)<nb&&r-v>nb?[t,Math.abs(l-t)<nb?h:r]:Math.abs(v-r)<nb&&e-p>nb?[Math.abs(h-r)<nb?l:e,r]:Math.abs(p-e)<nb&&v-n>nb?[e,Math.abs(l-e)<nb?h:n]:Math.abs(v-n)<nb&&p-t>nb?[Math.abs(h-n)<nb?l:t,n]:null))-1),++c);c&&(y=!1)}if(y){var _,b,m,x=1/0;for(i=0,y=null;i<g;++i)(o=J_[i])&&(m=(_=(a=o.site)[0]-t)*_+(b=a[1]-n)*b)<x&&(x=m,y=o);if(y){var w=[t,n],M=[t,r],A=[e,r],T=[e,n];y.halfedges.push(tb.push(P_(a=y.site,w,M))-1,tb.push(P_(a,M,A))-1,tb.push(P_(a,A,T))-1,tb.push(P_(a,T,w))-1)}}for(i=0;i<g;++i)(o=J_[i])&&(o.halfedges.length||delete J_[i])}(a,u,f,c)}this.edges=tb,this.cells=J_,Q_=K_=tb=J_=null}function ab(t){return function(){return t}}function ub(t,n,e){this.target=t,this.type=n,this.transform=e}function fb(t,n,e){this.k=t,this.x=n,this.y=e}ob.prototype={constructor:ob,polygons:function(){var t=this.edges;return this.cells.map((function(n){var e=n.halfedges.map((function(e){return U_(n,t[e])}));return e.data=n.site.data,e}))},triangles:function(){var t=[],n=this.edges;return this.cells.forEach((function(e,r){if(o=(i=e.halfedges).length)for(var i,o,a,u=e.site,f=-1,c=n[i[o-1]],s=c.left===u?c.right:c.left;++f<o;)a=s,s=(c=n[i[f]]).left===u?c.right:c.left,a&&s&&r<a.index&&r<s.index&&rb(u,a,s)<0&&t.push([u.data,a.data,s.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,n,e){for(var r,i,o=this,a=o._found||0,u=o.cells.length;!(i=o.cells[a]);)if(++a>=u)return null;var f=t-i.site[0],c=n-i.site[1],s=f*f+c*c;do{i=o.cells[r=a],a=null,i.halfedges.forEach((function(e){var r=o.edges[e],u=r.left;if(u!==i.site&&u||(u=r.right)){var f=t-u[0],c=n-u[1],l=f*f+c*c;l<s&&(s=l,a=u.index)}}))}while(null!==a);return o._found=r,null==e||s<=e*e?i.site:null}},fb.prototype={constructor:fb,scale:function(t){return 1===t?this:new fb(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new fb(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var cb=new fb(1,0,0);function sb(t){return t.__zoom||cb}function lb(){t.event.stopImmediatePropagation()}function hb(){t.event.preventDefault(),t.event.stopImmediatePropagation()}function db(){return!t.event.button}function pb(){var t,n,e=this;return e instanceof SVGElement?(t=(e=e.ownerSVGElement||e).width.baseVal.value,n=e.height.baseVal.value):(t=e.clientWidth,n=e.clientHeight),[[0,0],[t,n]]}function vb(){return this.__zoom||cb}function gb(){return-t.event.deltaY*(t.event.deltaMode?120:1)/500}function yb(){return"ontouchstart"in this}function _b(t,n,e){var r=t.invertX(n[0][0])-e[0][0],i=t.invertX(n[1][0])-e[1][0],o=t.invertY(n[0][1])-e[0][1],a=t.invertY(n[1][1])-e[1][1];return t.translate(i>r?(r+i)/2:Math.min(0,r)||Math.max(0,i),a>o?(o+a)/2:Math.min(0,o)||Math.max(0,a))}sb.prototype=fb.prototype,t.version="5.7.0",t.bisect=i,t.bisectRight=i,t.bisectLeft=o,t.ascending=n,t.bisector=e,t.cross=function(t,n,e){var r,i,o,u,f=t.length,c=n.length,s=new Array(f*c);for(null==e&&(e=a),r=o=0;r<f;++r)for(u=t[r],i=0;i<c;++i,++o)s[o]=e(u,n[i]);return s},t.descending=function(t,n){return n<t?-1:n>t?1:n>=t?0:NaN},t.deviation=c,t.extent=s,t.histogram=function(){var t=v,n=s,e=M;function r(r){var o,a,u=r.length,f=new Array(u);for(o=0;o<u;++o)f[o]=t(r[o],o,r);var c=n(f),s=c[0],l=c[1],h=e(f,s,l);Array.isArray(h)||(h=w(s,l,h),h=g(Math.ceil(s/h)*h,l,h));for(var d=h.length;h[0]<=s;)h.shift(),--d;for(;h[d-1]>l;)h.pop(),--d;var p,v=new Array(d+1);for(o=0;o<=d;++o)(p=v[o]=[]).x0=o>0?h[o-1]:s,p.x1=o<d?h[o]:l;for(o=0;o<u;++o)s<=(a=f[o])&&a<=l&&v[i(h,a,0,d)].push(r[o]);return v}return r.value=function(n){return arguments.length?(t="function"==typeof n?n:p(n),r):t},r.domain=function(t){return arguments.length?(n="function"==typeof t?t:p([t[0],t[1]]),r):n},r.thresholds=function(t){return arguments.length?(e="function"==typeof t?t:Array.isArray(t)?p(h.call(t)):p(t),r):e},r},t.thresholdFreedmanDiaconis=function(t,e,r){return t=d.call(t,u).sort(n),Math.ceil((r-e)/(2*(A(t,.75)-A(t,.25))*Math.pow(t.length,-1/3)))},t.thresholdScott=function(t,n,e){return Math.ceil((e-n)/(3.5*c(t)*Math.pow(t.length,-1/3)))},t.thresholdSturges=M,t.max=T,t.mean=function(t,n){var e,r=t.length,i=r,o=-1,a=0;if(null==n)for(;++o<r;)isNaN(e=u(t[o]))?--i:a+=e;else for(;++o<r;)isNaN(e=u(n(t[o],o,t)))?--i:a+=e;if(i)return a/i},t.median=function(t,e){var r,i=t.length,o=-1,a=[];if(null==e)for(;++o<i;)isNaN(r=u(t[o]))||a.push(r);else for(;++o<i;)isNaN(r=u(e(t[o],o,t)))||a.push(r);return A(a.sort(n),.5)},t.merge=N,t.min=S,t.pairs=function(t,n){null==n&&(n=a);for(var e=0,r=t.length-1,i=t[0],o=new Array(r<0?0:r);e<r;)o[e]=n(i,i=t[++e]);return o},t.permute=function(t,n){for(var e=n.length,r=new Array(e);e--;)r[e]=t[n[e]];return r},t.quantile=A,t.range=g,t.scan=function(t,e){if(r=t.length){var r,i,o=0,a=0,u=t[a];for(null==e&&(e=n);++o<r;)(e(i=t[o],u)<0||0!==e(u,u))&&(u=i,a=o);return 0===e(u,u)?a:void 0}},t.shuffle=function(t,n,e){for(var r,i,o=(null==e?t.length:e)-(n=null==n?0:+n);o;)i=Math.random()*o--|0,r=t[o+n],t[o+n]=t[i+n],t[i+n]=r;return t},t.sum=function(t,n){var e,r=t.length,i=-1,o=0;if(null==n)for(;++i<r;)(e=+t[i])&&(o+=e);else for(;++i<r;)(e=+n(t[i],i,t))&&(o+=e);return o},t.ticks=m,t.tickIncrement=x,t.tickStep=w,t.transpose=E,t.variance=f,t.zip=function(){return E(arguments)},t.axisTop=function(t){return q(1,t)},t.axisRight=function(t){return q(2,t)},t.axisBottom=function(t){return q(3,t)},t.axisLeft=function(t){return q(4,t)},t.brush=function(){return $i(qi)},t.brushX=function(){return $i(Di)},t.brushY=function(){return $i(Ui)},t.brushSelection=function(t){var n=t.__brush;return n?n.dim.output(n.selection):null},t.chord=function(){var t=0,n=null,e=null,r=null;function i(i){var o,a,u,f,c,s,l=i.length,h=[],d=g(l),p=[],v=[],y=v.groups=new Array(l),_=new Array(l*l);for(o=0,c=-1;++c<l;){for(a=0,s=-1;++s<l;)a+=i[c][s];h.push(a),p.push(g(l)),o+=a}for(n&&d.sort((function(t,e){return n(h[t],h[e])})),e&&p.forEach((function(t,n){t.sort((function(t,r){return e(i[n][t],i[n][r])}))})),f=(o=to(0,Ki-t*l)/o)?t:Ki/l,a=0,c=-1;++c<l;){for(u=a,s=-1;++s<l;){var b=d[c],m=p[b][s],x=i[b][m],w=a,M=a+=x*o;_[m*l+b]={index:b,subindex:m,startAngle:w,endAngle:M,value:x}}y[b]={index:b,startAngle:u,endAngle:a,value:h[b]},a+=f}for(c=-1;++c<l;)for(s=c-1;++s<l;){var A=_[s*l+c],T=_[c*l+s];(A.value||T.value)&&v.push(A.value<T.value?{source:T,target:A}:{source:A,target:T})}return r?v.sort(r):v}return i.padAngle=function(n){return arguments.length?(t=to(0,n),i):t},i.sortGroups=function(t){return arguments.length?(n=t,i):n},i.sortSubgroups=function(t){return arguments.length?(e=t,i):e},i.sortChords=function(t){return arguments.length?(null==t?r=null:(r=no(t))._=t,i):r&&r._},i},t.ribbon=function(){var t=co,n=so,e=lo,r=ho,i=po,o=null;function a(){var a,u=eo.call(arguments),f=t.apply(this,u),c=n.apply(this,u),s=+e.apply(this,(u[0]=f,u)),l=r.apply(this,u)-Ji,h=i.apply(this,u)-Ji,d=s*Wi(l),p=s*Zi(l),v=+e.apply(this,(u[0]=c,u)),g=r.apply(this,u)-Ji,y=i.apply(this,u)-Ji;if(o||(o=a=fo()),o.moveTo(d,p),o.arc(0,0,s,l,h),l===g&&h===y||(o.quadraticCurveTo(0,0,v*Wi(g),v*Zi(g)),o.arc(0,0,v,g,y)),o.quadraticCurveTo(0,0,d,p),o.closePath(),a)return o=null,a+""||null}return a.radius=function(t){return arguments.length?(e="function"==typeof t?t:ro(+t),a):e},a.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:ro(+t),a):r},a.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:ro(+t),a):i},a.source=function(n){return arguments.length?(t=n,a):t},a.target=function(t){return arguments.length?(n=t,a):n},a.context=function(t){return arguments.length?(o=null==t?null:t,a):o},a},t.nest=function(){var t,n,e,r=[],i=[];function o(e,i,a,u){if(i>=r.length)return null!=t&&e.sort(t),null!=n?n(e):e;for(var f,c,s,l=-1,h=e.length,d=r[i++],p=go(),v=a();++l<h;)(s=p.get(f=d(c=e[l])+""))?s.push(c):p.set(f,[c]);return p.each((function(t,n){u(v,n,o(t,i,a,u))})),v}return e={object:function(t){return o(t,0,yo,_o)},map:function(t){return o(t,0,bo,mo)},entries:function(t){return function t(e,o){if(++o>r.length)return e;var a,u=i[o-1];return null!=n&&o>=r.length?a=e.entries():(a=[],e.each((function(n,e){a.push({key:e,values:t(n,o)})}))),null!=u?a.sort((function(t,n){return u(t.key,n.key)})):a}(o(t,0,bo,mo),0)},key:function(t){return r.push(t),e},sortKeys:function(t){return i[r.length-1]=t,e},sortValues:function(n){return t=n,e},rollup:function(t){return n=t,e}}},t.set=Mo,t.map=go,t.keys=function(t){var n=[];for(var e in t)n.push(e);return n},t.values=function(t){var n=[];for(var e in t)n.push(t[e]);return n},t.entries=function(t){var n=[];for(var e in t)n.push({key:e,value:t[e]});return n},t.color=Un,t.rgb=Bn,t.hsl=Xn,t.lab=Kn,t.hcl=ae,t.lch=function(t,n,e,r){return 1===arguments.length?oe(t):new ue(e,n,t,null==r?1:r)},t.gray=function(t,n){return new te(t,0,0,null==n?1:n)},t.cubehelix=ye,t.contours=zo,t.contourDensity=function(){var t=Do,n=Uo,e=qo,r=960,i=500,o=20,a=2,u=3*o,f=r+2*u>>a,c=i+2*u>>a,s=No(20);function l(r){var i=new Float32Array(f*c),l=new Float32Array(f*c);r.forEach((function(r,o,s){var l=+t(r,o,s)+u>>a,h=+n(r,o,s)+u>>a,d=+e(r,o,s);l>=0&&l<f&&h>=0&&h<c&&(i[l+h*f]+=d)})),Ro({width:f,height:c,data:i},{width:f,height:c,data:l},o>>a),Lo({width:f,height:c,data:l},{width:f,height:c,data:i},o>>a),Ro({width:f,height:c,data:i},{width:f,height:c,data:l},o>>a),Lo({width:f,height:c,data:l},{width:f,height:c,data:i},o>>a),Ro({width:f,height:c,data:i},{width:f,height:c,data:l},o>>a),Lo({width:f,height:c,data:l},{width:f,height:c,data:i},o>>a);var d=s(i);if(!Array.isArray(d)){var p=T(i);d=w(0,p,d),(d=g(0,Math.floor(p/d)*d,d)).shift()}return zo().thresholds(d).size([f,c])(i).map(h)}function h(t){return t.value*=Math.pow(2,-2*a),t.coordinates.forEach(d),t}function d(t){t.forEach(p)}function p(t){t.forEach(v)}function v(t){t[0]=t[0]*Math.pow(2,a)-u,t[1]=t[1]*Math.pow(2,a)-u}function y(){return f=r+2*(u=3*o)>>a,c=i+2*u>>a,l}return l.x=function(n){return arguments.length?(t="function"==typeof n?n:No(+n),l):t},l.y=function(t){return arguments.length?(n="function"==typeof t?t:No(+t),l):n},l.weight=function(t){return arguments.length?(e="function"==typeof t?t:No(+t),l):e},l.size=function(t){if(!arguments.length)return[r,i];var n=Math.ceil(t[0]),e=Math.ceil(t[1]);if(!(n>=0||n>=0))throw new Error("invalid size");return r=n,i=e,y()},l.cellSize=function(t){if(!arguments.length)return 1<<a;if(!((t=+t)>=1))throw new Error("invalid cell size");return a=Math.floor(Math.log(t)/Math.LN2),y()},l.thresholds=function(t){return arguments.length?(s="function"==typeof t?t:Array.isArray(t)?No(Ao.call(t)):No(t),l):s},l.bandwidth=function(t){if(!arguments.length)return Math.sqrt(o*(o+1));if(!((t=+t)>=0))throw new Error("invalid bandwidth");return o=Math.round((Math.sqrt(4*t*t+1)-1)/2),y()},l},t.dispatch=Y,t.drag=function(){var n,e,r,i,o=yn,a=_n,u=bn,f=mn,c={},s=Y("start","drag","end"),l=0,h=0;function d(t){t.on("mousedown.drag",p).filter(f).on("touchstart.drag",y).on("touchmove.drag",_).on("touchend.drag touchcancel.drag",b).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function p(){if(!i&&o.apply(this,arguments)){var u=m("mouse",a.apply(this,arguments),cn,this,arguments);u&&(en(t.event.view).on("mousemove.drag",v,!0).on("mouseup.drag",g,!0),dn(t.event.view),ln(),r=!1,n=t.event.clientX,e=t.event.clientY,u("start"))}}function v(){if(hn(),!r){var i=t.event.clientX-n,o=t.event.clientY-e;r=i*i+o*o>h}c.mouse("drag")}function g(){en(t.event.view).on("mousemove.drag mouseup.drag",null),pn(t.event.view,r),hn(),c.mouse("end")}function y(){if(o.apply(this,arguments)){var n,e,r=t.event.changedTouches,i=a.apply(this,arguments),u=r.length;for(n=0;n<u;++n)(e=m(r[n].identifier,i,sn,this,arguments))&&(ln(),e("start"))}}function _(){var n,e,r=t.event.changedTouches,i=r.length;for(n=0;n<i;++n)(e=c[r[n].identifier])&&(hn(),e("drag"))}function b(){var n,e,r=t.event.changedTouches,o=r.length;for(i&&clearTimeout(i),i=setTimeout((function(){i=null}),500),n=0;n<o;++n)(e=c[r[n].identifier])&&(ln(),e("end"))}function m(n,e,r,i,o){var a,f,h,p=r(e,n),v=s.copy();if(Wt(new gn(d,"beforestart",a,n,l,p[0],p[1],0,0,v),(function(){return null!=(t.event.subject=a=u.apply(i,o))&&(f=a.x-p[0]||0,h=a.y-p[1]||0,!0)})))return function t(u){var s,g=p;switch(u){case"start":c[n]=t,s=l++;break;case"end":delete c[n],--l;case"drag":p=r(e,n),s=l}Wt(new gn(d,u,a,n,s,p[0]+f,p[1]+h,p[0]-g[0],p[1]-g[1],v),v.apply,v,[u,i,o])}}return d.filter=function(t){return arguments.length?(o="function"==typeof t?t:vn(!!t),d):o},d.container=function(t){return arguments.length?(a="function"==typeof t?t:vn(t),d):a},d.subject=function(t){return arguments.length?(u="function"==typeof t?t:vn(t),d):u},d.touchable=function(t){return arguments.length?(f="function"==typeof t?t:vn(!!t),d):f},d.on=function(){var t=s.on.apply(s,arguments);return t===s?d:t},d.clickDistance=function(t){return arguments.length?(h=(t=+t)*t,d):Math.sqrt(h)},d},t.dragDisable=dn,t.dragEnable=pn,t.dsvFormat=Fo,t.csvParse=Ho,t.csvParseRows=jo,t.csvFormat=Xo,t.csvFormatRows=Go,t.tsvParse=$o,t.tsvParseRows=Wo,t.tsvFormat=Zo,t.tsvFormatRows=Qo,t.easeLinear=function(t){return+t},t.easeQuad=oi,t.easeQuadIn=function(t){return t*t},t.easeQuadOut=function(t){return t*(2-t)},t.easeQuadInOut=oi,t.easeCubic=ai,t.easeCubicIn=function(t){return t*t*t},t.easeCubicOut=function(t){return--t*t*t+1},t.easeCubicInOut=ai,t.easePoly=ci,t.easePolyIn=ui,t.easePolyOut=fi,t.easePolyInOut=ci,t.easeSin=hi,t.easeSinIn=function(t){return 1-Math.cos(t*li)},t.easeSinOut=function(t){return Math.sin(t*li)},t.easeSinInOut=hi,t.easeExp=di,t.easeExpIn=function(t){return Math.pow(2,10*t-10)},t.easeExpOut=function(t){return 1-Math.pow(2,-10*t)},t.easeExpInOut=di,t.easeCircle=pi,t.easeCircleIn=function(t){return 1-Math.sqrt(1-t*t)},t.easeCircleOut=function(t){return Math.sqrt(1- --t*t)},t.easeCircleInOut=pi,t.easeBounce=gi,t.easeBounceIn=function(t){return 1-gi(1-t)},t.easeBounceOut=gi,t.easeBounceInOut=function(t){return((t*=2)<=1?1-gi(1-t):gi(t-1)+1)/2},t.easeBack=bi,t.easeBackIn=yi,t.easeBackOut=_i,t.easeBackInOut=bi,t.easeElastic=wi,t.easeElasticIn=xi,t.easeElasticOut=wi,t.easeElasticInOut=Mi,t.blob=function(t,n){return fetch(t,n).then(Jo)},t.buffer=function(t,n){return fetch(t,n).then(Ko)},t.dsv=function(t,n,e,r){3===arguments.length&&"function"==typeof e&&(r=e,e=void 0);var i=Fo(t);return na(n,e).then((function(t){return i.parse(t,r)}))},t.csv=ra,t.tsv=ia,t.image=function(t,n){return new Promise((function(e,r){var i=new Image;for(var o in n)i[o]=n[o];i.onerror=r,i.onload=function(){e(i)},i.src=t}))},t.json=function(t,n){return fetch(t,n).then(oa)},t.text=na,t.xml=ua,t.html=fa,t.svg=ca,t.forceCenter=function(t,n){var e;function r(){var r,i,o=e.length,a=0,u=0;for(r=0;r<o;++r)a+=(i=e[r]).x,u+=i.y;for(a=a/o-t,u=u/o-n,r=0;r<o;++r)(i=e[r]).x-=a,i.y-=u}return null==t&&(t=0),null==n&&(n=0),r.initialize=function(t){e=t},r.x=function(n){return arguments.length?(t=+n,r):t},r.y=function(t){return arguments.length?(n=+t,r):n},r},t.forceCollide=function(t){var n,e,r=1,i=1;function o(){for(var t,o,u,f,c,s,l,h=n.length,d=0;d<i;++d)for(o=ga(n,ma,xa).visitAfter(a),t=0;t<h;++t)u=n[t],s=e[u.index],l=s*s,f=u.x+u.vx,c=u.y+u.vy,o.visit(p);function p(t,n,e,i,o){var a=t.data,h=t.r,d=s+h;if(!a)return n>f+d||i<f-d||e>c+d||o<c-d;if(a.index>u.index){var p=f-a.x-a.vx,v=c-a.y-a.vy,g=p*p+v*v;g<d*d&&(0===p&&(g+=(p=la())*p),0===v&&(g+=(v=la())*v),g=(d-(g=Math.sqrt(g)))/g*r,u.vx+=(p*=g)*(d=(h*=h)/(l+h)),u.vy+=(v*=g)*d,a.vx-=p*(d=1-d),a.vy-=v*d)}}}function a(t){if(t.data)return t.r=e[t.data.index];for(var n=t.r=0;n<4;++n)t[n]&&t[n].r>t.r&&(t.r=t[n].r)}function u(){if(n){var r,i,o=n.length;for(e=new Array(o),r=0;r<o;++r)i=n[r],e[i.index]=+t(i,r,n)}}return"function"!=typeof t&&(t=sa(null==t?1:+t)),o.initialize=function(t){n=t,u()},o.iterations=function(t){return arguments.length?(i=+t,o):i},o.strength=function(t){return arguments.length?(r=+t,o):r},o.radius=function(n){return arguments.length?(t="function"==typeof n?n:sa(+n),u(),o):t},o},t.forceLink=function(t){var n,e,r,i,o,a=wa,u=function(t){return 1/Math.min(i[t.source.index],i[t.target.index])},f=sa(30),c=1;function s(r){for(var i=0,a=t.length;i<c;++i)for(var u,f,s,l,h,d,p,v=0;v<a;++v)f=(u=t[v]).source,l=(s=u.target).x+s.vx-f.x-f.vx||la(),h=s.y+s.vy-f.y-f.vy||la(),l*=d=((d=Math.sqrt(l*l+h*h))-e[v])/d*r*n[v],h*=d,s.vx-=l*(p=o[v]),s.vy-=h*p,f.vx+=l*(p=1-p),f.vy+=h*p}function l(){if(r){var u,f,c=r.length,s=t.length,l=go(r,a);for(u=0,i=new Array(c);u<s;++u)(f=t[u]).index=u,"object"!=typeof f.source&&(f.source=Ma(l,f.source)),"object"!=typeof f.target&&(f.target=Ma(l,f.target)),i[f.source.index]=(i[f.source.index]||0)+1,i[f.target.index]=(i[f.target.index]||0)+1;for(u=0,o=new Array(s);u<s;++u)f=t[u],o[u]=i[f.source.index]/(i[f.source.index]+i[f.target.index]);n=new Array(s),h(),e=new Array(s),d()}}function h(){if(r)for(var e=0,i=t.length;e<i;++e)n[e]=+u(t[e],e,t)}function d(){if(r)for(var n=0,i=t.length;n<i;++n)e[n]=+f(t[n],n,t)}return null==t&&(t=[]),s.initialize=function(t){r=t,l()},s.links=function(n){return arguments.length?(t=n,l(),s):t},s.id=function(t){return arguments.length?(a=t,s):a},s.iterations=function(t){return arguments.length?(c=+t,s):c},s.strength=function(t){return arguments.length?(u="function"==typeof t?t:sa(+t),h(),s):u},s.distance=function(t){return arguments.length?(f="function"==typeof t?t:sa(+t),d(),s):f},s},t.forceManyBody=function(){var t,n,e,r,i=sa(-30),o=1,a=1/0,u=.81;function f(r){var i,o=t.length,a=ga(t,Aa,Ta).visitAfter(s);for(e=r,i=0;i<o;++i)n=t[i],a.visit(l)}function c(){if(t){var n,e,o=t.length;for(r=new Array(o),n=0;n<o;++n)e=t[n],r[e.index]=+i(e,n,t)}}function s(t){var n,e,i,o,a,u=0,f=0;if(t.length){for(i=o=a=0;a<4;++a)(n=t[a])&&(e=Math.abs(n.value))&&(u+=n.value,f+=e,i+=e*n.x,o+=e*n.y);t.x=i/f,t.y=o/f}else{(n=t).x=n.data.x,n.y=n.data.y;do{u+=r[n.data.index]}while(n=n.next)}t.value=u}function l(t,i,f,c){if(!t.value)return!0;var s=t.x-n.x,l=t.y-n.y,h=c-i,d=s*s+l*l;if(h*h/u<d)return d<a&&(0===s&&(d+=(s=la())*s),0===l&&(d+=(l=la())*l),d<o&&(d=Math.sqrt(o*d)),n.vx+=s*t.value*e/d,n.vy+=l*t.value*e/d),!0;if(!(t.length||d>=a)){(t.data!==n||t.next)&&(0===s&&(d+=(s=la())*s),0===l&&(d+=(l=la())*l),d<o&&(d=Math.sqrt(o*d)));do{t.data!==n&&(h=r[t.data.index]*e/d,n.vx+=s*h,n.vy+=l*h)}while(t=t.next)}}return f.initialize=function(n){t=n,c()},f.strength=function(t){return arguments.length?(i="function"==typeof t?t:sa(+t),c(),f):i},f.distanceMin=function(t){return arguments.length?(o=t*t,f):Math.sqrt(o)},f.distanceMax=function(t){return arguments.length?(a=t*t,f):Math.sqrt(a)},f.theta=function(t){return arguments.length?(u=t*t,f):Math.sqrt(u)},f},t.forceRadial=function(t,n,e){var r,i,o,a=sa(.1);function u(t){for(var a=0,u=r.length;a<u;++a){var f=r[a],c=f.x-n||1e-6,s=f.y-e||1e-6,l=Math.sqrt(c*c+s*s),h=(o[a]-l)*i[a]*t/l;f.vx+=c*h,f.vy+=s*h}}function f(){if(r){var n,e=r.length;for(i=new Array(e),o=new Array(e),n=0;n<e;++n)o[n]=+t(r[n],n,r),i[n]=isNaN(o[n])?0:+a(r[n],n,r)}}return"function"!=typeof t&&(t=sa(+t)),null==n&&(n=0),null==e&&(e=0),u.initialize=function(t){r=t,f()},u.strength=function(t){return arguments.length?(a="function"==typeof t?t:sa(+t),f(),u):a},u.radius=function(n){return arguments.length?(t="function"==typeof n?n:sa(+n),f(),u):t},u.x=function(t){return arguments.length?(n=+t,u):n},u.y=function(t){return arguments.length?(e=+t,u):e},u},t.forceSimulation=function(t){var n,e=1,r=.001,i=1-Math.pow(r,1/300),o=0,a=.6,u=go(),f=xr(s),c=Y("tick","end");function s(){l(),c.call("tick",n),e<r&&(f.stop(),c.call("end",n))}function l(){var n,r,f=t.length;for(e+=(o-e)*i,u.each((function(t){t(e)})),n=0;n<f;++n)null==(r=t[n]).fx?r.x+=r.vx*=a:(r.x=r.fx,r.vx=0),null==r.fy?r.y+=r.vy*=a:(r.y=r.fy,r.vy=0)}function h(){for(var n,e=0,r=t.length;e<r;++e){if((n=t[e]).index=e,isNaN(n.x)||isNaN(n.y)){var i=10*Math.sqrt(e),o=e*Na;n.x=i*Math.cos(o),n.y=i*Math.sin(o)}(isNaN(n.vx)||isNaN(n.vy))&&(n.vx=n.vy=0)}}function d(n){return n.initialize&&n.initialize(t),n}return null==t&&(t=[]),h(),n={tick:l,restart:function(){return f.restart(s),n},stop:function(){return f.stop(),n},nodes:function(e){return arguments.length?(t=e,h(),u.each(d),n):t},alpha:function(t){return arguments.length?(e=+t,n):e},alphaMin:function(t){return arguments.length?(r=+t,n):r},alphaDecay:function(t){return arguments.length?(i=+t,n):+i},alphaTarget:function(t){return arguments.length?(o=+t,n):o},velocityDecay:function(t){return arguments.length?(a=1-t,n):1-a},force:function(t,e){return arguments.length>1?(null==e?u.remove(t):u.set(t,d(e)),n):u.get(t)},find:function(n,e,r){var i,o,a,u,f,c=0,s=t.length;for(null==r?r=1/0:r*=r,c=0;c<s;++c)(a=(i=n-(u=t[c]).x)*i+(o=e-u.y)*o)<r&&(f=u,r=a);return f},on:function(t,e){return arguments.length>1?(c.on(t,e),n):c.on(t)}}},t.forceX=function(t){var n,e,r,i=sa(.1);function o(t){for(var i,o=0,a=n.length;o<a;++o)(i=n[o]).vx+=(r[o]-i.x)*e[o]*t}function a(){if(n){var o,a=n.length;for(e=new Array(a),r=new Array(a),o=0;o<a;++o)e[o]=isNaN(r[o]=+t(n[o],o,n))?0:+i(n[o],o,n)}}return"function"!=typeof t&&(t=sa(null==t?0:+t)),o.initialize=function(t){n=t,a()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:sa(+t),a(),o):i},o.x=function(n){return arguments.length?(t="function"==typeof n?n:sa(+n),a(),o):t},o},t.forceY=function(t){var n,e,r,i=sa(.1);function o(t){for(var i,o=0,a=n.length;o<a;++o)(i=n[o]).vy+=(r[o]-i.y)*e[o]*t}function a(){if(n){var o,a=n.length;for(e=new Array(a),r=new Array(a),o=0;o<a;++o)e[o]=isNaN(r[o]=+t(n[o],o,n))?0:+i(n[o],o,n)}}return"function"!=typeof t&&(t=sa(null==t?0:+t)),o.initialize=function(t){n=t,a()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:sa(+t),a(),o):i},o.y=function(n){return arguments.length?(t="function"==typeof n?n:sa(+n),a(),o):t},o},t.formatDefaultLocale=Ya,t.formatLocale=Oa,t.formatSpecifier=Pa,t.precisionFixed=Ba,t.precisionPrefix=Fa,t.precisionRound=Ia,t.geoArea=function(t){return Su.reset(),mu(t,Eu),2*Su},t.geoBounds=function(t){var n,e,r,i,o,a,u;if(Hu=Iu=-(Bu=Fu=1/0),$u=[],mu(t,pf),e=$u.length){for($u.sort(Mf),n=1,o=[r=$u[0]];n<e;++n)Af(r,(i=$u[n])[0])||Af(r,i[1])?(wf(r[0],i[1])>wf(r[0],r[1])&&(r[1]=i[1]),wf(i[0],r[1])>wf(r[0],r[1])&&(r[0]=i[0])):o.push(r=i);for(a=-1/0,n=0,r=o[e=o.length-1];n<=e;r=i,++n)i=o[n],(u=wf(r[1],i[0]))>a&&(a=u,Bu=i[0],Iu=r[1])}return $u=Wu=null,Bu===1/0||Fu===1/0?[[NaN,NaN],[NaN,NaN]]:[[Bu,Fu],[Iu,Hu]]},t.geoCentroid=function(t){Zu=Qu=Ju=Ku=tf=nf=ef=rf=of=af=uf=0,mu(t,Tf);var n=of,e=af,r=uf,i=n*n+e*e+r*r;return i<1e-12&&(n=nf,e=ef,r=rf,Qu<1e-6&&(n=Ju,e=Ku,r=tf),(i=n*n+e*e+r*r)<1e-12)?[NaN,NaN]:[nu(e,n)*Qa,hu(r/cu(i))*Qa]},t.geoCircle=function(){var t,n,e=Uf([0,0]),r=Uf(90),i=Uf(6),o={point:function(e,r){t.push(e=n(e,r)),e[0]*=Qa,e[1]*=Qa}};function a(){var a=e.apply(this,arguments),u=r.apply(this,arguments)*Ja,f=i.apply(this,arguments)*Ja;return t=[],n=Yf(-a[0]*Ja,-a[1]*Ja,0).invert,jf(o,u,f,1),a={type:"Polygon",coordinates:[t]},t=n=null,a}return a.center=function(t){return arguments.length?(e="function"==typeof t?t:Uf([+t[0],+t[1]]),a):e},a.radius=function(t){return arguments.length?(r="function"==typeof t?t:Uf(+t),a):r},a.precision=function(t){return arguments.length?(i="function"==typeof t?t:Uf(+t),a):i},a},t.geoClipAntimeridian=ec,t.geoClipCircle=rc,t.geoClipExtent=function(){var t,n,e,r=0,i=0,o=960,a=500;return e={stream:function(e){return t&&n===e?t:t=ic(r,i,o,a)(n=e)},extent:function(u){return arguments.length?(r=+u[0][0],i=+u[0][1],o=+u[1][0],a=+u[1][1],t=n=null,e):[[r,i],[o,a]]}}},t.geoClipRectangle=ic,t.geoContains=function(t,n){return(t&&yc.hasOwnProperty(t.type)?yc[t.type]:bc)(t,n)},t.geoDistance=gc,t.geoGraticule=Sc,t.geoGraticule10=function(){return Sc()()},t.geoInterpolate=function(t,n){var e=t[0]*Ja,r=t[1]*Ja,i=n[0]*Ja,o=n[1]*Ja,a=eu(r),u=uu(r),f=eu(o),c=uu(o),s=a*eu(e),l=a*uu(e),h=f*eu(i),d=f*uu(i),p=2*hu(cu(du(o-r)+a*f*du(i-e))),v=uu(p),g=p?function(t){var n=uu(t*=p)/v,e=uu(p-t)/v,r=e*s+n*h,i=e*l+n*d,o=e*u+n*c;return[nu(i,r)*Qa,nu(o,cu(r*r+i*i))*Qa]}:function(){return[e*Qa,r*Qa]};return g.distance=p,g},t.geoLength=dc,t.geoPath=function(t,n){var e,r,i=4.5;function o(t){return t&&("function"==typeof i&&r.pointRadius(+i.apply(this,arguments)),mu(t,e(r))),r.result()}return o.area=function(t){return mu(t,e(Dc)),Dc.result()},o.measure=function(t){return mu(t,e(xs)),xs.result()},o.bounds=function(t){return mu(t,e(jc)),jc.result()},o.centroid=function(t){return mu(t,e(is)),is.result()},o.projection=function(n){return arguments.length?(e=null==n?(t=null,Ec):(t=n).stream,o):t},o.context=function(t){return arguments.length?(r=null==t?(n=null,new As):new ps(n=t),"function"!=typeof i&&r.pointRadius(i),o):n},o.pointRadius=function(t){return arguments.length?(i="function"==typeof t?t:(r.pointRadius(+t),+t),o):i},o.projection(t).context(n)},t.geoAlbers=Hs,t.geoAlbersUsa=function(){var t,n,e,r,i,o,a=Hs(),u=Is().rotate([154,0]).center([-2,58.5]).parallels([55,65]),f=Is().rotate([157,0]).center([-3,19.9]).parallels([8,18]),c={point:function(t,n){o=[t,n]}};function s(t){var n=t[0],a=t[1];return o=null,e.point(n,a),o||(r.point(n,a),o)||(i.point(n,a),o)}function l(){return t=n=null,s}return s.invert=function(t){var n=a.scale(),e=a.translate(),r=(t[0]-e[0])/n,i=(t[1]-e[1])/n;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?u:i>=.166&&i<.234&&r>=-.214&&r<-.115?f:a).invert(t)},s.stream=function(e){return t&&n===e?t:(r=[a.stream(n=e),u.stream(e),f.stream(e)],i=r.length,t={point:function(t,n){for(var e=-1;++e<i;)r[e].point(t,n)},sphere:function(){for(var t=-1;++t<i;)r[t].sphere()},lineStart:function(){for(var t=-1;++t<i;)r[t].lineStart()},lineEnd:function(){for(var t=-1;++t<i;)r[t].lineEnd()},polygonStart:function(){for(var t=-1;++t<i;)r[t].polygonStart()},polygonEnd:function(){for(var t=-1;++t<i;)r[t].polygonEnd()}});var r,i},s.precision=function(t){return arguments.length?(a.precision(t),u.precision(t),f.precision(t),l()):a.precision()},s.scale=function(t){return arguments.length?(a.scale(t),u.scale(.35*t),f.scale(t),s.translate(a.translate())):a.scale()},s.translate=function(t){if(!arguments.length)return a.translate();var n=a.scale(),o=+t[0],s=+t[1];return e=a.translate(t).clipExtent([[o-.455*n,s-.238*n],[o+.455*n,s+.238*n]]).stream(c),r=u.translate([o-.307*n,s+.201*n]).clipExtent([[o-.425*n+1e-6,s+.12*n+1e-6],[o-.214*n-1e-6,s+.234*n-1e-6]]).stream(c),i=f.translate([o-.205*n,s+.212*n]).clipExtent([[o-.214*n+1e-6,s+.166*n+1e-6],[o-.115*n-1e-6,s+.234*n-1e-6]]).stream(c),l()},s.fitExtent=function(t,n){return ks(s,t,n)},s.fitSize=function(t,n){return Cs(s,t,n)},s.fitWidth=function(t,n){return Ps(s,t,n)},s.fitHeight=function(t,n){return zs(s,t,n)},s.scale(1070)},t.geoAzimuthalEqualArea=function(){return Os(Gs).scale(124.75).clipAngle(179.999)},t.geoAzimuthalEqualAreaRaw=Gs,t.geoAzimuthalEquidistant=function(){return Os(Vs).scale(79.4188).clipAngle(179.999)},t.geoAzimuthalEquidistantRaw=Vs,t.geoConicConformal=function(){return Bs(Qs).scale(109.5).parallels([30,30])},t.geoConicConformalRaw=Qs,t.geoConicEqualArea=Is,t.geoConicEqualAreaRaw=Fs,t.geoConicEquidistant=function(){return Bs(Ks).scale(131.154).center([0,13.9389])},t.geoConicEquidistantRaw=Ks,t.geoEqualEarth=function(){return Os(ol).scale(177.158)},t.geoEqualEarthRaw=ol,t.geoEquirectangular=function(){return Os(Js).scale(152.63)},t.geoEquirectangularRaw=Js,t.geoGnomonic=function(){return Os(al).scale(144.049).clipAngle(60)},t.geoGnomonicRaw=al,t.geoIdentity=function(){var t,n,e,r,i,o,a=1,u=0,f=0,c=1,s=1,l=Ec,h=null,d=Ec;function p(){return r=i=null,o}return o={stream:function(t){return r&&i===t?r:r=l(d(i=t))},postclip:function(r){return arguments.length?(d=r,h=t=n=e=null,p()):d},clipExtent:function(r){return arguments.length?(d=null==r?(h=t=n=e=null,Ec):ic(h=+r[0][0],t=+r[0][1],n=+r[1][0],e=+r[1][1]),p()):null==h?null:[[h,t],[n,e]]},scale:function(t){return arguments.length?(l=ul((a=+t)*c,a*s,u,f),p()):a},translate:function(t){return arguments.length?(l=ul(a*c,a*s,u=+t[0],f=+t[1]),p()):[u,f]},reflectX:function(t){return arguments.length?(l=ul(a*(c=t?-1:1),a*s,u,f),p()):c<0},reflectY:function(t){return arguments.length?(l=ul(a*c,a*(s=t?-1:1),u,f),p()):s<0},fitExtent:function(t,n){return ks(o,t,n)},fitSize:function(t,n){return Cs(o,t,n)},fitWidth:function(t,n){return Ps(o,t,n)},fitHeight:function(t,n){return zs(o,t,n)}}},t.geoProjection=Os,t.geoProjectionMutator=Ys,t.geoMercator=function(){return Ws($s).scale(961/Za)},t.geoMercatorRaw=$s,t.geoNaturalEarth1=function(){return Os(fl).scale(175.295)},t.geoNaturalEarth1Raw=fl,t.geoOrthographic=function(){return Os(cl).scale(249.5).clipAngle(90.000001)},t.geoOrthographicRaw=cl,t.geoStereographic=function(){return Os(sl).scale(250).clipAngle(142)},t.geoStereographicRaw=sl,t.geoTransverseMercator=function(){var t=Ws(ll),n=t.center,e=t.rotate;return t.center=function(t){return arguments.length?n([-t[1],t[0]]):[(t=n())[1],-t[0]]},t.rotate=function(t){return arguments.length?e([t[0],t[1],t.length>2?t[2]+90:90]):[(t=e())[0],t[1],t[2]-90]},e([0,0,90]).scale(159.155)},t.geoTransverseMercatorRaw=ll,t.geoRotation=Hf,t.geoStream=mu,t.geoTransform=function(t){return{stream:Ns(t)}},t.cluster=function(){var t=hl,n=1,e=1,r=!1;function i(i){var o,a=0;i.eachAfter((function(n){var e=n.children;e?(n.x=function(t){return t.reduce(dl,0)/t.length}(e),n.y=function(t){return 1+t.reduce(pl,0)}(e)):(n.x=o?a+=t(n,o):0,n.y=0,o=n)}));var u=function(t){for(var n;n=t.children;)t=n[0];return t}(i),f=function(t){for(var n;n=t.children;)t=n[n.length-1];return t}(i),c=u.x-t(u,f)/2,s=f.x+t(f,u)/2;return i.eachAfter(r?function(t){t.x=(t.x-i.x)*n,t.y=(i.y-t.y)*e}:function(t){t.x=(t.x-c)/(s-c)*n,t.y=(1-(i.y?t.y/i.y:1))*e})}return i.separation=function(n){return arguments.length?(t=n,i):t},i.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],i):r?null:[n,e]},i.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],i):r?[n,e]:null},i},t.hierarchy=gl,t.pack=function(){var t=null,n=1,e=1,r=ql;function i(i){return i.x=n/2,i.y=e/2,t?i.eachBefore(Bl(t)).eachAfter(Fl(r,.5)).eachBefore(Il(1)):i.eachBefore(Bl(Yl)).eachAfter(Fl(ql,1)).eachAfter(Fl(r,i.r/Math.min(n,e))).eachBefore(Il(Math.min(n,e)/(2*i.r))),i}return i.radius=function(n){return arguments.length?(t=Dl(n),i):t},i.size=function(t){return arguments.length?(n=+t[0],e=+t[1],i):[n,e]},i.padding=function(t){return arguments.length?(r="function"==typeof t?t:Ol(+t),i):r},i},t.packSiblings=function(t){return Ll(t),t},t.packEnclose=wl,t.partition=function(){var t=1,n=1,e=0,r=!1;function i(i){var o=i.height+1;return i.x0=i.y0=e,i.x1=t,i.y1=n/o,i.eachBefore(function(t,n){return function(r){r.children&&jl(r,r.x0,t*(r.depth+1)/n,r.x1,t*(r.depth+2)/n);var i=r.x0,o=r.y0,a=r.x1-e,u=r.y1-e;a<i&&(i=a=(i+a)/2),u<o&&(o=u=(o+u)/2),r.x0=i,r.y0=o,r.x1=a,r.y1=u}}(n,o)),r&&i.eachBefore(Hl),i}return i.round=function(t){return arguments.length?(r=!!t,i):r},i.size=function(e){return arguments.length?(t=+e[0],n=+e[1],i):[t,n]},i.padding=function(t){return arguments.length?(e=+t,i):e},i},t.stratify=function(){var t=Vl,n=$l;function e(e){var r,i,o,a,u,f,c,s=e.length,l=new Array(s),h={};for(i=0;i<s;++i)r=e[i],u=l[i]=new ml(r),null!=(f=t(r,i,e))&&(f+="")&&(h[c="$"+(u.id=f)]=c in h?Gl:u);for(i=0;i<s;++i)if(u=l[i],null!=(f=n(e[i],i,e))&&(f+="")){if(!(a=h["$"+f]))throw new Error("missing: "+f);if(a===Gl)throw new Error("ambiguous: "+f);a.children?a.children.push(u):a.children=[u],u.parent=a}else{if(o)throw new Error("multiple roots");o=u}if(!o)throw new Error("no root");if(o.parent=Xl,o.eachBefore((function(t){t.depth=t.parent.depth+1,--s})).eachBefore(bl),o.parent=null,s>0)throw new Error("cycle");return o}return e.id=function(n){return arguments.length?(t=Ul(n),e):t},e.parentId=function(t){return arguments.length?(n=Ul(t),e):n},e},t.tree=function(){var t=Wl,n=1,e=1,r=null;function i(i){var f=function(t){for(var n,e,r,i,o,a=new th(t,0),u=[a];n=u.pop();)if(r=n._.children)for(n.children=new Array(o=r.length),i=o-1;i>=0;--i)u.push(e=n.children[i]=new th(r[i],i)),e.parent=n;return(a.parent=new th(null,0)).children=[a],a}(i);if(f.eachAfter(o),f.parent.m=-f.z,f.eachBefore(a),r)i.eachBefore(u);else{var c=i,s=i,l=i;i.eachBefore((function(t){t.x<c.x&&(c=t),t.x>s.x&&(s=t),t.depth>l.depth&&(l=t)}));var h=c===s?1:t(c,s)/2,d=h-c.x,p=n/(s.x+h+d),v=e/(l.depth||1);i.eachBefore((function(t){t.x=(t.x+d)*p,t.y=t.depth*v}))}return i}function o(n){var e=n.children,r=n.parent.children,i=n.i?r[n.i-1]:null;if(e){!function(t){for(var n,e=0,r=0,i=t.children,o=i.length;--o>=0;)(n=i[o]).z+=e,n.m+=e,e+=n.s+(r+=n.c)}(n);var o=(e[0].z+e[e.length-1].z)/2;i?(n.z=i.z+t(n._,i._),n.m=n.z-o):n.z=o}else i&&(n.z=i.z+t(n._,i._));n.parent.A=function(n,e,r){if(e){for(var i,o=n,a=n,u=e,f=o.parent.children[0],c=o.m,s=a.m,l=u.m,h=f.m;u=Ql(u),o=Zl(o),u&&o;)f=Zl(f),(a=Ql(a)).a=n,(i=u.z+l-o.z-c+t(u._,o._))>0&&(Jl(Kl(u,n,r),n,i),c+=i,s+=i),l+=u.m,c+=o.m,h+=f.m,s+=a.m;u&&!Ql(a)&&(a.t=u,a.m+=l-s),o&&!Zl(f)&&(f.t=o,f.m+=c-h,r=n)}return r}(n,i,n.parent.A||r[0])}function a(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function u(t){t.x*=n,t.y=t.depth*e}return i.separation=function(n){return arguments.length?(t=n,i):t},i.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],i):r?null:[n,e]},i.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],i):r?[n,e]:null},i},t.treemap=function(){var t=ih,n=!1,e=1,r=1,i=[0],o=ql,a=ql,u=ql,f=ql,c=ql;function s(t){return t.x0=t.y0=0,t.x1=e,t.y1=r,t.eachBefore(l),i=[0],n&&t.eachBefore(Hl),t}function l(n){var e=i[n.depth],r=n.x0+e,s=n.y0+e,l=n.x1-e,h=n.y1-e;l<r&&(r=l=(r+l)/2),h<s&&(s=h=(s+h)/2),n.x0=r,n.y0=s,n.x1=l,n.y1=h,n.children&&(e=i[n.depth+1]=o(n)/2,r+=c(n)-e,s+=a(n)-e,(l-=u(n)-e)<r&&(r=l=(r+l)/2),(h-=f(n)-e)<s&&(s=h=(s+h)/2),t(n,r,s,l,h))}return s.round=function(t){return arguments.length?(n=!!t,s):n},s.size=function(t){return arguments.length?(e=+t[0],r=+t[1],s):[e,r]},s.tile=function(n){return arguments.length?(t=Ul(n),s):t},s.padding=function(t){return arguments.length?s.paddingInner(t).paddingOuter(t):s.paddingInner()},s.paddingInner=function(t){return arguments.length?(o="function"==typeof t?t:Ol(+t),s):o},s.paddingOuter=function(t){return arguments.length?s.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t):s.paddingTop()},s.paddingTop=function(t){return arguments.length?(a="function"==typeof t?t:Ol(+t),s):a},s.paddingRight=function(t){return arguments.length?(u="function"==typeof t?t:Ol(+t),s):u},s.paddingBottom=function(t){return arguments.length?(f="function"==typeof t?t:Ol(+t),s):f},s.paddingLeft=function(t){return arguments.length?(c="function"==typeof t?t:Ol(+t),s):c},s},t.treemapBinary=function(t,n,e,r,i){var o,a,u=t.children,f=u.length,c=new Array(f+1);for(c[0]=a=o=0;o<f;++o)c[o+1]=a+=u[o].value;!function t(n,e,r,i,o,a,f){if(n>=e-1){var s=u[n];return s.x0=i,s.y0=o,s.x1=a,void(s.y1=f)}var l=c[n],h=r/2+l,d=n+1,p=e-1;for(;d<p;){var v=d+p>>>1;c[v]<h?d=v+1:p=v}h-c[d-1]<c[d]-h&&n+1<d&&--d;var g=c[d]-l,y=r-g;if(a-i>f-o){var _=(i*y+a*g)/r;t(n,d,g,i,o,_,f),t(d,e,y,_,o,a,f)}else{var b=(o*y+f*g)/r;t(n,d,g,i,o,a,b),t(d,e,y,i,b,a,f)}}(0,f,t.value,n,e,r,i)},t.treemapDice=jl,t.treemapSlice=nh,t.treemapSliceDice=function(t,n,e,r,i){(1&t.depth?nh:jl)(t,n,e,r,i)},t.treemapSquarify=ih,t.treemapResquarify=oh,t.interpolate=Oe,t.interpolateArray=Pe,t.interpolateBasis=me,t.interpolateBasisClosed=xe,t.interpolateDate=ze,t.interpolateDiscrete=function(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}},t.interpolateHue=function(t,n){var e=Ae(+t,+n);return function(t){var n=e(t);return n-360*Math.floor(n/360)}},t.interpolateNumber=Re,t.interpolateObject=Le,t.interpolateRound=Ye,t.interpolateString=qe,t.interpolateTransformCss=$e,t.interpolateTransformSvg=We,t.interpolateZoom=Je,t.interpolateRgb=Se,t.interpolateRgbBasis=ke,t.interpolateRgbBasisClosed=Ce,t.interpolateHsl=tr,t.interpolateHslLong=nr,t.interpolateLab=function(t,n){var e=Ne((t=Kn(t)).l,(n=Kn(n)).l),r=Ne(t.a,n.a),i=Ne(t.b,n.b),o=Ne(t.opacity,n.opacity);return function(n){return t.l=e(n),t.a=r(n),t.b=i(n),t.opacity=o(n),t+""}},t.interpolateHcl=rr,t.interpolateHclLong=ir,t.interpolateCubehelix=ar,t.interpolateCubehelixLong=ur,t.piecewise=function(t,n){for(var e=0,r=n.length-1,i=n[0],o=new Array(r<0?0:r);e<r;)o[e]=t(i,i=n[++e]);return function(t){var n=Math.max(0,Math.min(r-1,Math.floor(t*=r)));return o[n](t-n)}},t.quantize=function(t,n){for(var e=new Array(n),r=0;r<n;++r)e[r]=t(r/(n-1));return e},t.path=fo,t.polygonArea=function(t){for(var n,e=-1,r=t.length,i=t[r-1],o=0;++e<r;)n=i,i=t[e],o+=n[1]*i[0]-n[0]*i[1];return o/2},t.polygonCentroid=function(t){for(var n,e,r=-1,i=t.length,o=0,a=0,u=t[i-1],f=0;++r<i;)n=u,u=t[r],f+=e=n[0]*u[1]-u[0]*n[1],o+=(n[0]+u[0])*e,a+=(n[1]+u[1])*e;return[o/(f*=3),a/f]},t.polygonHull=function(t){if((e=t.length)<3)return null;var n,e,r=new Array(e),i=new Array(e);for(n=0;n<e;++n)r[n]=[+t[n][0],+t[n][1],n];for(r.sort(uh),n=0;n<e;++n)i[n]=[r[n][0],-r[n][1]];var o=fh(r),a=fh(i),u=a[0]===o[0],f=a[a.length-1]===o[o.length-1],c=[];for(n=o.length-1;n>=0;--n)c.push(t[r[o[n]][2]]);for(n=+u;n<a.length-f;++n)c.push(t[r[a[n]][2]]);return c},t.polygonContains=function(t,n){for(var e,r,i=t.length,o=t[i-1],a=n[0],u=n[1],f=o[0],c=o[1],s=!1,l=0;l<i;++l)e=(o=t[l])[0],(r=o[1])>u!=c>u&&a<(f-e)*(u-r)/(c-r)+e&&(s=!s),f=e,c=r;return s},t.polygonLength=function(t){for(var n,e,r=-1,i=t.length,o=t[i-1],a=o[0],u=o[1],f=0;++r<i;)n=a,e=u,n-=a=(o=t[r])[0],e-=u=o[1],f+=Math.sqrt(n*n+e*e);return f},t.quadtree=ga,t.randomUniform=sh,t.randomNormal=lh,t.randomLogNormal=hh,t.randomBates=ph,t.randomIrwinHall=dh,t.randomExponential=vh,t.scaleBand=xh,t.scalePoint=function(){return function t(n){var e=n.copy;return n.padding=n.paddingOuter,delete n.paddingInner,delete n.paddingOuter,n.copy=function(){return t(e())},n}(xh().paddingInner(1))},t.scaleIdentity=function t(){var n=[0,1];function e(t){return+t}return e.invert=e,e.domain=e.range=function(t){return arguments.length?(n=yh.call(t,Mh),e):n.slice()},e.copy=function(){return t().domain(n)},Ch(e)},t.scaleLinear=function t(){var n=kh(Th,Re);return n.copy=function(){return Eh(n,t())},Ch(n)},t.scaleLog=function n(){var e=kh(zh,Rh).domain([1,10]),r=e.domain,i=10,o=Uh(10),a=Dh(10);function u(){return o=Uh(i),a=Dh(i),r()[0]<0&&(o=qh(o),a=qh(a)),e}return e.base=function(t){return arguments.length?(i=+t,u()):i},e.domain=function(t){return arguments.length?(r(t),u()):r()},e.ticks=function(t){var n,e=r(),u=e[0],f=e[e.length-1];(n=f<u)&&(h=u,u=f,f=h);var c,s,l,h=o(u),d=o(f),p=null==t?10:+t,v=[];if(!(i%1)&&d-h<p){if(h=Math.round(h)-1,d=Math.round(d)+1,u>0){for(;h<d;++h)for(s=1,c=a(h);s<i;++s)if(!((l=c*s)<u)){if(l>f)break;v.push(l)}}else for(;h<d;++h)for(s=i-1,c=a(h);s>=1;--s)if(!((l=c*s)<u)){if(l>f)break;v.push(l)}}else v=m(h,d,Math.min(d-h,p)).map(a);return n?v.reverse():v},e.tickFormat=function(n,r){if(null==r&&(r=10===i?".0e":","),"function"!=typeof r&&(r=t.format(r)),n===1/0)return r;null==n&&(n=10);var u=Math.max(1,i*n/e.ticks().length);return function(t){var n=t/a(Math.round(o(t)));return n*i<i-.5&&(n*=i),n<=u?r(t):""}},e.nice=function(){return r(Ph(r(),{floor:function(t){return a(Math.floor(o(t)))},ceil:function(t){return a(Math.ceil(o(t)))}}))},e.copy=function(){return Eh(e,n().base(i))},e},t.scaleOrdinal=mh,t.scaleImplicit=bh,t.scalePow=Yh,t.scaleSqrt=function(){return Yh().exponent(.5)},t.scaleQuantile=function t(){var e=[],r=[],o=[];function a(){var t=0,n=Math.max(1,r.length);for(o=new Array(n-1);++t<n;)o[t-1]=A(e,t/n);return u}function u(t){if(!isNaN(t=+t))return r[i(o,t)]}return u.invertExtent=function(t){var n=r.indexOf(t);return n<0?[NaN,NaN]:[n>0?o[n-1]:e[0],n<o.length?o[n]:e[e.length-1]]},u.domain=function(t){if(!arguments.length)return e.slice();e=[];for(var r,i=0,o=t.length;i<o;++i)null==(r=t[i])||isNaN(r=+r)||e.push(r);return e.sort(n),a()},u.range=function(t){return arguments.length?(r=_h.call(t),a()):r.slice()},u.quantiles=function(){return o.slice()},u.copy=function(){return t().domain(e).range(r)},u},t.scaleQuantize=function t(){var n=0,e=1,r=1,o=[.5],a=[0,1];function u(t){if(t<=t)return a[i(o,t,0,r)]}function f(){var t=-1;for(o=new Array(r);++t<r;)o[t]=((t+1)*e-(t-r)*n)/(r+1);return u}return u.domain=function(t){return arguments.length?(n=+t[0],e=+t[1],f()):[n,e]},u.range=function(t){return arguments.length?(r=(a=_h.call(t)).length-1,f()):a.slice()},u.invertExtent=function(t){var i=a.indexOf(t);return i<0?[NaN,NaN]:i<1?[n,o[0]]:i>=r?[o[r-1],e]:[o[i-1],o[i]]},u.copy=function(){return t().domain([n,e]).range(a)},Ch(u)},t.scaleThreshold=function t(){var n=[.5],e=[0,1],r=1;function o(t){if(t<=t)return e[i(n,t,0,r)]}return o.domain=function(t){return arguments.length?(n=_h.call(t),r=Math.min(n.length,e.length-1),o):n.slice()},o.range=function(t){return arguments.length?(e=_h.call(t),r=Math.min(n.length,e.length-1),o):e.slice()},o.invertExtent=function(t){var r=e.indexOf(t);return[n[r-1],n[r]]},o.copy=function(){return t().domain(n).range(e)},o},t.scaleTime=function(){return cv(gd,pd,td,Qh,Wh,Vh,Xh,Hh,t.timeFormat).domain([new Date(2e3,0,1),new Date(2e3,0,2)])},t.scaleUtc=function(){return cv(Fd,Yd,Td,wd,md,_d,Xh,Hh,t.utcFormat).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)])},t.scaleSequential=function t(n){var e=0,r=1,i=1,o=!1;function a(t){var r=(t-e)*i;return n(o?Math.max(0,Math.min(1,r)):r)}return a.domain=function(t){return arguments.length?(e=+t[0],r=+t[1],i=e===r?0:1/(r-e),a):[e,r]},a.clamp=function(t){return arguments.length?(o=!!t,a):o},a.interpolator=function(t){return arguments.length?(n=t,a):n},a.copy=function(){return t(n).domain([e,r]).clamp(o)},Ch(a)},t.scaleDiverging=function t(n){var e=0,r=.5,i=1,o=1,a=1,u=!1;function f(t){var e=.5+((t=+t)-r)*(t<r?o:a);return n(u?Math.max(0,Math.min(1,e)):e)}return f.domain=function(t){return arguments.length?(e=+t[0],r=+t[1],i=+t[2],o=e===r?0:.5/(r-e),a=r===i?0:.5/(i-r),f):[e,r,i]},f.clamp=function(t){return arguments.length?(u=!!t,f):u},f.interpolator=function(t){return arguments.length?(n=t,f):n},f.copy=function(){return t(n).domain([e,r,i]).clamp(u)},Ch(f)},t.schemeCategory10=lv,t.schemeAccent=hv,t.schemeDark2=dv,t.schemePaired=pv,t.schemePastel1=vv,t.schemePastel2=gv,t.schemeSet1=yv,t.schemeSet2=_v,t.schemeSet3=bv,t.interpolateBrBG=wv,t.schemeBrBG=xv,t.interpolatePRGn=Av,t.schemePRGn=Mv,t.interpolatePiYG=Nv,t.schemePiYG=Tv,t.interpolatePuOr=Ev,t.schemePuOr=Sv,t.interpolateRdBu=Cv,t.schemeRdBu=kv,t.interpolateRdGy=zv,t.schemeRdGy=Pv,t.interpolateRdYlBu=Lv,t.schemeRdYlBu=Rv,t.interpolateRdYlGn=Uv,t.schemeRdYlGn=Dv,t.interpolateSpectral=Ov,t.schemeSpectral=qv,t.interpolateBuGn=Bv,t.schemeBuGn=Yv,t.interpolateBuPu=Iv,t.schemeBuPu=Fv,t.interpolateGnBu=jv,t.schemeGnBu=Hv,t.interpolateOrRd=Gv,t.schemeOrRd=Xv,t.interpolatePuBuGn=$v,t.schemePuBuGn=Vv,t.interpolatePuBu=Zv,t.schemePuBu=Wv,t.interpolatePuRd=Jv,t.schemePuRd=Qv,t.interpolateRdPu=tg,t.schemeRdPu=Kv,t.interpolateYlGnBu=eg,t.schemeYlGnBu=ng,t.interpolateYlGn=ig,t.schemeYlGn=rg,t.interpolateYlOrBr=ag,t.schemeYlOrBr=og,t.interpolateYlOrRd=fg,t.schemeYlOrRd=ug,t.interpolateBlues=sg,t.schemeBlues=cg,t.interpolateGreens=hg,t.schemeGreens=lg,t.interpolateGreys=pg,t.schemeGreys=dg,t.interpolatePurples=gg,t.schemePurples=vg,t.interpolateReds=_g,t.schemeReds=yg,t.interpolateOranges=mg,t.schemeOranges=bg,t.interpolateCubehelixDefault=xg,t.interpolateRainbow=function(t){(t<0||t>1)&&(t-=Math.floor(t));var n=Math.abs(t-.5);return Ag.h=360*t-100,Ag.s=1.5-1.5*n,Ag.l=.8-.9*n,Ag+""},t.interpolateWarm=wg,t.interpolateCool=Mg,t.interpolateSinebow=function(t){var n;return t=(.5-t)*Math.PI,Tg.r=255*(n=Math.sin(t))*n,Tg.g=255*(n=Math.sin(t+Ng))*n,Tg.b=255*(n=Math.sin(t+Sg))*n,Tg+""},t.interpolateViridis=kg,t.interpolateMagma=Cg,t.interpolateInferno=Pg,t.interpolatePlasma=zg,t.create=function(t){return en(W(t).call(document.documentElement))},t.creator=W,t.local=on,t.matcher=rt,t.mouse=cn,t.namespace=G,t.namespaces=X,t.clientPoint=fn,t.select=en,t.selectAll=function(t){return"string"==typeof t?new tn([document.querySelectorAll(t)],[document.documentElement]):new tn([null==t?[]:t],Kt)},t.selection=nn,t.selector=Q,t.selectorAll=K,t.style=bt,t.touch=sn,t.touches=function(t,n){null==n&&(n=un().touches);for(var e=0,r=n?n.length:0,i=new Array(r);e<r;++e)i[e]=fn(t,n[e]);return i},t.window=vt,t.customEvent=Wt,t.arc=function(){var t=Gg,n=Vg,e=Rg(0),r=null,i=$g,o=Wg,a=Zg,u=null;function f(){var f,c,s=+t.apply(this,arguments),l=+n.apply(this,arguments),h=i.apply(this,arguments)-Ig,d=o.apply(this,arguments)-Ig,p=Lg(d-h),v=d>h;if(u||(u=f=fo()),l<s&&(c=l,l=s,s=c),l>1e-12)if(p>Hg-1e-12)u.moveTo(l*Ug(h),l*Yg(h)),u.arc(0,0,l,h,d,!v),s>1e-12&&(u.moveTo(s*Ug(d),s*Yg(d)),u.arc(0,0,s,d,h,v));else{var g,y,_=h,b=d,m=h,x=d,w=p,M=p,A=a.apply(this,arguments)/2,T=A>1e-12&&(r?+r.apply(this,arguments):Bg(s*s+l*l)),N=Og(Lg(l-s)/2,+e.apply(this,arguments)),S=N,E=N;if(T>1e-12){var k=Xg(T/s*Yg(A)),C=Xg(T/l*Yg(A));(w-=2*k)>1e-12?(m+=k*=v?1:-1,x-=k):(w=0,m=x=(h+d)/2),(M-=2*C)>1e-12?(_+=C*=v?1:-1,b-=C):(M=0,_=b=(h+d)/2)}var P=l*Ug(_),z=l*Yg(_),R=s*Ug(x),L=s*Yg(x);if(N>1e-12){var D=l*Ug(b),U=l*Yg(b),q=s*Ug(m),O=s*Yg(m);if(p<Fg){var Y=w>1e-12?Qg(P,z,q,O,D,U,R,L):[R,L],B=P-Y[0],F=z-Y[1],I=D-Y[0],H=U-Y[1],j=1/Yg(jg((B*I+F*H)/(Bg(B*B+F*F)*Bg(I*I+H*H)))/2),X=Bg(Y[0]*Y[0]+Y[1]*Y[1]);S=Og(N,(s-X)/(j-1)),E=Og(N,(l-X)/(j+1))}}M>1e-12?E>1e-12?(g=Jg(q,O,P,z,l,E,v),y=Jg(D,U,R,L,l,E,v),u.moveTo(g.cx+g.x01,g.cy+g.y01),E<N?u.arc(g.cx,g.cy,E,Dg(g.y01,g.x01),Dg(y.y01,y.x01),!v):(u.arc(g.cx,g.cy,E,Dg(g.y01,g.x01),Dg(g.y11,g.x11),!v),u.arc(0,0,l,Dg(g.cy+g.y11,g.cx+g.x11),Dg(y.cy+y.y11,y.cx+y.x11),!v),u.arc(y.cx,y.cy,E,Dg(y.y11,y.x11),Dg(y.y01,y.x01),!v))):(u.moveTo(P,z),u.arc(0,0,l,_,b,!v)):u.moveTo(P,z),s>1e-12&&w>1e-12?S>1e-12?(g=Jg(R,L,D,U,s,-S,v),y=Jg(P,z,q,O,s,-S,v),u.lineTo(g.cx+g.x01,g.cy+g.y01),S<N?u.arc(g.cx,g.cy,S,Dg(g.y01,g.x01),Dg(y.y01,y.x01),!v):(u.arc(g.cx,g.cy,S,Dg(g.y01,g.x01),Dg(g.y11,g.x11),!v),u.arc(0,0,s,Dg(g.cy+g.y11,g.cx+g.x11),Dg(y.cy+y.y11,y.cx+y.x11),v),u.arc(y.cx,y.cy,S,Dg(y.y11,y.x11),Dg(y.y01,y.x01),!v))):u.arc(0,0,s,x,m,v):u.lineTo(R,L)}else u.moveTo(0,0);if(u.closePath(),f)return u=null,f+""||null}return f.centroid=function(){var e=(+t.apply(this,arguments)+ +n.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +o.apply(this,arguments))/2-Fg/2;return[Ug(r)*e,Yg(r)*e]},f.innerRadius=function(n){return arguments.length?(t="function"==typeof n?n:Rg(+n),f):t},f.outerRadius=function(t){return arguments.length?(n="function"==typeof t?t:Rg(+t),f):n},f.cornerRadius=function(t){return arguments.length?(e="function"==typeof t?t:Rg(+t),f):e},f.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:Rg(+t),f):r},f.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:Rg(+t),f):i},f.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:Rg(+t),f):o},f.padAngle=function(t){return arguments.length?(a="function"==typeof t?t:Rg(+t),f):a},f.context=function(t){return arguments.length?(u=null==t?null:t,f):u},f},t.area=iy,t.line=ry,t.pie=function(){var t=ay,n=oy,e=null,r=Rg(0),i=Rg(Hg),o=Rg(0);function a(a){var u,f,c,s,l,h=a.length,d=0,p=new Array(h),v=new Array(h),g=+r.apply(this,arguments),y=Math.min(Hg,Math.max(-Hg,i.apply(this,arguments)-g)),_=Math.min(Math.abs(y)/h,o.apply(this,arguments)),b=_*(y<0?-1:1);for(u=0;u<h;++u)(l=v[p[u]=u]=+t(a[u],u,a))>0&&(d+=l);for(null!=n?p.sort((function(t,e){return n(v[t],v[e])})):null!=e&&p.sort((function(t,n){return e(a[t],a[n])})),u=0,c=d?(y-h*b)/d:0;u<h;++u,g=s)f=p[u],s=g+((l=v[f])>0?l*c:0)+b,v[f]={data:a[f],index:u,value:l,startAngle:g,endAngle:s,padAngle:_};return v}return a.value=function(n){return arguments.length?(t="function"==typeof n?n:Rg(+n),a):t},a.sortValues=function(t){return arguments.length?(n=t,e=null,a):n},a.sort=function(t){return arguments.length?(e=t,n=null,a):e},a.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:Rg(+t),a):r},a.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:Rg(+t),a):i},a.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:Rg(+t),a):o},a},t.areaRadial=hy,t.radialArea=hy,t.lineRadial=ly,t.radialLine=ly,t.pointRadial=dy,t.linkHorizontal=function(){return yy(_y)},t.linkVertical=function(){return yy(by)},t.linkRadial=function(){var t=yy(my);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t},t.symbol=function(){var t=Rg(xy),n=Rg(64),e=null;function r(){var r;if(e||(e=r=fo()),t.apply(this,arguments).draw(e,+n.apply(this,arguments)),r)return e=null,r+""||null}return r.type=function(n){return arguments.length?(t="function"==typeof n?n:Rg(n),r):t},r.size=function(t){return arguments.length?(n="function"==typeof t?t:Rg(+t),r):n},r.context=function(t){return arguments.length?(e=null==t?null:t,r):e},r},t.symbols=Oy,t.symbolCircle=xy,t.symbolCross=wy,t.symbolDiamond=Ty,t.symbolSquare=Cy,t.symbolStar=ky,t.symbolTriangle=zy,t.symbolWye=qy,t.curveBasisClosed=function(t){return new Iy(t)},t.curveBasisOpen=function(t){return new Hy(t)},t.curveBasis=function(t){return new Fy(t)},t.curveBundle=Xy,t.curveCardinalClosed=Zy,t.curveCardinalOpen=Jy,t.curveCardinal=$y,t.curveCatmullRomClosed=r_,t.curveCatmullRomOpen=o_,t.curveCatmullRom=n_,t.curveLinearClosed=function(t){return new a_(t)},t.curveLinear=ty,t.curveMonotoneX=function(t){return new l_(t)},t.curveMonotoneY=function(t){return new h_(t)},t.curveNatural=function(t){return new p_(t)},t.curveStep=function(t){return new g_(t,.5)},t.curveStepAfter=function(t){return new g_(t,1)},t.curveStepBefore=function(t){return new g_(t,0)},t.stack=function(){var t=Rg([]),n=__,e=y_,r=b_;function i(i){var o,a,u=t.apply(this,arguments),f=i.length,c=u.length,s=new Array(c);for(o=0;o<c;++o){for(var l,h=u[o],d=s[o]=new Array(f),p=0;p<f;++p)d[p]=l=[0,+r(i[p],h,p,i)],l.data=i[p];d.key=h}for(o=0,a=n(s);o<c;++o)s[a[o]].index=o;return e(s,a),s}return i.keys=function(n){return arguments.length?(t="function"==typeof n?n:Rg(py.call(n)),i):t},i.value=function(t){return arguments.length?(r="function"==typeof t?t:Rg(+t),i):r},i.order=function(t){return arguments.length?(n=null==t?__:"function"==typeof t?t:Rg(py.call(t)),i):n},i.offset=function(t){return arguments.length?(e=null==t?y_:t,i):e},i},t.stackOffsetExpand=function(t,n){if((r=t.length)>0){for(var e,r,i,o=0,a=t[0].length;o<a;++o){for(i=e=0;e<r;++e)i+=t[e][o][1]||0;if(i)for(e=0;e<r;++e)t[e][o][1]/=i}y_(t,n)}},t.stackOffsetDiverging=function(t,n){if((u=t.length)>1)for(var e,r,i,o,a,u,f=0,c=t[n[0]].length;f<c;++f)for(o=a=0,e=0;e<u;++e)(i=(r=t[n[e]][f])[1]-r[0])>=0?(r[0]=o,r[1]=o+=i):i<0?(r[1]=a,r[0]=a+=i):r[0]=o},t.stackOffsetNone=y_,t.stackOffsetSilhouette=function(t,n){if((e=t.length)>0){for(var e,r=0,i=t[n[0]],o=i.length;r<o;++r){for(var a=0,u=0;a<e;++a)u+=t[a][r][1]||0;i[r][1]+=i[r][0]=-u/2}y_(t,n)}},t.stackOffsetWiggle=function(t,n){if((i=t.length)>0&&(r=(e=t[n[0]]).length)>0){for(var e,r,i,o=0,a=1;a<r;++a){for(var u=0,f=0,c=0;u<i;++u){for(var s=t[n[u]],l=s[a][1]||0,h=(l-(s[a-1][1]||0))/2,d=0;d<u;++d){var p=t[n[d]];h+=(p[a][1]||0)-(p[a-1][1]||0)}f+=l,c+=h*l}e[a-1][1]+=e[a-1][0]=o,f&&(o-=c/f)}e[a-1][1]+=e[a-1][0]=o,y_(t,n)}},t.stackOrderAscending=m_,t.stackOrderDescending=function(t){return m_(t).reverse()},t.stackOrderInsideOut=function(t){var n,e,r=t.length,i=t.map(x_),o=__(t).sort((function(t,n){return i[n]-i[t]})),a=0,u=0,f=[],c=[];for(n=0;n<r;++n)e=o[n],a<u?(a+=i[e],f.push(e)):(u+=i[e],c.push(e));return c.reverse().concat(f)},t.stackOrderNone=__,t.stackOrderReverse=function(t){return __(t).reverse()},t.timeInterval=Ih,t.timeMillisecond=Hh,t.timeMilliseconds=jh,t.utcMillisecond=Hh,t.utcMilliseconds=jh,t.timeSecond=Xh,t.timeSeconds=Gh,t.utcSecond=Xh,t.utcSeconds=Gh,t.timeMinute=Vh,t.timeMinutes=$h,t.timeHour=Wh,t.timeHours=Zh,t.timeDay=Qh,t.timeDays=Jh,t.timeWeek=td,t.timeWeeks=ud,t.timeSunday=td,t.timeSundays=ud,t.timeMonday=nd,t.timeMondays=fd,t.timeTuesday=ed,t.timeTuesdays=cd,t.timeWednesday=rd,t.timeWednesdays=sd,t.timeThursday=id,t.timeThursdays=ld,t.timeFriday=od,t.timeFridays=hd,t.timeSaturday=ad,t.timeSaturdays=dd,t.timeMonth=pd,t.timeMonths=vd,t.timeYear=gd,t.timeYears=yd,t.utcMinute=_d,t.utcMinutes=bd,t.utcHour=md,t.utcHours=xd,t.utcDay=wd,t.utcDays=Md,t.utcWeek=Td,t.utcWeeks=zd,t.utcSunday=Td,t.utcSundays=zd,t.utcMonday=Nd,t.utcMondays=Rd,t.utcTuesday=Sd,t.utcTuesdays=Ld,t.utcWednesday=Ed,t.utcWednesdays=Dd,t.utcThursday=kd,t.utcThursdays=Ud,t.utcFriday=Cd,t.utcFridays=qd,t.utcSaturday=Pd,t.utcSaturdays=Od,t.utcMonth=Yd,t.utcMonths=Bd,t.utcYear=Fd,t.utcYears=Id,t.timeFormatDefaultLocale=iv,t.timeFormatLocale=Gd,t.isoFormat=ov,t.isoParse=av,t.now=_r,t.timer=xr,t.timerFlush=wr,t.timeout=Nr,t.interval=function(t,n,e){var r=new mr,i=n;return null==n?(r.restart(t,n,e),r):(n=+n,e=null==e?_r():+e,r.restart((function o(a){a+=i,r.restart(o,i+=n,e),t(a)}),n,e),r)},t.transition=ei,t.active=function(t,n){var e,r,i=t.__transition;if(i)for(r in n=null==n?null:n+"",i)if((e=i[r]).state>1&&e.name===n)return new ni([[t]],Ni,n,+r);return null},t.interrupt=Rr,t.voronoi=function(){var t=M_,n=A_,e=null;function r(r){return new ob(r.map((function(e,i){var o=[Math.round(t(e,i,r)/nb)*nb,Math.round(n(e,i,r)/nb)*nb];return o.index=i,o.data=e,o})),e)}return r.polygons=function(t){return r(t).polygons()},r.links=function(t){return r(t).links()},r.triangles=function(t){return r(t).triangles()},r.x=function(n){return arguments.length?(t="function"==typeof n?n:w_(+n),r):t},r.y=function(t){return arguments.length?(n="function"==typeof t?t:w_(+t),r):n},r.extent=function(t){return arguments.length?(e=null==t?null:[[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]],r):e&&[[e[0][0],e[0][1]],[e[1][0],e[1][1]]]},r.size=function(t){return arguments.length?(e=null==t?null:[[0,0],[+t[0],+t[1]]],r):e&&[e[1][0]-e[0][0],e[1][1]-e[0][1]]},r},t.zoom=function(){var n,e,r=db,i=pb,o=_b,a=gb,u=yb,f=[0,1/0],c=[[-1/0,-1/0],[1/0,1/0]],s=250,l=Je,h=[],d=Y("start","zoom","end"),p=0;function v(t){t.property("__zoom",vb).on("wheel.zoom",w).on("mousedown.zoom",M).on("dblclick.zoom",A).filter(u).on("touchstart.zoom",T).on("touchmove.zoom",N).on("touchend.zoom touchcancel.zoom",S).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function g(t,n){return(n=Math.max(f[0],Math.min(f[1],n)))===t.k?t:new fb(n,t.x,t.y)}function y(t,n,e){var r=n[0]-e[0]*t.k,i=n[1]-e[1]*t.k;return r===t.x&&i===t.y?t:new fb(t.k,r,i)}function _(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function b(t,n,e){t.on("start.zoom",(function(){m(this,arguments).start()})).on("interrupt.zoom end.zoom",(function(){m(this,arguments).end()})).tween("zoom",(function(){var t=this,r=arguments,o=m(t,r),a=i.apply(t,r),u=e||_(a),f=Math.max(a[1][0]-a[0][0],a[1][1]-a[0][1]),c=t.__zoom,s="function"==typeof n?n.apply(t,r):n,h=l(c.invert(u).concat(f/c.k),s.invert(u).concat(f/s.k));return function(t){if(1===t)t=s;else{var n=h(t),e=f/n[2];t=new fb(e,u[0]-n[0]*e,u[1]-n[1]*e)}o.zoom(null,t)}}))}function m(t,n){for(var e,r=0,i=h.length;r<i;++r)if((e=h[r]).that===t)return e;return new x(t,n)}function x(t,n){this.that=t,this.args=n,this.index=-1,this.active=0,this.extent=i.apply(t,n)}function w(){if(r.apply(this,arguments)){var t=m(this,arguments),n=this.__zoom,e=Math.max(f[0],Math.min(f[1],n.k*Math.pow(2,a.apply(this,arguments)))),i=cn(this);if(t.wheel)t.mouse[0][0]===i[0]&&t.mouse[0][1]===i[1]||(t.mouse[1]=n.invert(t.mouse[0]=i)),clearTimeout(t.wheel);else{if(n.k===e)return;t.mouse=[i,n.invert(i)],Rr(this),t.start()}hb(),t.wheel=setTimeout(u,150),t.zoom("mouse",o(y(g(n,e),t.mouse[0],t.mouse[1]),t.extent,c))}function u(){t.wheel=null,t.end()}}function M(){if(!e&&r.apply(this,arguments)){var n=m(this,arguments),i=en(t.event.view).on("mousemove.zoom",s,!0).on("mouseup.zoom",l,!0),a=cn(this),u=t.event.clientX,f=t.event.clientY;dn(t.event.view),lb(),n.mouse=[a,this.__zoom.invert(a)],Rr(this),n.start()}function s(){if(hb(),!n.moved){var e=t.event.clientX-u,r=t.event.clientY-f;n.moved=e*e+r*r>p}n.zoom("mouse",o(y(n.that.__zoom,n.mouse[0]=cn(n.that),n.mouse[1]),n.extent,c))}function l(){i.on("mousemove.zoom mouseup.zoom",null),pn(t.event.view,n.moved),hb(),n.end()}}function A(){if(r.apply(this,arguments)){var n=this.__zoom,e=cn(this),a=n.invert(e),u=n.k*(t.event.shiftKey?.5:2),f=o(y(g(n,u),e,a),i.apply(this,arguments),c);hb(),s>0?en(this).transition().duration(s).call(b,f,e):en(this).call(v.transform,f)}}function T(){if(r.apply(this,arguments)){var e,i,o,a,u=m(this,arguments),f=t.event.changedTouches,c=f.length;for(lb(),i=0;i<c;++i)a=[a=sn(this,f,(o=f[i]).identifier),this.__zoom.invert(a),o.identifier],u.touch0?u.touch1||(u.touch1=a):(u.touch0=a,e=!0);if(n&&(n=clearTimeout(n),!u.touch1))return u.end(),void((a=en(this).on("dblclick.zoom"))&&a.apply(this,arguments));e&&(n=setTimeout((function(){n=null}),500),Rr(this),u.start())}}function N(){var e,r,i,a,u=m(this,arguments),f=t.event.changedTouches,s=f.length;for(hb(),n&&(n=clearTimeout(n)),e=0;e<s;++e)i=sn(this,f,(r=f[e]).identifier),u.touch0&&u.touch0[2]===r.identifier?u.touch0[0]=i:u.touch1&&u.touch1[2]===r.identifier&&(u.touch1[0]=i);if(r=u.that.__zoom,u.touch1){var l=u.touch0[0],h=u.touch0[1],d=u.touch1[0],p=u.touch1[1],v=(v=d[0]-l[0])*v+(v=d[1]-l[1])*v,_=(_=p[0]-h[0])*_+(_=p[1]-h[1])*_;r=g(r,Math.sqrt(v/_)),i=[(l[0]+d[0])/2,(l[1]+d[1])/2],a=[(h[0]+p[0])/2,(h[1]+p[1])/2]}else{if(!u.touch0)return;i=u.touch0[0],a=u.touch0[1]}u.zoom("touch",o(y(r,i,a),u.extent,c))}function S(){var n,r,i=m(this,arguments),o=t.event.changedTouches,a=o.length;for(lb(),e&&clearTimeout(e),e=setTimeout((function(){e=null}),500),n=0;n<a;++n)r=o[n],i.touch0&&i.touch0[2]===r.identifier?delete i.touch0:i.touch1&&i.touch1[2]===r.identifier&&delete i.touch1;i.touch1&&!i.touch0&&(i.touch0=i.touch1,delete i.touch1),i.touch0?i.touch0[1]=this.__zoom.invert(i.touch0[0]):i.end()}return v.transform=function(t,n){var e=t.selection?t.selection():t;e.property("__zoom",vb),t!==e?b(t,n):e.interrupt().each((function(){m(this,arguments).start().zoom(null,"function"==typeof n?n.apply(this,arguments):n).end()}))},v.scaleBy=function(t,n){v.scaleTo(t,(function(){var t=this.__zoom.k,e="function"==typeof n?n.apply(this,arguments):n;return t*e}))},v.scaleTo=function(t,n){v.transform(t,(function(){var t=i.apply(this,arguments),e=this.__zoom,r=_(t),a=e.invert(r),u="function"==typeof n?n.apply(this,arguments):n;return o(y(g(e,u),r,a),t,c)}))},v.translateBy=function(t,n,e){v.transform(t,(function(){return o(this.__zoom.translate("function"==typeof n?n.apply(this,arguments):n,"function"==typeof e?e.apply(this,arguments):e),i.apply(this,arguments),c)}))},v.translateTo=function(t,n,e){v.transform(t,(function(){var t=i.apply(this,arguments),r=this.__zoom,a=_(t);return o(cb.translate(a[0],a[1]).scale(r.k).translate("function"==typeof n?-n.apply(this,arguments):-n,"function"==typeof e?-e.apply(this,arguments):-e),t,c)}))},x.prototype={start:function(){return 1==++this.active&&(this.index=h.push(this)-1,this.emit("start")),this},zoom:function(t,n){return this.mouse&&"mouse"!==t&&(this.mouse[1]=n.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=n.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=n.invert(this.touch1[0])),this.that.__zoom=n,this.emit("zoom"),this},end:function(){return 0==--this.active&&(h.splice(this.index,1),this.index=-1,this.emit("end")),this},emit:function(t){Wt(new ub(v,t,this.that.__zoom),d.apply,d,[t,this.that,this.args])}},v.wheelDelta=function(t){return arguments.length?(a="function"==typeof t?t:ab(+t),v):a},v.filter=function(t){return arguments.length?(r="function"==typeof t?t:ab(!!t),v):r},v.touchable=function(t){return arguments.length?(u="function"==typeof t?t:ab(!!t),v):u},v.extent=function(t){return arguments.length?(i="function"==typeof t?t:ab([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),v):i},v.scaleExtent=function(t){return arguments.length?(f[0]=+t[0],f[1]=+t[1],v):[f[0],f[1]]},v.translateExtent=function(t){return arguments.length?(c[0][0]=+t[0][0],c[1][0]=+t[1][0],c[0][1]=+t[0][1],c[1][1]=+t[1][1],v):[[c[0][0],c[0][1]],[c[1][0],c[1][1]]]},v.constrain=function(t){return arguments.length?(o=t,v):o},v.duration=function(t){return arguments.length?(s=+t,v):s},v.interpolate=function(t){return arguments.length?(l=t,v):l},v.on=function(){var t=d.on.apply(d,arguments);return t===d?v:t},v.clickDistance=function(t){return arguments.length?(p=(t=+t)*t,v):Math.sqrt(p)},v},t.zoomTransform=sb,t.zoomIdentity=cb,Object.defineProperty(t,"__esModule",{value:!0})}));
!function(t){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=t(),module.exports.introJs=function(){return console.warn('Deprecated: please use require("intro.js") directly, instead of the introJs method of the function'),t().apply(this,arguments)};else if("function"==typeof define&&define.amd)define([],t);else{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).introJs=t()}}((function(){function t(t){this._targetElement=t,this._introItems=[],this._options={nextLabel:"Next &rarr;",prevLabel:"&larr; Back",skipLabel:"Skip",doneLabel:"Done",hidePrev:!1,hideNext:!1,tooltipPosition:"bottom",tooltipClass:"",highlightClass:"",exitOnEsc:!0,exitOnOverlayClick:!0,showStepNumbers:!0,keyboardNavigation:!0,showButtons:!0,showBullets:!0,showProgress:!1,scrollToElement:!0,scrollTo:"element",scrollPadding:30,overlayOpacity:.8,positionPrecedence:["bottom","top","right","left"],disableInteraction:!1,helperElementPadding:10,hintPosition:"top-middle",hintButtonLabel:"Got it",hintAnimation:!0,buttonClass:"introjs-button"}}function e(t,e){var s=t.querySelectorAll("*[data-intro]"),l=[];if(this._options.steps)C(this._options.steps,function(t){var e=o(t);if(e.step=l.length+1,"string"==typeof e.element&&(e.element=document.querySelector(e.element)),void 0===e.element||null===e.element){var i=document.querySelector(".introjsFloatingElement");null===i&&((i=document.createElement("div")).className="introjsFloatingElement",document.body.appendChild(i)),e.element=i,e.position="floating"}e.scrollTo=e.scrollTo||this._options.scrollTo,void 0===e.disableInteraction&&(e.disableInteraction=this._options.disableInteraction),null!==e.element&&l.push(e)}.bind(this));else{var a;if(s.length<1)return!1;C(s,function(t){if((!e||t.getAttribute("data-intro-group")===e)&&"none"!==t.style.display){var i=parseInt(t.getAttribute("data-step"),10);a=void 0!==t.getAttribute("data-disable-interaction")?!!t.getAttribute("data-disable-interaction"):this._options.disableInteraction,i>0&&(l[i-1]={element:t,intro:t.getAttribute("data-intro"),step:parseInt(t.getAttribute("data-step"),10),tooltipClass:t.getAttribute("data-tooltipclass"),highlightClass:t.getAttribute("data-highlightclass"),position:t.getAttribute("data-position")||this._options.tooltipPosition,scrollTo:t.getAttribute("data-scrollto")||this._options.scrollTo,disableInteraction:a})}}.bind(this));var c=0;C(s,function(t){if((!e||t.getAttribute("data-intro-group")===e)&&null===t.getAttribute("data-step")){for(;void 0!==l[c];)c++;a=void 0!==t.getAttribute("data-disable-interaction")?!!t.getAttribute("data-disable-interaction"):this._options.disableInteraction,l[c]={element:t,intro:t.getAttribute("data-intro"),step:c+1,tooltipClass:t.getAttribute("data-tooltipclass"),highlightClass:t.getAttribute("data-highlightclass"),position:t.getAttribute("data-position")||this._options.tooltipPosition,scrollTo:t.getAttribute("data-scrollto")||this._options.scrollTo,disableInteraction:a}}}.bind(this))}for(var h=[],u=0;u<l.length;u++)l[u]&&h.push(l[u]);return(l=h).sort((function(t,e){return t.step-e.step})),this._introItems=l,T.call(this,t)&&(r.call(this),this._options.keyboardNavigation&&x.on(window,"keydown",n,this,!0),x.on(window,"resize",i,this,!0)),!1}function i(){this.refresh.call(this)}function n(t){var e=null===t.code?t.which:t.code;if(null===e&&(e=null===t.charCode?t.keyCode:t.charCode),"Escape"!==e&&27!==e||!0!==this._options.exitOnEsc){if("ArrowLeft"===e||37===e)a.call(this);else if("ArrowRight"===e||39===e)r.call(this);else if("Enter"===e||13===e){var i=t.target||t.srcElement;i&&i.className.match("introjs-prevbutton")?a.call(this):i&&i.className.match("introjs-skipbutton")?(this._introItems.length-1===this._currentStep&&"function"==typeof this._introCompleteCallback&&this._introCompleteCallback.call(this),h.call(this,this._targetElement)):i&&i.getAttribute("data-stepnumber")?i.click():r.call(this),t.preventDefault?t.preventDefault():t.returnValue=!1}}else h.call(this,this._targetElement)}function o(t){if(null===t||"object"!=typeof t||void 0!==t.nodeType)return t;var e={};for(var i in t)void 0!==window.jQuery&&t[i]instanceof window.jQuery?e[i]=t[i]:e[i]=o(t[i]);return e}function s(t){this._currentStep=t-2,void 0!==this._introItems&&r.call(this)}function l(t){this._currentStepNumber=t,void 0!==this._introItems&&r.call(this)}function r(){this._direction="forward",void 0!==this._currentStepNumber&&C(this._introItems,function(t,e){t.step===this._currentStepNumber&&(this._currentStep=e-1,this._currentStepNumber=void 0)}.bind(this)),void 0===this._currentStep?this._currentStep=0:++this._currentStep;var t=this._introItems[this._currentStep],e=!0;return void 0!==this._introBeforeChangeCallback&&(e=this._introBeforeChangeCallback.call(this,t.element)),!1===e?(--this._currentStep,!1):this._introItems.length<=this._currentStep?("function"==typeof this._introCompleteCallback&&this._introCompleteCallback.call(this),void h.call(this,this._targetElement)):void v.call(this,t)}function a(){if(this._direction="backward",0===this._currentStep)return!1;--this._currentStep;var t=this._introItems[this._currentStep],e=!0;if(void 0!==this._introBeforeChangeCallback&&(e=this._introBeforeChangeCallback.call(this,t.element)),!1===e)return++this._currentStep,!1;v.call(this,t)}function c(){if(b.call(this,document.querySelector(".introjs-helperLayer")),b.call(this,document.querySelector(".introjs-tooltipReferenceLayer")),b.call(this,document.querySelector(".introjs-disableInteraction")),void 0!==this._currentStep&&null!==this._currentStep){var t=document.querySelector(".introjs-helperNumberLayer"),e=document.querySelector(".introjs-arrow"),i=document.querySelector(".introjs-tooltip");u.call(this,this._introItems[this._currentStep].element,i,e,t)}return q.call(this),this}function h(t,e){var o=!0;if(void 0!==this._introBeforeExitCallback&&(o=this._introBeforeExitCallback.call(this)),e||!1!==o){var s=t.querySelectorAll(".introjs-overlay");s&&s.length&&C(s,function(t){t.style.opacity=0,window.setTimeout(function(){this.parentNode&&this.parentNode.removeChild(this)}.bind(t),500)}.bind(this));var l=t.querySelector(".introjs-helperLayer");l&&l.parentNode.removeChild(l);var r=t.querySelector(".introjs-tooltipReferenceLayer");r&&r.parentNode.removeChild(r);var a=t.querySelector(".introjs-disableInteraction");a&&a.parentNode.removeChild(a);var c=document.querySelector(".introjsFloatingElement");c&&c.parentNode.removeChild(c),w(),C(document.querySelectorAll(".introjs-fixParent"),(function(t){E(t,/introjs-fixParent/g)})),x.off(window,"keydown",n,this,!0),x.off(window,"resize",i,this,!0),void 0!==this._introExitCallback&&this._introExitCallback.call(this),this._currentStep=void 0}}function u(t,e,i,n,o){var s,l,r,a,c,h="";if(o=o||!1,e.style.top=null,e.style.right=null,e.style.bottom=null,e.style.left=null,e.style.marginLeft=null,e.style.marginTop=null,i.style.display="inherit",null!=n&&(n.style.top=null,n.style.left=null),this._introItems[this._currentStep])switch(h="string"==typeof(s=this._introItems[this._currentStep]).tooltipClass?s.tooltipClass:this._options.tooltipClass,e.className=("introjs-tooltip "+h).replace(/^\s+|\s+$/g,""),e.setAttribute("role","dialog"),"floating"!==(c=this._introItems[this._currentStep].position)&&(c=f.call(this,t,e,c)),r=W(t),l=W(e),a=L(),S(e,"introjs-"+c),c){case"top-right-aligned":i.className="introjs-arrow bottom-right";var u=0;p(r,u,l,e),e.style.bottom=r.height+20+"px";break;case"top-middle-aligned":i.className="introjs-arrow bottom-middle";var m=r.width/2-l.width/2;o&&(m+=5),p(r,m,l,e)&&(e.style.right=null,d(r,m,l,a,e)),e.style.bottom=r.height+20+"px";break;case"top-left-aligned":case"top":i.className="introjs-arrow bottom",d(r,o?0:15,l,a,e),e.style.bottom=r.height+20+"px";break;case"right":e.style.left=r.width+20+"px",r.top+l.height>a.height?(i.className="introjs-arrow left-bottom",e.style.top="-"+(l.height-r.height-20)+"px"):i.className="introjs-arrow left";break;case"left":o||!0!==this._options.showStepNumbers||(e.style.top="15px"),r.top+l.height>a.height?(e.style.top="-"+(l.height-r.height-20)+"px",i.className="introjs-arrow right-bottom"):i.className="introjs-arrow right",e.style.right=r.width+20+"px";break;case"floating":i.style.display="none",e.style.left="50%",e.style.top="50%",e.style.marginLeft="-"+l.width/2+"px",e.style.marginTop="-"+l.height/2+"px",null!=n&&(n.style.left="-"+(l.width/2+18)+"px",n.style.top="-"+(l.height/2+18)+"px");break;case"bottom-right-aligned":i.className="introjs-arrow top-right",p(r,u=0,l,e),e.style.top=r.height+20+"px";break;case"bottom-middle-aligned":i.className="introjs-arrow top-middle",m=r.width/2-l.width/2,o&&(m+=5),p(r,m,l,e)&&(e.style.right=null,d(r,m,l,a,e)),e.style.top=r.height+20+"px";break;default:i.className="introjs-arrow top",d(r,0,l,a,e),e.style.top=r.height+20+"px"}}function d(t,e,i,n,o){return t.left+e+i.width>n.width?(o.style.left=n.width-i.width-t.left+"px",!1):(o.style.left=e+"px",!0)}function p(t,e,i,n){return t.left+t.width-e-i.width<0?(n.style.left=-t.left+"px",!1):(n.style.right=e+"px",!0)}function f(t,e,i){var n=this._options.positionPrecedence.slice(),o=L(),s=W(e).height+10,l=W(e).width+20,r=t.getBoundingClientRect(),a="floating";r.bottom+s+s>o.height&&m(n,"bottom"),r.top-s<0&&m(n,"top"),r.right+l>o.width&&m(n,"right"),r.left-l<0&&m(n,"left");var c,h,u=-1!==(h=(c=i||"").indexOf("-"))?c.substr(h):"";return i&&(i=i.split("-")[0]),n.length&&(a="auto"!==i&&n.indexOf(i)>-1?i:n[0]),-1!==["top","bottom"].indexOf(a)&&(a+=function(t,e,i,n){var o=e/2,s=Math.min(i.width,window.screen.width),l=["-left-aligned","-middle-aligned","-right-aligned"],r="";s-t<e&&m(l,"-left-aligned");(t<o||s-t<o)&&m(l,"-middle-aligned");t<e&&m(l,"-right-aligned");r=l.length?-1!==l.indexOf(n)?n:l[0]:"-middle-aligned";return r}(r.left,l,o,u)),a}function m(t,e){t.indexOf(e)>-1&&t.splice(t.indexOf(e),1)}function b(t){if(t){if(!this._introItems[this._currentStep])return;var e=this._introItems[this._currentStep],i=W(e.element),n=this._options.helperElementPadding;A(e.element)?S(t,"introjs-fixedTooltip"):E(t,"introjs-fixedTooltip"),"floating"===e.position&&(n=0),t.style.cssText="width: "+(i.width+n)+"px; height:"+(i.height+n)+"px; top:"+(i.top-n/2)+"px;left: "+(i.left-n/2)+"px;"}}function g(){var t=document.querySelector(".introjs-disableInteraction");null===t&&((t=document.createElement("div")).className="introjs-disableInteraction",this._targetElement.appendChild(t)),b.call(this,t)}function y(t){t.setAttribute("role","button"),t.tabIndex=0}function v(t){void 0!==this._introChangeCallback&&this._introChangeCallback.call(this,t.element);var e,i,n,o,s=this,l=document.querySelector(".introjs-helperLayer"),c=document.querySelector(".introjs-tooltipReferenceLayer"),d="introjs-helperLayer";if("string"==typeof t.highlightClass&&(d+=" "+t.highlightClass),"string"==typeof this._options.highlightClass&&(d+=" "+this._options.highlightClass),null!==l){var p=c.querySelector(".introjs-helperNumberLayer"),f=c.querySelector(".introjs-tooltiptext"),m=c.querySelector(".introjs-arrow"),v=c.querySelector(".introjs-tooltip");if(n=c.querySelector(".introjs-skipbutton"),i=c.querySelector(".introjs-prevbutton"),e=c.querySelector(".introjs-nextbutton"),l.className=d,v.style.opacity=0,v.style.display="none",null!==p){var j=this._introItems[t.step-2>=0?t.step-2:0];(null!==j&&"forward"===this._direction&&"floating"===j.position||"backward"===this._direction&&"floating"===t.position)&&(p.style.opacity=0)}(o=J(t.element))!==document.body&&$(o,t.element),b.call(s,l),b.call(s,c),C(document.querySelectorAll(".introjs-fixParent"),(function(t){E(t,/introjs-fixParent/g)})),w(),s._lastShowElementTimer&&window.clearTimeout(s._lastShowElementTimer),s._lastShowElementTimer=window.setTimeout((function(){null!==p&&(p.innerHTML=t.step),f.innerHTML=t.intro,v.style.display="block",u.call(s,t.element,v,m,p),s._options.showBullets&&(c.querySelector(".introjs-bullets li > a.active").className="",c.querySelector('.introjs-bullets li > a[data-stepnumber="'+t.step+'"]').className="active"),c.querySelector(".introjs-progress .introjs-progressbar").style.cssText="width:"+Q.call(s)+"%;",c.querySelector(".introjs-progress .introjs-progressbar").setAttribute("aria-valuenow",Q.call(s)),v.style.opacity=1,p&&(p.style.opacity=1),null!=n&&/introjs-donebutton/gi.test(n.className)?n.focus():null!=e&&e.focus(),_.call(s,t.scrollTo,t,f)}),350)}else{var k=document.createElement("div"),x=document.createElement("div"),A=document.createElement("div"),L=document.createElement("div"),T=document.createElement("div"),I=document.createElement("div"),P=document.createElement("div"),q=document.createElement("div");k.className=d,x.className="introjs-tooltipReferenceLayer",(o=J(t.element))!==document.body&&$(o,t.element),b.call(s,k),b.call(s,x),this._targetElement.appendChild(k),this._targetElement.appendChild(x),A.className="introjs-arrow",T.className="introjs-tooltiptext",T.innerHTML=t.intro,I.className="introjs-bullets",!1===this._options.showBullets&&(I.style.display="none");var B=document.createElement("ul");B.setAttribute("role","tablist");var H=function(){s.goToStep(this.getAttribute("data-stepnumber"))};C(this._introItems,(function(e,i){var n=document.createElement("li"),o=document.createElement("a");n.setAttribute("role","presentation"),o.setAttribute("role","tab"),o.onclick=H,i===t.step-1&&(o.className="active"),y(o),o.innerHTML="&nbsp;",o.setAttribute("data-stepnumber",e.step),n.appendChild(o),B.appendChild(n)})),I.appendChild(B),P.className="introjs-progress",!1===this._options.showProgress&&(P.style.display="none");var O=document.createElement("div");O.className="introjs-progressbar",O.setAttribute("role","progress"),O.setAttribute("aria-valuemin",0),O.setAttribute("aria-valuemax",100),O.setAttribute("aria-valuenow",Q.call(this)),O.style.cssText="width:"+Q.call(this)+"%;",P.appendChild(O),q.className="introjs-tooltipbuttons",!1===this._options.showButtons&&(q.style.display="none"),L.className="introjs-tooltip",L.appendChild(T),L.appendChild(I),L.appendChild(P);var M=document.createElement("span");!0===this._options.showStepNumbers&&(M.className="introjs-helperNumberLayer",M.innerHTML=t.step,x.appendChild(M)),L.appendChild(A),x.appendChild(L),(e=document.createElement("a")).onclick=function(){s._introItems.length-1!==s._currentStep&&r.call(s)},y(e),e.innerHTML=this._options.nextLabel,(i=document.createElement("a")).onclick=function(){0!==s._currentStep&&a.call(s)},y(i),i.innerHTML=this._options.prevLabel,(n=document.createElement("a")).className=this._options.buttonClass+" introjs-skipbutton ",y(n),n.innerHTML=this._options.skipLabel,n.onclick=function(){s._introItems.length-1===s._currentStep&&"function"==typeof s._introCompleteCallback&&s._introCompleteCallback.call(s),s._introItems.length-1!==s._currentStep&&"function"==typeof s._introExitCallback&&s._introExitCallback.call(s),"function"==typeof s._introSkipCallback&&s._introSkipCallback.call(s),h.call(s,s._targetElement)},q.appendChild(n),this._introItems.length>1&&(q.appendChild(i),q.appendChild(e)),L.appendChild(q),u.call(s,t.element,L,A,M),_.call(this,t.scrollTo,t,L)}var R=s._targetElement.querySelector(".introjs-disableInteraction");R&&R.parentNode.removeChild(R),t.disableInteraction&&g.call(s),0===this._currentStep&&this._introItems.length>1?(null!=n&&(n.className=this._options.buttonClass+" introjs-skipbutton"),null!=e&&(e.className=this._options.buttonClass+" introjs-nextbutton"),!0===this._options.hidePrev?(null!=i&&(i.className=this._options.buttonClass+" introjs-prevbutton introjs-hidden"),null!=e&&S(e,"introjs-fullbutton")):null!=i&&(i.className=this._options.buttonClass+" introjs-prevbutton introjs-disabled"),null!=n&&(n.innerHTML=this._options.skipLabel)):this._introItems.length-1===this._currentStep||1===this._introItems.length?(null!=n&&(n.innerHTML=this._options.doneLabel,S(n,"introjs-donebutton")),null!=i&&(i.className=this._options.buttonClass+" introjs-prevbutton"),!0===this._options.hideNext?(null!=e&&(e.className=this._options.buttonClass+" introjs-nextbutton introjs-hidden"),null!=i&&S(i,"introjs-fullbutton")):null!=e&&(e.className=this._options.buttonClass+" introjs-nextbutton introjs-disabled")):(null!=n&&(n.className=this._options.buttonClass+" introjs-skipbutton"),null!=i&&(i.className=this._options.buttonClass+" introjs-prevbutton"),null!=e&&(e.className=this._options.buttonClass+" introjs-nextbutton"),null!=n&&(n.innerHTML=this._options.skipLabel)),i.setAttribute("role","button"),e.setAttribute("role","button"),n.setAttribute("role","button"),null!=e&&e.focus(),function(t){var e;if(t.element instanceof SVGElement)for(e=t.element.parentNode;null!==t.element.parentNode&&e.tagName&&"body"!==e.tagName.toLowerCase();)"svg"===e.tagName.toLowerCase()&&S(e,"introjs-showElement introjs-relativePosition"),e=e.parentNode;S(t.element,"introjs-showElement");var i=N(t.element,"position");"absolute"!==i&&"relative"!==i&&"fixed"!==i&&S(t.element,"introjs-relativePosition");e=t.element.parentNode;for(;null!==e&&e.tagName&&"body"!==e.tagName.toLowerCase();){var n=N(e,"z-index"),o=parseFloat(N(e,"opacity")),s=N(e,"transform")||N(e,"-webkit-transform")||N(e,"-moz-transform")||N(e,"-ms-transform")||N(e,"-o-transform");(/[0-9]+/.test(n)||o<1||"none"!==s&&void 0!==s)&&S(e,"introjs-fixParent"),e=e.parentNode}}(t),void 0!==this._introAfterChangeCallback&&this._introAfterChangeCallback.call(this,t.element)}function _(t,e,i){var n;if("off"!==t&&(this._options.scrollToElement&&(n="tooltip"===t?i.getBoundingClientRect():e.element.getBoundingClientRect(),!function(t){var e=t.getBoundingClientRect();return e.top>=0&&e.left>=0&&e.bottom+80<=window.innerHeight&&e.right<=window.innerWidth}(e.element)))){var o=L().height;n.bottom-(n.bottom-n.top)<0||e.element.clientHeight>o?window.scrollBy(0,n.top-(o/2-n.height/2)-this._options.scrollPadding):window.scrollBy(0,n.top-(o/2-n.height/2)+this._options.scrollPadding)}}function w(){C(document.querySelectorAll(".introjs-showElement"),(function(t){E(t,/introjs-[a-zA-Z]+/g)}))}function C(t,e,i){if(t)for(var n=0,o=t.length;n<o;n++)e(t[n],n);"function"==typeof i&&i()}var j,k=(j={},function(t,e){return j[e=e||"introjs-stamp"]=j[e]||0,void 0===t[e]&&(t[e]=j[e]++),t[e]}),x=new function(){var t="introjs_event";this._id=function(t,e,i,n){return e+k(i)+(n?"_"+k(n):"")},this.on=function(e,i,n,o,s){var l=this._id.apply(this,arguments),r=function(t){return n.call(o||e,t||window.event)};"addEventListener"in e?e.addEventListener(i,r,s):"attachEvent"in e&&e.attachEvent("on"+i,r),e[t]=e[t]||{},e[t][l]=r},this.off=function(e,i,n,o,s){var l=this._id.apply(this,arguments),r=e[t]&&e[t][l];r&&("removeEventListener"in e?e.removeEventListener(i,r,s):"detachEvent"in e&&e.detachEvent("on"+i,r),e[t][l]=null)}};function S(t,e){if(t instanceof SVGElement){var i=t.getAttribute("class")||"";t.setAttribute("class",i+" "+e)}else{if(void 0!==t.classList)C(e.split(" "),(function(e){t.classList.add(e)}));else t.className.match(e)||(t.className+=" "+e)}}function E(t,e){if(t instanceof SVGElement){var i=t.getAttribute("class")||"";t.setAttribute("class",i.replace(e,"").replace(/^\s+|\s+$/g,""))}else t.className=t.className.replace(e,"").replace(/^\s+|\s+$/g,"")}function N(t,e){var i="";return t.currentStyle?i=t.currentStyle[e]:document.defaultView&&document.defaultView.getComputedStyle&&(i=document.defaultView.getComputedStyle(t,null).getPropertyValue(e)),i&&i.toLowerCase?i.toLowerCase():i}function A(t){var e=t.parentNode;return!(!e||"HTML"===e.nodeName)&&("fixed"===N(t,"position")||A(e))}function L(){if(void 0!==window.innerWidth)return{width:window.innerWidth,height:window.innerHeight};var t=document.documentElement;return{width:t.clientWidth,height:t.clientHeight}}function T(t){var e=document.createElement("div"),i="",n=this;if(e.className="introjs-overlay",t.tagName&&"body"!==t.tagName.toLowerCase()){var o=W(t);o&&(i+="width: "+o.width+"px; height:"+o.height+"px; top:"+o.top+"px;left: "+o.left+"px;",e.style.cssText=i)}else i+="top: 0;bottom: 0; left: 0;right: 0;position: fixed;",e.style.cssText=i;return t.appendChild(e),e.onclick=function(){!0===n._options.exitOnOverlayClick&&h.call(n,t)},window.setTimeout((function(){i+="opacity: "+n._options.overlayOpacity.toString()+";",e.style.cssText=i}),10),!0}function I(){var t=document.querySelector(".introjs-hintReference");if(t){var e=t.getAttribute("data-step");return t.parentNode.removeChild(t),e}}function P(t){if(this._introItems=[],this._options.hints)C(this._options.hints,function(t){var e=o(t);"string"==typeof e.element&&(e.element=document.querySelector(e.element)),e.hintPosition=e.hintPosition||this._options.hintPosition,e.hintAnimation=e.hintAnimation||this._options.hintAnimation,null!==e.element&&this._introItems.push(e)}.bind(this));else{var e=t.querySelectorAll("*[data-hint]");if(!e||!e.length)return!1;C(e,function(t){var e=t.getAttribute("data-hintanimation");e=e?"true"===e:this._options.hintAnimation,this._introItems.push({element:t,hint:t.getAttribute("data-hint"),hintPosition:t.getAttribute("data-hintposition")||this._options.hintPosition,hintAnimation:e,tooltipClass:t.getAttribute("data-tooltipclass"),position:t.getAttribute("data-position")||this._options.tooltipPosition})}.bind(this))}D.call(this),x.on(document,"click",I,this,!1),x.on(window,"resize",q,this,!0)}function q(){C(this._introItems,function(t){void 0!==t.targetElement&&F.call(this,t.hintPosition,t.element,t.targetElement)}.bind(this))}function B(t){var e=document.querySelector(".introjs-hints");return e?e.querySelectorAll(t):[]}function H(t){var e=B('.introjs-hint[data-step="'+t+'"]')[0];I.call(this),e&&S(e,"introjs-hidehint"),void 0!==this._hintCloseCallback&&this._hintCloseCallback.call(this,t)}function O(){C(B(".introjs-hint"),function(t){H.call(this,t.getAttribute("data-step"))}.bind(this))}function M(){var t=B(".introjs-hint");t&&t.length?C(t,function(t){R.call(this,t.getAttribute("data-step"))}.bind(this)):P.call(this,this._targetElement)}function R(t){var e=B('.introjs-hint[data-step="'+t+'"]')[0];e&&E(e,/introjs-hidehint/g)}function V(){C(B(".introjs-hint"),function(t){z.call(this,t.getAttribute("data-step"))}.bind(this))}function z(t){var e=B('.introjs-hint[data-step="'+t+'"]')[0];e&&e.parentNode.removeChild(e)}function D(){var t=this,e=document.querySelector(".introjs-hints");null===e&&((e=document.createElement("div")).className="introjs-hints");C(this._introItems,function(i,n){if(!document.querySelector('.introjs-hint[data-step="'+n+'"]')){var o=document.createElement("a");y(o),o.onclick=function(e){return function(i){var n=i||window.event;n.stopPropagation&&n.stopPropagation(),null!==n.cancelBubble&&(n.cancelBubble=!0),G.call(t,e)}}(n),o.className="introjs-hint",i.hintAnimation||S(o,"introjs-hint-no-anim"),A(i.element)&&S(o,"introjs-fixedhint");var s=document.createElement("div");s.className="introjs-hint-dot";var l=document.createElement("div");l.className="introjs-hint-pulse",o.appendChild(s),o.appendChild(l),o.setAttribute("data-step",n),i.targetElement=i.element,i.element=o,F.call(this,i.hintPosition,o,i.targetElement),e.appendChild(o)}}.bind(this)),document.body.appendChild(e),void 0!==this._hintsAddedCallback&&this._hintsAddedCallback.call(this)}function F(t,e,i){var n=W.call(this,i);switch(t){default:case"top-left":e.style.left=n.left+"px",e.style.top=n.top+"px";break;case"top-right":e.style.left=n.left+n.width-20+"px",e.style.top=n.top+"px";break;case"bottom-left":e.style.left=n.left+"px",e.style.top=n.top+n.height-20+"px";break;case"bottom-right":e.style.left=n.left+n.width-20+"px",e.style.top=n.top+n.height-20+"px";break;case"middle-left":e.style.left=n.left+"px",e.style.top=n.top+(n.height-20)/2+"px";break;case"middle-right":e.style.left=n.left+n.width-20+"px",e.style.top=n.top+(n.height-20)/2+"px";break;case"middle-middle":e.style.left=n.left+(n.width-20)/2+"px",e.style.top=n.top+(n.height-20)/2+"px";break;case"bottom-middle":e.style.left=n.left+(n.width-20)/2+"px",e.style.top=n.top+n.height-20+"px";break;case"top-middle":e.style.left=n.left+(n.width-20)/2+"px",e.style.top=n.top+"px"}}function G(t){var e=document.querySelector('.introjs-hint[data-step="'+t+'"]'),i=this._introItems[t];void 0!==this._hintClickCallback&&this._hintClickCallback.call(this,e,i,t);var n=I.call(this);if(parseInt(n,10)!==t){var o=document.createElement("div"),s=document.createElement("div"),l=document.createElement("div"),r=document.createElement("div");o.className="introjs-tooltip",o.onclick=function(t){t.stopPropagation?t.stopPropagation():t.cancelBubble=!0},s.className="introjs-tooltiptext";var a=document.createElement("p");a.innerHTML=i.hint;var c=document.createElement("a");c.className=this._options.buttonClass,c.setAttribute("role","button"),c.innerHTML=this._options.hintButtonLabel,c.onclick=H.bind(this,t),s.appendChild(a),s.appendChild(c),l.className="introjs-arrow",o.appendChild(l),o.appendChild(s),this._currentStep=e.getAttribute("data-step"),r.className="introjs-tooltipReferenceLayer introjs-hintReference",r.setAttribute("data-step",e.getAttribute("data-step")),b.call(this,r),r.appendChild(o),document.body.appendChild(r),u.call(this,e,o,l,null,!0)}}function W(t){var e=document.body,i=document.documentElement,n=window.pageYOffset||i.scrollTop||e.scrollTop,o=window.pageXOffset||i.scrollLeft||e.scrollLeft,s=t.getBoundingClientRect();return{top:s.top+n,width:s.width,height:s.height,left:s.left+o}}function J(t){var e=window.getComputedStyle(t),i="absolute"===e.position,n=/(auto|scroll)/;if("fixed"===e.position)return document.body;for(var o=t;o=o.parentElement;)if(e=window.getComputedStyle(o),(!i||"static"!==e.position)&&n.test(e.overflow+e.overflowY+e.overflowX))return o;return document.body}function $(t,e){t.scrollTop=e.offsetTop-t.offsetTop}function Q(){return parseInt(this._currentStep+1,10)/this._introItems.length*100}var X=function(e){var i;if("object"==typeof e)i=new t(e);else if("string"==typeof e){var n=document.querySelector(e);if(!n)throw new Error("There is no element with given selector.");i=new t(n)}else i=new t(document.body);return X.instances[k(i,"introjs-instance")]=i,i};return X.version="2.9.3",X.instances={},X.fn=t.prototype={clone:function(){return new t(this)},setOption:function(t,e){return this._options[t]=e,this},setOptions:function(t){return this._options=function(t,e){var i,n={};for(i in t)n[i]=t[i];for(i in e)n[i]=e[i];return n}(this._options,t),this},start:function(t){return e.call(this,this._targetElement,t),this},goToStep:function(t){return s.call(this,t),this},addStep:function(t){return this._options.steps||(this._options.steps=[]),this._options.steps.push(t),this},addSteps:function(t){if(t.length){for(var e=0;e<t.length;e++)this.addStep(t[e]);return this}},goToStepNumber:function(t){return l.call(this,t),this},nextStep:function(){return r.call(this),this},previousStep:function(){return a.call(this),this},exit:function(t){return h.call(this,this._targetElement,t),this},refresh:function(){return c.call(this),this},onbeforechange:function(t){if("function"!=typeof t)throw new Error("Provided callback for onbeforechange was not a function");return this._introBeforeChangeCallback=t,this},onchange:function(t){if("function"!=typeof t)throw new Error("Provided callback for onchange was not a function.");return this._introChangeCallback=t,this},onafterchange:function(t){if("function"!=typeof t)throw new Error("Provided callback for onafterchange was not a function");return this._introAfterChangeCallback=t,this},oncomplete:function(t){if("function"!=typeof t)throw new Error("Provided callback for oncomplete was not a function.");return this._introCompleteCallback=t,this},onhintsadded:function(t){if("function"!=typeof t)throw new Error("Provided callback for onhintsadded was not a function.");return this._hintsAddedCallback=t,this},onhintclick:function(t){if("function"!=typeof t)throw new Error("Provided callback for onhintclick was not a function.");return this._hintClickCallback=t,this},onhintclose:function(t){if("function"!=typeof t)throw new Error("Provided callback for onhintclose was not a function.");return this._hintCloseCallback=t,this},onexit:function(t){if("function"!=typeof t)throw new Error("Provided callback for onexit was not a function.");return this._introExitCallback=t,this},onskip:function(t){if("function"!=typeof t)throw new Error("Provided callback for onskip was not a function.");return this._introSkipCallback=t,this},onbeforeexit:function(t){if("function"!=typeof t)throw new Error("Provided callback for onbeforeexit was not a function.");return this._introBeforeExitCallback=t,this},addHints:function(){return P.call(this,this._targetElement),this},hideHint:function(t){return H.call(this,t),this},hideHints:function(){return O.call(this),this},showHint:function(t){return R.call(this,t),this},showHints:function(){return M.call(this),this},removeHints:function(){return V.call(this),this},removeHint:function(t){return z.call(this,t),this},showHintDialog:function(t){return G.call(this,t),this}},X}));
function pairwiseAlignDna(t,e){console.log(e);var i=e.MATCH_SCORE,s=e.MISMATCH_SCORE,n=e.BEGIN_GAP_PENALTY,r=e.GAP_PENALTY,h=e.END_GAP_PENALTY;for(final_seq="";t.length>1;)newDnaOne=t[0],newDnaTwo=t[1],-1!=newDnaOne.search(/./)&&(newDnaOne=newDnaOne.match(/./g)),-1!=newDnaTwo.search(/./)&&(newDnaTwo=newDnaTwo.match(/./g)),alignment=pairwiseDna(newDnaOne,newDnaTwo,i,s,r,n,h),t.shift(),t.shift(),t.push(merge_align(alignment));return t[0]}function merge_align(t){res="";for(var e=0;e<t.getAlignedM().length;e++)"-"!=t.getAlignedM()[e]?res+=t.getAlignedM()[e]:res+=t.getAlignedN()[e];return res}function is_valid_sequence(t,e){for(k in e)for(l1_i=0,seq1=e[k],i=l1_i;i<t.length;i++);return!0}function seq_align(t){var e=opt.MATCH_SCORE,s=opt.MISMATCH_SCORE,n=opt.BEGIN_GAP_PENALTY,r=opt.GAP_PENALTY,h=opt.END_GAP_PENALTY,a=-1e4;for(to_remove_i=null,to_remove_j=null,best_align=null,i=0;i<t.length;i++)for(j=i+1;j<t.length;j++)newDnaOne=t[i],newDnaTwo=t[j],-1!=newDnaOne.search(/./)&&(newDnaOne=newDnaOne.match(/./g)),-1!=newDnaTwo.search(/./)&&(newDnaTwo=newDnaTwo.match(/./g)),alignment=pairwiseDna(newDnaOne,newDnaTwo,e,s,r,n,h),alignment.score>=a&&(a=alignment.score,to_remove_i=t[i],to_remove_j=t[j],best_align=alignment);return{to_remove_i:to_remove_i,to_remove_j:to_remove_j,best_align:best_align}}function addReturns(t){return t=t.replace(/(.{60})/g,(function(t,e,i,s){return e+"\n"}))}function pairwiseDna(t,e,i,s,n,r,h){var a=new Identity;a.setMatch(i),a.setMismatch(s);var o,S=new ScoreSet;return S.setScoreSetParam(a,n,r,h),(o=new AlignPairLinear).setAlignParam(t,e,S),o.align(),o}function getScore(t,e){return this.scoringMatrix.scoringMatrix_getScore(t,e)}function setScoreSetParam(t,e,i,s){this.scoringMatrix=t,this.gap=e,this.beginGap=i,this.endGap=s}function ScoreSet(){this.scoringMatrix,this.gap,this.beginGap,this.endGap,this.useBeginGapTop=!0,this.useBeginGapLeft=!0,this.useEndGapBottom=!0,this.useEndGapRight=!0}function scoringMatrix_getScore(t,e){return(t=t.toLowerCase())==(e=e.toLowerCase())?this.match:this.mismatch}function ScoringMatrix(){this.mismatch,this.match}function setMismatch(t){this.mismatch=t}function setMatch(t){this.match=t}function Identity(){}function align(){if(0==this.M.length)for(var t=1;t<=this.N.length;t++)this.alignedM.push("-"),this.alignedN.push(this.N[t-1]),this.score=this.score+this.scoreSet.gap;else if(0==this.N.length)for(t=1;t<=this.M.length;t++)this.alignedN.push("-"),this.alignedM.push(this.M[t-1]),this.score=this.score+this.scoreSet.gap;else 0==this.M.length&&0==this.N.length||this.path(0,0,this.M.length,this.N.length)}function path(t,e,i,s){if(t+1==i||e==s){for(var n=new Array,r=new Array,h=t+1;h<=i;h++)n.push(this.M[h-1]);for(var a=e+1;a<=s;a++)r.push(this.N[a-1]);var o=new AlignPairQuad;subScoreSet=new ScoreSet,e==s?0==e?subScoreSet.setScoreSetParam(this.scoreSet.scoringMatrix,this.scoreSet.beginGap,this.scoreSet.beginGap,this.scoreSet.beginGap):e==this.N.length?subScoreSet.setScoreSetParam(this.scoreSet.scoringMatrix,this.scoreSet.endGap,this.scoreSet.endGap,this.scoreSet.endGap):subScoreSet.setScoreSetParam(this.scoreSet.scoringMatrix,this.scoreSet.gap,this.scoreSet.gap,this.scoreSet.gap):(subScoreSet.setScoreSetParam(this.scoreSet.scoringMatrix,this.scoreSet.gap,this.scoreSet.beginGap,this.scoreSet.endGap),subScoreSet.useBeginGapTop=!1,subScoreSet.useBeginGapLeft=!1,subScoreSet.useEndGapBottom=!1,subScoreSet.useEndGapRight=!1,0==t&&(subScoreSet.useBeginGapTop=!0),0==e&&(subScoreSet.useBeginGapLeft=!0),s==this.N.length&&(subScoreSet.useEndGapRight=!0),i==this.M.length&&(subScoreSet.useEndGapBottom=!0)),o.initializeMatrix(n,r,subScoreSet),o.fillMatrix(),o.align(),this.alignedM.push(o.getAlignedM()),this.alignedN.push(o.getAlignedN()),this.score=this.score+o.score}else{var S,g,c,p=Math.floor((t+i)/2);if(this.Sn[e]=0,0==t)for(a=e+1;a<=s;a++)this.Sn[a]=this.Sn[a-1]-this.scoreSet.beginGap;else for(a=e+1;a<=s;a++)this.Sn[a]=this.Sn[a-1]-this.scoreSet.gap;for(h=t+1;h<=p;h++){S=this.Sn[e],g=0==e?this.Sn[e]-this.scoreSet.beginGap:this.Sn[e]-this.scoreSet.gap,this.Sn[e]=g;for(a=e+1;a<=s;a++)g=a==this.N.length&&h==this.M.length?Math.max(this.Sn[a]-this.scoreSet.endGap,Math.max(g-this.scoreSet.endGap,S+this.scoreSet.getScore(this.M[h-1],this.N[a-1]))):h==this.M.length?Math.max(this.Sn[a]-this.scoreSet.gap,Math.max(g-this.scoreSet.endGap,S+this.scoreSet.getScore(this.M[h-1],this.N[a-1]))):a==this.N.length?Math.max(this.Sn[a]-this.scoreSet.endGap,Math.max(g-this.scoreSet.gap,S+this.scoreSet.getScore(this.M[h-1],this.N[a-1]))):Math.max(this.Sn[a]-this.scoreSet.gap,Math.max(g-this.scoreSet.gap,S+this.scoreSet.getScore(this.M[h-1],this.N[a-1]))),S=this.Sn[a],this.Sn[a]=g}if(this.Sp[s]=0,i==this.M.length)for(a=s-1;a>=e;a--)this.Sp[a]=this.Sp[a+1]-this.scoreSet.endGap;else for(a=s-1;a>=e;a--)this.Sp[a]=this.Sp[a+1]-this.scoreSet.gap;for(h=i-1;h>=p;h--){S=this.Sp[s],c=s==this.N.length?this.Sp[s]-this.scoreSet.endGap:this.Sp[s]-this.scoreSet.gap,this.Sp[s]=c;for(a=s-1;a>=e;a--)c=0==a&&0==h?Math.max(this.Sp[a]-this.scoreSet.beginGap,Math.max(c-this.scoreSet.beginGap,S+this.scoreSet.getScore(this.M[h+1-1],this.N[a+1-1]))):0==a?Math.max(this.Sp[a]-this.scoreSet.beginGap,Math.max(c-this.scoreSet.gap,S+this.scoreSet.getScore(this.M[h+1-1],this.N[a+1-1]))):0==h?Math.max(this.Sp[a]-this.scoreSet.gap,Math.max(c-this.scoreSet.beginGap,S+this.scoreSet.getScore(this.M[h+1-1],this.N[a+1-1]))):Math.max(this.Sp[a]-this.scoreSet.gap,Math.max(c-this.scoreSet.gap,S+this.scoreSet.getScore(this.M[h+1-1],this.N[a+1-1]))),S=this.Sp[a],this.Sp[a]=c}var l=this.Sn[e]+this.Sp[e],M=e;for(a=e+1;a<=s;a++)this.Sn[a]+this.Sp[a]>=l&&(l=this.Sn[a]+this.Sp[a],M=a);this.path(t,e,p,M),this.path(p,M,i,s)}}function getAlignedM(){return this.alignedM.join("")}function getAlignedN(){return this.alignedN.join("")}function setAlignParam(t,e,i){this.M=t,this.N=e,this.alignedM=new Array,this.alignedN=new Array,this.scoreSet=i,this.Sn=new Array(this.N.length),this.Sp=new Array(this.N.length),this.score=0}function AlignPairLinear(){this.M,this.N,this.alignedM,this.alignedN,this.scoreSet,this.Sn,this.Sp,this.score}new ScoreSet,ScoreSet.prototype.getScore=getScore,ScoreSet.prototype.setScoreSetParam=setScoreSetParam,new ScoringMatrix,ScoringMatrix.prototype.scoringMatrix_getScore=scoringMatrix_getScore,Identity.prototype=new ScoringMatrix,Identity.prototype.setMismatch=setMismatch,Identity.prototype.setMatch=setMatch,new AlignPairLinear,AlignPairLinear.prototype.align=align,AlignPairLinear.prototype.path=path,AlignPairLinear.prototype.setAlignParam=setAlignParam,AlignPairLinear.prototype.getAlignedM=getAlignedM,AlignPairLinear.prototype.getAlignedN=getAlignedN;
"use strict";
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */var extendStatics=function(e,t){return(extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function __extends(e,t){function n(){this.constructor=e}extendStatics(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}function __awaiter(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{a(r.next(e))}catch(e){i(e)}}function c(e){try{a(r.throw(e))}catch(e){i(e)}}function a(e){e.done?o(e.value):new n((function(t){t(e.value)})).then(s,c)}a((r=r.apply(e,t||[])).next())}))}function __generator(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}function __spreadArrays(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],s=0,c=i.length;s<c;s++,o++)r[o]=i[s];return r}var VisConnectUi=function(){function e(e,t){this.visconnect=e,this.element=t,this.cursorResetTimeout=0,this.addTemplate(),this.initiateCursors(),this.visconnect.protocol.communication.onConnectionCallback=this.updateConnections.bind(this),this.updateConnections()}return e.prototype.initiateCursors=function(){this.element.addEventListener("mousemove",this.mouseMoved.bind(this));var e=document.createElement("div");e.id="visconnect-cursors",document.body.appendChild(e)},e.prototype.getCursor=function(e){var t="visconnect-cursor-"+e,n=document.getElementById(t);if(!n){var r=document.getElementById("visconnect-cursors");(n=document.createElement("div")).style.background=stringToHex(e),n.style.width="5px",n.style.height="5px",n.style.position="absolute",n.style.borderRadius="3px",n.style.pointerEvents="none",n.id=t,r.appendChild(n)}return n},e.prototype.mouseMoved=function(e){var t=e,n=this.visconnect.protocol.communication.id,r=t.collaboratorId;if(r&&n&&n!==r){var o=this.getCursor(r);o.style.left=t.clientX-2+"px",o.style.top=t.clientY-2+"px"}},e.prototype.eventCancelled=function(e){clearTimeout(this.cursorResetTimeout);var t=document.querySelector(e.target)||document.body;t.style.setProperty("cursor","not-allowed","important"),this.cursorResetTimeout=window.setTimeout((function(){t.style.removeProperty("cursor")}),50)},e.prototype.updateConnections=function(){var e=this.visconnect.protocol.communication.getNumberOfConnections()-1;e>0?(document.getElementById("visconnect-container").style.height="70px",document.getElementById("visconnect-collab-notice").style.display="inline",document.getElementById("visconnect-collab-count").innerText=String(e)):(document.getElementById("visconnect-container").style.height="50px",document.getElementById("visconnect-collab-notice").style.display="none")},e.prototype.invite=function(){var e=this.visconnect.protocol.communication,t=e.leaderId,n=document.getElementById("visconnect-logo");if(!t){var r=document.getElementById("visconnect-not-ready");return n.style.display="none",r.style.display="inline",void setTimeout((function(){n.style.display="block",r.style.display="none"}),1e3)}var o=t===e.id?location.href+"?visconnectid="+t:location.href;copyToClipboard(o);var i=document.getElementById("visconnect-link-copied");n.style.display="none",i.style.display="inline",setTimeout((function(){n.style.display="block",i.style.display="none"}),2e3)},e.prototype.addTemplate=function(){var e=document.createElement("div");e.id="visconnect-container",e.innerHTML='\n<a id="visconnect-invite">\n    \x3c!--<svg id="visconnect-logo" width="50" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="link" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" class="svg-inline&#45;&#45;fa fa-link fa-w-16 fa-2x"><path fill="#fff" d="M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z" class=""></path></svg>--\x3e\n    <svg id="visconnect-logo" width="50" version="1.1" viewBox="0 0 55.55724 55.55724" xmlns="http://www.w3.org/2000/svg" xmlns:cc="http://creativecommons.org/ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">\n        <g transform="translate(-15.5 -20.905)">\n            <path d="m49.236 53.67s-6.0878-19.94-22.215-6.3478c-10.3 8.6812-12.464 16.499-6.203 23.516 7.1388 8.0014 16.301 3.8953 25.966-10.387" fill="none" stroke="#36b" stroke-width="3"/>\n            <path d="m36.975 38.666s14.57-21.929 26.543-12.407c11.973 9.5217 1.9956 17.866-2.3081 22.362-6.4915 6.7806-14.408 11.996-20.629 5.0494-3.8794-4.3324-4.3277-7.6462-4.3277-7.6462" fill="none" stroke="#36b" stroke-width="3"/>\n            <path d="m61.313 40.246h-3.6787l1.936 4.6647c0.13471 0.32337-0.01958 0.68598-0.32747 0.82317l-1.7049 0.73499c-0.31772 0.13713-0.67422-0.01936-0.80906-0.33321l-1.8397-4.4295-3.0052 3.0575c-0.40047 0.40736-1.05 0.09324-1.05-0.44098v-14.738c0-0.56252 0.69082-0.83679 1.0499-0.44098l9.8624 10.034c0.39783 0.38345 0.10406 1.0682-0.43342 1.0682z" fill="#fff" stroke="#000"/>\n            <path d="m37.341 62.869h-3.6787l1.936 4.6647c0.13472 0.32337-0.01958 0.68598-0.32747 0.82317l-1.7049 0.73499c-0.31772 0.13713-0.67422-0.01936-0.80906-0.33321l-1.8397-4.4295-3.0052 3.0575c-0.40047 0.40736-1.05 0.09324-1.05-0.44098v-14.738c0-0.56253 0.69082-0.83679 1.0499-0.44098l9.8624 10.034c0.39783 0.38345 0.10406 1.0682-0.43342 1.0682z" fill="#fff" stroke="#000"/>\n        </g>\n    </svg>\n</a>\n<span id="visconnect-link-copied">Invite Link Copied.</span>\n<span id="visconnect-not-ready">Not yet ready...</span>\n<span id="visconnect-collab-notice"><span id="visconnect-collab-count"></span> connected</span>\n\n<style>\n#visconnect-container {\n    position: fixed;\n    right: 10px;\n    bottom: 100px;\n    background: rgba(120,120,120,0.5);\n    border: 1px solid #ccc;\n    border-radius: 10px;\n    width: 80px;\n    height: 50px;\n    padding: 10px;\n    transition: height 500ms;\n    color: #fff;\n    font-family: \'Times New Roman\',Times,serif;\n}\n#visconnect-container, #visconnect-container * {\n    box-sizing: content-box;\n}\n#visconnect-logo {\n    padding-left: 15px;\n    display: block;\n    background: transparent;\n}\n#visconnect-invite:hover {\n    cursor: pointer;\n}\n#visconnect-invite:hover #visconnect-logo path {\n    stroke: #000;\n} \n#visconnect-link-copied, #visconnect-collab-notice, #visconnect-not-ready {\n    display: none;\n}\n#visconnect-collab-notice {\n    font-size: 11pt;\n    position: relative;\n    top: 5px;\n    display: inline-block;\n    width: 100px;\n}\n</style>',document.body.appendChild(e),document.getElementById("visconnect-invite").onclick=this.invite.bind(this)},e}(),copyToClipboard=function(e){var t=document.createElement("textarea");t.value=e,t.setAttribute("readonly",""),t.style.position="absolute",t.style.left="-9999px",document.body.appendChild(t);var n=document.getSelection(),r=!!(n&&n.rangeCount>0)&&n.getRangeAt(0);t.select(),document.execCommand("copy"),document.body.removeChild(t),r&&n&&(n.removeAllRanges(),n.addRange(r))},stringToHex=function(e){var t=0;if(0===e.length)return"#000000";for(var n=0;n<e.length;n++)t=e.charCodeAt(n)+((t<<5)-t),t&=t;var r="#";for(n=0;n<3;n++){r+=("00"+(t>>8*n&255).toString(16)).substr(-2)}return r},VcListener=function(){function e(e,t,n,r){this.svg=e,this.hearEvent=t,this.customEvents=n,this.ignoreEvents=r,this.addListenersToElementAndChildren(this.svg)}return e.prototype.addListenersToElementAndChildren=function(e){this.addListenersToElement(e);for(var t=0,n=e.children;t<n.length;t++){var r=n[t];this.addListenersToElementAndChildren(r)}},e.prototype.addListenersToElement=function(e){for(var t=this,n=this.captureEvent(e).bind(this),r=this.customEvents?this.customEvents:[],o=0,i=["mousemove","mouseup","mousedown","touchmove","mouseenter","mouseout","mouseover","mouseleave","click","dblclick","touchstart","touchend","selectstart","dragstart"].concat(r).filter((function(e){return!t.ignoreEvents||!t.ignoreEvents.includes(e)}));o<i.length;o++){var s=i[o];e.addEventListener(s,n)}var c=e.appendChild,a=e.insertBefore,u=this;e.appendChild=function(e){return u.addListenersToElement(e),c.call(this,e)},e.insertBefore=function(e,t){return u.addListenersToElement(e),a.call(this,e,t)}},e.prototype.captureEvent=function(e){var t=this;return function(n){if(n.target===e&&!n["visconnect-received"]){var r=t.getStrippedEvent(n);t.hearEvent(r,n)}}},e.prototype.getStrippedEvent=function(e){var t={type:"",target:"",targetType:"",touches:[],timeStamp:-1,collaboratorId:""};for(var n in e){var r=e[n];"object"!=typeof r&&"function"!=typeof r&&(t[n]=r)}if(t.clientX&&(t.clientX=t.clientX+window.scrollX),t.x&&(t.x=t.x+window.scrollX),t.clientY&&(t.clientY=t.clientY+window.scrollY),t.y&&(t.y=t.y+window.scrollY),window.TouchEvent&&e instanceof TouchEvent&&e.touches&&e.touches.length)for(var o=0,i=e.touches;o<i.length;o++){var s=i[o];t.touches.push({clientX:s.clientX+window.scrollX,clientY:s.clientY+window.scrollX})}e.detail&&(t.detail=e.detail);var c=this.getElementSelector(e.target);return c&&(t.target=c,t.targetType=e.target.tagName.toLowerCase()),t},e.prototype.getElementSelector=function(e){if(!e)return null;if(e===document.body)return"body";var t=e.parentNode;if(!t)return null;var n=Array.from(t.children).indexOf(e),r=e.tagName;return this.getElementSelector(t)+" > "+r+":nth-child("+(n+1)+")"},e}();function delayAddEventListener(){return Element.prototype.addEventListenerBackup=Element.prototype.addEventListener,Element.prototype.addEventListener=function(e,t){var n=this;setTimeout((function(){Element.prototype.addEventListenerBackup.call(n,e,t)}),110)},new Promise((function(e){window.setTimeout((function(){Element.prototype.addEventListener=Element.prototype.addEventListenerBackup,e()}),100)}))}function disableStopPropagation(){Event.prototype.stopImmediatePropagationBackup=Event.prototype.stopImmediatePropagation,Event.prototype.stopImmediatePropagation=function(){}}function stopPropagation(e){e.stopImmediatePropagationBackup(),e.stopPropagation()}function recreateEvent(e,t){var n,r=e.target;if("touch"===e.type.substr(0,5))try{for(var o in(n=document.createEvent("TouchEvent")).initEvent(e.type,!0,!1),e)"isTrusted"!==o&&e.hasOwnProperty(o)&&Object.defineProperty(n,o,{writable:!0,value:e[o]})}catch(t){var i="mousemove";"touchstart"===e.type?i="mousedown":"touchend"===e.type&&(i="mouseup"),e.type=i,e.touches[0]&&(e.clientX=e.touches[0].clientX,e.clientY=e.touches[0].clientY),n=new MouseEvent(e.type,e)}else n="mouse"===e.type.substr(0,5)||"click"===e.type?new MouseEvent(e.type,e):"drag"===e.type.substr(0,4)?new DragEvent(e.type,e):new Event(e.type,e);if(e.detail&&Object.defineProperty(n,"detail",{writable:!0,value:e.detail}),r){var s=document.querySelector(r);s||(console.error("element not found",r),s=document.body),t=s}return Object.defineProperty(n,"target",{writable:!0,value:t}),Object.defineProperty(n,"view",{writable:!0,value:window}),n}function isFunction(e){return"function"==typeof e}var _enable_super_gross_mode_that_will_cause_bad_things=!1,config={Promise:void 0,set useDeprecatedSynchronousErrorHandling(e){e&&(new Error).stack;_enable_super_gross_mode_that_will_cause_bad_things=e},get useDeprecatedSynchronousErrorHandling(){return _enable_super_gross_mode_that_will_cause_bad_things}};function hostReportError(e){setTimeout((function(){throw e}),0)}var empty={closed:!0,next:function(e){},error:function(e){if(config.useDeprecatedSynchronousErrorHandling)throw e;hostReportError(e)},complete:function(){}},isArray=function(){return Array.isArray||function(e){return e&&"number"==typeof e.length}}();function isObject(e){return null!==e&&"object"==typeof e}var UnsubscriptionErrorImpl=function(){function e(e){return Error.call(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e,this}return e.prototype=Object.create(Error.prototype),e}(),UnsubscriptionError=UnsubscriptionErrorImpl,Subscription=function(){function e(e){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,e&&(this._unsubscribe=e)}return e.prototype.unsubscribe=function(){var t;if(!this.closed){var n=this._parentOrParents,r=this._unsubscribe,o=this._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,n instanceof e)n.remove(this);else if(null!==n)for(var i=0;i<n.length;++i){n[i].remove(this)}if(isFunction(r))try{r.call(this)}catch(e){t=e instanceof UnsubscriptionError?flattenUnsubscriptionErrors(e.errors):[e]}if(isArray(o)){i=-1;for(var s=o.length;++i<s;){var c=o[i];if(isObject(c))try{c.unsubscribe()}catch(e){t=t||[],e instanceof UnsubscriptionError?t=t.concat(flattenUnsubscriptionErrors(e.errors)):t.push(e)}}}if(t)throw new UnsubscriptionError(t)}},e.prototype.add=function(t){var n=t;if(!t)return e.EMPTY;switch(typeof t){case"function":n=new e(t);case"object":if(n===this||n.closed||"function"!=typeof n.unsubscribe)return n;if(this.closed)return n.unsubscribe(),n;if(!(n instanceof e)){var r=n;(n=new e)._subscriptions=[r]}break;default:throw new Error("unrecognized teardown "+t+" added to Subscription.")}var o=n._parentOrParents;if(null===o)n._parentOrParents=this;else if(o instanceof e){if(o===this)return n;n._parentOrParents=[o,this]}else{if(-1!==o.indexOf(this))return n;o.push(this)}var i=this._subscriptions;return null===i?this._subscriptions=[n]:i.push(n),n},e.prototype.remove=function(e){var t=this._subscriptions;if(t){var n=t.indexOf(e);-1!==n&&t.splice(n,1)}},e.EMPTY=function(e){return e.closed=!0,e}(new e),e}();function flattenUnsubscriptionErrors(e){return e.reduce((function(e,t){return e.concat(t instanceof UnsubscriptionError?t.errors:t)}),[])}var rxSubscriber=function(){return"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()}(),Subscriber=function(e){function t(n,r,o){var i=e.call(this)||this;switch(i.syncErrorValue=null,i.syncErrorThrown=!1,i.syncErrorThrowable=!1,i.isStopped=!1,arguments.length){case 0:i.destination=empty;break;case 1:if(!n){i.destination=empty;break}if("object"==typeof n){n instanceof t?(i.syncErrorThrowable=n.syncErrorThrowable,i.destination=n,n.add(i)):(i.syncErrorThrowable=!0,i.destination=new SafeSubscriber(i,n));break}default:i.syncErrorThrowable=!0,i.destination=new SafeSubscriber(i,n,r,o)}return i}return __extends(t,e),t.prototype[rxSubscriber]=function(){return this},t.create=function(e,n,r){var o=new t(e,n,r);return o.syncErrorThrowable=!1,o},t.prototype.next=function(e){this.isStopped||this._next(e)},t.prototype.error=function(e){this.isStopped||(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this))},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){this.destination.error(e),this.unsubscribe()},t.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},t.prototype._unsubscribeAndRecycle=function(){var e=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=e,this},t}(Subscription),SafeSubscriber=function(e){function t(t,n,r,o){var i,s=e.call(this)||this;s._parentSubscriber=t;var c=s;return isFunction(n)?i=n:n&&(i=n.next,r=n.error,o=n.complete,n!==empty&&(isFunction((c=Object.create(n)).unsubscribe)&&s.add(c.unsubscribe.bind(c)),c.unsubscribe=s.unsubscribe.bind(s))),s._context=c,s._next=i,s._error=r,s._complete=o,s}return __extends(t,e),t.prototype.next=function(e){if(!this.isStopped&&this._next){var t=this._parentSubscriber;config.useDeprecatedSynchronousErrorHandling&&t.syncErrorThrowable?this.__tryOrSetError(t,this._next,e)&&this.unsubscribe():this.__tryOrUnsub(this._next,e)}},t.prototype.error=function(e){if(!this.isStopped){var t=this._parentSubscriber,n=config.useDeprecatedSynchronousErrorHandling;if(this._error)n&&t.syncErrorThrowable?(this.__tryOrSetError(t,this._error,e),this.unsubscribe()):(this.__tryOrUnsub(this._error,e),this.unsubscribe());else if(t.syncErrorThrowable)n?(t.syncErrorValue=e,t.syncErrorThrown=!0):hostReportError(e),this.unsubscribe();else{if(this.unsubscribe(),n)throw e;hostReportError(e)}}},t.prototype.complete=function(){var e=this;if(!this.isStopped){var t=this._parentSubscriber;if(this._complete){var n=function(){return e._complete.call(e._context)};config.useDeprecatedSynchronousErrorHandling&&t.syncErrorThrowable?(this.__tryOrSetError(t,n),this.unsubscribe()):(this.__tryOrUnsub(n),this.unsubscribe())}else this.unsubscribe()}},t.prototype.__tryOrUnsub=function(e,t){try{e.call(this._context,t)}catch(e){if(this.unsubscribe(),config.useDeprecatedSynchronousErrorHandling)throw e;hostReportError(e)}},t.prototype.__tryOrSetError=function(e,t,n){if(!config.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{t.call(this._context,n)}catch(t){return config.useDeprecatedSynchronousErrorHandling?(e.syncErrorValue=t,e.syncErrorThrown=!0,!0):(hostReportError(t),!0)}return!1},t.prototype._unsubscribe=function(){var e=this._parentSubscriber;this._context=null,this._parentSubscriber=null,e.unsubscribe()},t}(Subscriber);function canReportError(e){for(;e;){var t=e,n=t.closed,r=t.destination,o=t.isStopped;if(n||o)return!1;e=r&&r instanceof Subscriber?r:null}return!0}function toSubscriber(e,t,n){if(e){if(e instanceof Subscriber)return e;if(e[rxSubscriber])return e[rxSubscriber]()}return e||t||n?new Subscriber(e,t,n):new Subscriber(empty)}var observable=function(){return"function"==typeof Symbol&&Symbol.observable||"@@observable"}();function noop(){}function pipeFromArray(e){return e?1===e.length?e[0]:function(t){return e.reduce((function(e,t){return t(e)}),t)}:noop}var Observable=function(){function e(e){this._isScalar=!1,e&&(this._subscribe=e)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(e,t,n){var r=this.operator,o=toSubscriber(e,t,n);if(r?o.add(r.call(o,this.source)):o.add(this.source||config.useDeprecatedSynchronousErrorHandling&&!o.syncErrorThrowable?this._subscribe(o):this._trySubscribe(o)),config.useDeprecatedSynchronousErrorHandling&&o.syncErrorThrowable&&(o.syncErrorThrowable=!1,o.syncErrorThrown))throw o.syncErrorValue;return o},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){config.useDeprecatedSynchronousErrorHandling&&(e.syncErrorThrown=!0,e.syncErrorValue=t),canReportError(e)?e.error(t):console.warn(t)}},e.prototype.forEach=function(e,t){var n=this;return new(t=getPromiseCtor(t))((function(t,r){var o;o=n.subscribe((function(t){try{e(t)}catch(e){r(e),o&&o.unsubscribe()}}),r,t)}))},e.prototype._subscribe=function(e){var t=this.source;return t&&t.subscribe(e)},e.prototype[observable]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return 0===e.length?this:pipeFromArray(e)(this)},e.prototype.toPromise=function(e){var t=this;return new(e=getPromiseCtor(e))((function(e,n){var r;t.subscribe((function(e){return r=e}),(function(e){return n(e)}),(function(){return e(r)}))}))},e.create=function(t){return new e(t)},e}();function getPromiseCtor(e){if(e||(e=Promise),!e)throw new Error("no Promise impl found");return e}var VC_MESSAGE_TYPE,ObjectUnsubscribedErrorImpl=function(){function e(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}return e.prototype=Object.create(Error.prototype),e}(),ObjectUnsubscribedError=ObjectUnsubscribedErrorImpl,SubjectSubscription=function(e){function t(t,n){var r=e.call(this)||this;return r.subject=t,r.subscriber=n,r.closed=!1,r}return __extends(t,e),t.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var e=this.subject,t=e.observers;if(this.subject=null,t&&0!==t.length&&!e.isStopped&&!e.closed){var n=t.indexOf(this.subscriber);-1!==n&&t.splice(n,1)}}},t}(Subscription),SubjectSubscriber=function(e){function t(t){var n=e.call(this,t)||this;return n.destination=t,n}return __extends(t,e),t}(Subscriber),Subject=function(e){function t(){var t=e.call(this)||this;return t.observers=[],t.closed=!1,t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return __extends(t,e),t.prototype[rxSubscriber]=function(){return new SubjectSubscriber(this)},t.prototype.lift=function(e){var t=new AnonymousSubject(this,this);return t.operator=e,t},t.prototype.next=function(e){if(this.closed)throw new ObjectUnsubscribedError;if(!this.isStopped)for(var t=this.observers,n=t.length,r=t.slice(),o=0;o<n;o++)r[o].next(e)},t.prototype.error=function(e){if(this.closed)throw new ObjectUnsubscribedError;this.hasError=!0,this.thrownError=e,this.isStopped=!0;for(var t=this.observers,n=t.length,r=t.slice(),o=0;o<n;o++)r[o].error(e);this.observers.length=0},t.prototype.complete=function(){if(this.closed)throw new ObjectUnsubscribedError;this.isStopped=!0;for(var e=this.observers,t=e.length,n=e.slice(),r=0;r<t;r++)n[r].complete();this.observers.length=0},t.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},t.prototype._trySubscribe=function(t){if(this.closed)throw new ObjectUnsubscribedError;return e.prototype._trySubscribe.call(this,t)},t.prototype._subscribe=function(e){if(this.closed)throw new ObjectUnsubscribedError;return this.hasError?(e.error(this.thrownError),Subscription.EMPTY):this.isStopped?(e.complete(),Subscription.EMPTY):(this.observers.push(e),new SubjectSubscription(this,e))},t.prototype.asObservable=function(){var e=new Observable;return e.source=this,e},t.create=function(e,t){return new AnonymousSubject(e,t)},t}(Observable),AnonymousSubject=function(e){function t(t,n){var r=e.call(this)||this;return r.destination=t,r.source=n,r}return __extends(t,e),t.prototype.next=function(e){var t=this.destination;t&&t.next&&t.next(e)},t.prototype.error=function(e){var t=this.destination;t&&t.error&&this.destination.error(e)},t.prototype.complete=function(){var e=this.destination;e&&e.complete&&this.destination.complete()},t.prototype._subscribe=function(e){return this.source?this.source.subscribe(e):Subscription.EMPTY},t}(Subject),PeerjsConnection=function(){function e(e){var t=this;this.connection=e,this.messages=new Subject,this.connection.on("data",(function(e){t.receiveMessage(e)}))}return e.prototype.send=function(e){var t=this;location.href.includes("testdelay")?setTimeout((function(){return t.connection.send(e)}),Math.round(100*Math.random())):this.connection.send(e)},e.prototype.getPeer=function(){return this.connection.peer},e.prototype.receiveMessage=function(e){this.messages.next(e)},e.prototype.open=function(){var e=this;return new Promise((function(t){e.connection.on("open",t)}))},e}(),PeerjsNetwork=function(){function e(){this.onOpen=function(){return 0}}return e.prototype.init=function(e,t,n,r){this.onOpen=t,this.peer=new Peer(e,{host:"michaschwab.de",port:9e3,secure:!0,path:"/visconnect",config:{iceServers:[{urls:"stun:stun.l.google.com:19302"},{urls:"turn:numb.viagenie.ca",credential:"a/j'/9CmxTCa",username:"saffo.d@husky.neu.edu"}]}}),this.peer._open?this.onOpen():this.peer.on("open",this.onOpen),this.peer.on("connection",(function(e){console.log("connection!"),n(new PeerjsConnection(e))})),this.peer.on("disconnected",(function(){r()})),window.addEventListener("beforeunload",(function(){return r()}))},e.prototype.getId=function(){return this.peer.id},e.prototype.connect=function(e){var t=this;return new Promise((function(n){return __awaiter(t,void 0,void 0,(function(){var t,r;return __generator(this,(function(o){switch(o.label){case 0:return t=this.peer.connect(e),[4,(r=new PeerjsConnection(t)).open()];case 1:return o.sent(),n(r),[2]}}))}))}))},e}(),VcCommunication=function(){function e(e){this.connections=[],this.peers=[],this.onConnectionCallback=function(){},this.id="",this.lastEventsMessageTime=-1,this.throttleTimeout=-1,this.leaderId=e.leaderId,this.id=e.ownId,this.onEventReceived=e.onEventReceived,this.onNewLockOwner=e.onNewLockOwner,this.getPastEvents=e.getPastEvents,this.onLockRequested=e.onLockRequested,this.onOpenCallback=e.onOpenCallback,this.peer=new PeerjsNetwork}return e.prototype.init=function(){this.peer.init(this.id,this.onOpen.bind(this),this.onConnection.bind(this),this.onDisconnection.bind(this))},e.prototype.requestLock=function(e){if(!this.id)return!1;if(!this.leaderConnection&&this.id!==this.leaderId)return!1;var t={type:VC_MESSAGE_TYPE.LOCK_REQUESTED,targetSelector:e,requester:this.id,sender:this.id};return this.id===this.leaderId?this.receiveMessage(t):this.leaderConnection.send(t),!0},e.prototype.changeLockOwner=function(e,t,n){for(var r={type:VC_MESSAGE_TYPE.LOCK_OWNER_CHANGED,targetSelector:e,owner:t,sender:this.id,seqNum:n},o=0,i=this.connections;o<i.length;o++){i[o].send(r)}this.receiveMessage(r)},e.prototype.getId=function(){return this.peer.getId()},e.prototype.onOpen=function(){this.id=this.getId(),this.leaderId||(this.leaderId=this.id),this.connectToPeer(this.id),this.leaderId&&this.leaderId!==this.id&&this.connectToPeer(this.leaderId),this.onOpenCallback(),this.onConnectionCallback()},e.prototype.getNumberOfConnections=function(){return this.connections.length},e.prototype.onConnection=function(e){return __awaiter(this,void 0,void 0,(function(){var t;return __generator(this,(function(n){switch(n.label){case 0:return t=e.getPeer(),this.peers.push(t),this.connections.push(e),this.onConnectionCallback(),t===this.leaderId&&(this.leaderConnection=e),[4,e.open()];case 1:return n.sent(),e.messages.subscribe(this.receiveMessage.bind(this)),this.leaderId===this.id&&this.sendNewConnection(e),[2]}}))}))},e.prototype.onDisconnection=function(){return __awaiter(this,void 0,void 0,(function(){return __generator(this,(function(e){return this.sendDisconnectMessage(),[2]}))}))},e.prototype.connectToPeer=function(e){return __awaiter(this,void 0,void 0,(function(){var t;return __generator(this,(function(n){switch(n.label){case 0:return[4,this.peer.connect(e)];case 1:return t=n.sent(),this.connections.push(t),this.peers.push(e),this.onConnectionCallback(),t.getPeer()===this.leaderId&&(this.leaderConnection=t),t.messages.subscribe(this.receiveMessage.bind(this)),[2]}}))}))},e.prototype.receiveMessage=function(e){if(e.type===VC_MESSAGE_TYPE.NEW_CONNECTION)this.receiveNewConnection(e);else if(e.type===VC_MESSAGE_TYPE.EVENT){var t=e;this.onEventReceived(t.data,t.sender)}else if(e.type===VC_MESSAGE_TYPE.LOCK_REQUESTED){t=e;this.onLockRequested(t.targetSelector,t.requester)}else if(e.type===VC_MESSAGE_TYPE.LOCK_OWNER_CHANGED){t=e;this.onNewLockOwner(t.targetSelector,t.owner,t.seqNum)}else if(e.type===VC_MESSAGE_TYPE.DISCONNECTION){t=e;this.recieveDisconnectMessage(t)}},e.prototype.broadcastEvent=function(e){this.eventsMsg||(this.eventsMsg={type:VC_MESSAGE_TYPE.EVENT,sender:this.id,data:[]}),this.eventsMsg.data.push(e),this.throttledSendEvents()},e.prototype.throttledSendEvents=function(){var e=this;if(this.eventsMsg){window.requestAnimationFrame((function(){if(e.eventsMsg){for(var t=0,n=e.connections;t<n.length;t++){n[t].send(e.eventsMsg)}e.lastEventsMessageTime=Date.now(),e.eventsMsg=void 0,e.throttleTimeout=-1}}))}},e.prototype.sendNewConnection=function(e){var t={type:VC_MESSAGE_TYPE.NEW_CONNECTION,sender:this.id,peers:this.peers,eventsLedger:this.getPastEvents()};e.send(t)},e.prototype.receiveNewConnection=function(e){for(var t=0;t<e.peers.length;t++)-1===this.peers.indexOf(e.peers[t])&&(console.log("connecting to new peer",e.peers[t]),this.connectToPeer(e.peers[t]));this.onEventReceived(e.eventsLedger,e.sender,!0)},e.prototype.sendDisconnectMessage=function(){for(var e={type:VC_MESSAGE_TYPE.DISCONNECTION,sender:this.id},t=0,n=this.connections;t<n.length;t++){n[t].send(e)}},e.prototype.recieveDisconnectMessage=function(e){console.log("Peer",e.sender,"is disconnecting");for(var t=0,n=this.connections;t<n.length;t++){var r=n[t];r.getPeer()===e.sender&&(console.log("Removing peer and connection"),this.peers.splice(this.peers.indexOf(e.sender),1),this.connections.splice(this.connections.indexOf(r),1))}this.onConnectionCallback()},e}();!function(e){e[e.NEW_CONNECTION=0]="NEW_CONNECTION",e[e.EVENT=1]="EVENT",e[e.LOCK_REQUESTED=2]="LOCK_REQUESTED",e[e.LOCK_VOTE=3]="LOCK_VOTE",e[e.LOCK_OWNER_CHANGED=4]="LOCK_OWNER_CHANGED",e[e.DISCONNECTION=5]="DISCONNECTION"}(VC_MESSAGE_TYPE||(VC_MESSAGE_TYPE={}));var visconnect,visconnectUi,VcProtocol=function(){function e(e,t,n,r,o,i){this.leaderId=e,this.ownId=t,this.executeEvent=n,this.cancelEvent=r,this.unsafeElements=o,this.ledgers=new Map,this.lockOwners=new Map,this.requestedLocks=new Set,this.heldEvents=new Map,this.heldRemoteEvents=new Map,this.collaboratorId="";var s=i||VcCommunication;this.communication=new s({leaderId:e,ownId:t,onEventReceived:this.receiveRemoteEvents.bind(this),onNewLockOwner:this.lockOwnerChanged.bind(this),getPastEvents:this.getPastEvents.bind(this),onLockRequested:this.receiveLockRequest.bind(this),onOpenCallback:this.init.bind(this)}),this.communication.init()}return e.prototype.init=function(){this.collaboratorId=this.communication.getId()},e.prototype.getPastEvents=function(){return Array.from(this.ledgers.values()).reduce((function(e,t){return e.concat(t)}),[]).sort((function(e,t){return e.event.timeStamp-t.event.timeStamp}))},e.prototype.localEvent=function(e){var t=e.target;e.collaboratorId=this.communication.getId();var n=this.unsafeElements.includes(e.targetType)||this.unsafeElements.includes("*"),r=this.lockOwners.get(t);if(n||r&&r===this.collaboratorId){var o=this.makeVcEvent(e);this.addEventToLedger(o,this.collaboratorId)&&this.communication.broadcastEvent(o)}else r&&r!==this.collaboratorId?this.cancelEvent(e):(this.heldEvents.has(t)||this.heldEvents.set(t,[]),this.heldEvents.get(t).push(e),this.requestLock(t))},e.prototype.receiveRemoteEvents=function(e,t,n){void 0===n&&(n=!1);for(var r=0,o=e;r<o.length;r++){var i=o[r],s=this.ledgers.get(i.event.target),c=s&&s.length?s[s.length-1].seqNum:-1;if(this.playHeldRemoteEvents(i.event.target,c),c=s&&s.length?s[s.length-1].seqNum:-1,i.seqNum!==c+1)this.holdRemoteEvent(i);else this.addEventToLedger(i,t,n)||this.lockOwners.has(i.event.target)||this.holdRemoteEvent(i)}},e.prototype.holdRemoteEvent=function(e){this.heldRemoteEvents.has(e.event.target)||this.heldRemoteEvents.set(e.event.target,[]),this.heldRemoteEvents.get(e.event.target).push(e)},e.prototype.receiveLockRequest=function(e,t){console.error("Clients are not supposed to receive lock requests.")},e.prototype.lockOwnerChanged=function(e,t,n){if(this.requestedLocks.delete(e),t)if(this.lockOwners.set(e,t),t===this.collaboratorId&&this.heldEvents.has(e))for(var r=0,o=this.heldEvents.get(e);r<o.length;r++){var i=o[r];if(this.canExecuteEvent(i,this.collaboratorId)){var s=this.makeVcEvent(i);this.addEventToLedger(s,this.collaboratorId)&&this.communication.broadcastEvent(s)}}else this.heldRemoteEvents.has(e)&&this.playHeldRemoteEvents(e,n);else this.lockOwners.delete(e)},e.prototype.playHeldRemoteEvents=function(e,t){var n=this.heldRemoteEvents.get(e);if(n)for(var r=0,o=n.filter((function(e){return e.seqNum>=t})).sort((function(e,t){return e.seqNum-t.seqNum}));r<o.length;r++){var i=o[r];this.addEventToLedger(i,i.sender,!1)}},e.prototype.requestLock=function(e){this.requestedLocks.has(e)||this.communication.requestLock(e)&&this.requestedLocks.add(e)},e.prototype.canExecuteEvent=function(e,t,n){void 0===n&&(n=!1);var r=e.target,o=this.unsafeElements.includes(e.targetType)||this.unsafeElements.includes("*");if(!n&&!o){var i=this.lockOwners.get(r);if(!i)return!1;if(i!==t)return console.error("Trying to execute event on element with different lock owner",r,i,t),!1}return!0},e.prototype.makeVcEvent=function(e){var t=this.ledgers.get(e.target),n=0;t&&t.length&&(n=t[t.length-1].seqNum+1);return{seqNum:n,event:e,sender:this.collaboratorId}},e.prototype.addEventToLedger=function(e,t,n){void 0===n&&(n=!1);var r=e.event,o=r.target;if(!this.canExecuteEvent(r,t,n))return!1;this.ledgers.has(o)||this.ledgers.set(o,[]);var i=this.ledgers.get(o),s=0;i.length&&(s=i[i.length-1].seqNum+1);return e.seqNum===s&&(i.push(e),this.executeEvent(r),!0)},e}(),LockService=function(){function e(e){this.communication=e,this.lockOwners=new Map,this.lockTimeouts=new Map,this.expireTimeoutMs=1e3}return e.prototype.requestLock=function(e,t,n){this.lockOwners.has(e)||(this.lockOwners.set(e,t),this.communication.changeLockOwner(e,t,n))},e.prototype.extendLock=function(e){var t=this.lockTimeouts.get(e);t&&clearTimeout(t);var n=setTimeout(this.expireLock(e),this.expireTimeoutMs);this.lockTimeouts.set(e,n)},e.prototype.expireLock=function(e){var t=this;return function(){t.lockOwners.delete(e),t.communication.changeLockOwner(e,"",-1)}},e}(),VcLeaderProtocol=function(e){function t(t,n,r,o,i,s){var c=e.call(this,t,n,r,o,i,s)||this;return c.leaderId=t,c.ownId=n,c.executeEvent=r,c.cancelEvent=o,c.unsafeElements=i,c.lockService=new LockService(c.communication),c}return __extends(t,e),t.prototype.receiveLockRequest=function(e,t){var n=this.ledgers.get(e),r=n?n[n.length-1].seqNum+1:0;this.lockService.requestLock(e,t,r)},t.prototype.addEventToLedger=function(t,n){var r=e.prototype.addEventToLedger.call(this,t,n);return r&&this.lockService.extendLock(t.event.target),r},t}(VcProtocol),Visconnect=function(){function e(e,t,n,r,o,i){void 0===r&&(r=!0),this.svg=e,this.safeMode=r,this.onEventCancelled=function(){};var s=n===t?VcLeaderProtocol:VcProtocol,c=r?["body","svg","g"]:["*"];this.protocol=new s(n,t,this.executeEvent.bind(this),this.cancelEvent.bind(this),c),this.listener=new VcListener(this.svg,this.localEvent.bind(this),o,i)}return e.prototype.localEvent=function(e,t){stopPropagation(t),t.preventDefault(),this.protocol.localEvent(e)},e.prototype.cancelEvent=function(e){this.onEventCancelled(e)},e.prototype.executeEvent=function(e){var t=recreateEvent(e,this.svg);t["visconnect-received"]=!0,t.collaboratorId=e.collaboratorId,t.isLocalEvent=e.collaboratorId===this.protocol.communication.getId(),t.target&&(t.target.dispatchEvent(t),"click"===t.type&&t.target.focus())},e}(),VisConnectUtil=function(){function e(){}return e.drag=function(){var e={elements:null,draggingElements:{},onStart:function(e){},onEnd:function(e){},onDrag:function(e){}},t=function(t){return function(n){var r=n;i(r)&&(e.draggingElements[r.collaboratorId]=t,e.onStart.call(t,t.__data__))}},n=function(t){var n=t;if(i(n)){var r=e.draggingElements[n.collaboratorId];r&&e.onDrag.call(r,r.__data__)}},r=function(t){var n=t;if(i(n)){var r=e.draggingElements[n.collaboratorId];r&&(delete e.draggingElements[n.collaboratorId],e.onEnd.call(r,r.__data__))}},o=function(o){var i=o._groups[0].filter((function(e){return e}));if(i.length){e.elements=i;for(var s=0,c=e.elements;s<c.length;s++){var a=c[s];a.addEventListener("mousedown",t(a)),a.addEventListener("touchstart",t(a))}window.addEventListener("mousemove",n),window.addEventListener("touchmove",n),window.addEventListener("mouseup",r),window.addEventListener("touchend",r)}},i=function(e){var t=point(e);return!!t&&(window.d3.event={sourceEvent:e,x:t.x,y:t.y},!0)};return o.on=function(t,n){return"start"===t?e.onStart=n:"drag"===t?e.onDrag=n:"end"===t?e.onEnd=n:console.error("Drag type ",t," not defined."),o},o},e.mouse=function(e){var t=window.d3.mouse(e);return[t[0]-window.scrollX,t[1]-window.scrollY]},e.random=function(e){var t=Array.from(e).reduce((function(e,t){return Math.imul(31,e)+t.charCodeAt(0)|0}),0);return function(){var e=1e4*Math.sin(t++);return e-Math.floor(e)}},e}();function point(e){var t=e.target,n=t.ownerSVGElement||t,r=e instanceof MouseEvent?e:e.touches[0];if(!r)return console.warn(e),null;if(n.createSVGPoint){var o=n.createSVGPoint();return o.x=r.clientX,o.y=r.clientY,{x:(o=o.matrixTransform(t.getScreenCTM().inverse())).x,y:o.y}}var i=t.getBoundingClientRect();return{x:r.clientX-i.left-t.clientLeft,y:r.clientY-i.top-t.clientTop}}var parts=window.location.href.match(/\?visconnectid=([a-z0-9\-]+)/),ownId=__spreadArrays(Array(10)).map((function(e){return(~~(36*Math.random())).toString(36)})).join(""),leaderId=parts?parts[1]:ownId;window.vc={drag:VisConnectUtil.drag,mouse:VisConnectUtil.mouse,random:VisConnectUtil.random(leaderId)},console.log("init vislink"),disableStopPropagation(),delayAddEventListener().then((function(){var e,t=document.querySelectorAll("[collaboration]"),n=document.getElementsByTagName("svg")[0],r=!0,o=void 0,i=void 0;if(t.length){var s=(e=t[0]).getAttribute("collaboration");s&&"live"===s&&(r=!1);var c=e.getAttribute("custom-events");c&&(o=c.replace(" ","").split(","));var a=e.getAttribute("ignore-events");a&&(i=a.replace(" ","").split(","))}else e=n||document.body;console.log("start visconnect"),visconnect=new Visconnect(e,ownId,leaderId,r,o,i),visconnectUi=new VisConnectUi(visconnect,e),visconnect.onEventCancelled=visconnectUi.eventCancelled.bind(visconnectUi)}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
